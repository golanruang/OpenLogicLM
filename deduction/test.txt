{"version": "0.2", "hypothesis": "the noncom is not synchronic but it is Mongol.", "hypothesis_formula": "(\u00ac{C}{c} & {D}{c})", "context": "sent1: the bigamist is a compline if the dun does not spring-clean heated and does not deprecate snarer. sent2: if that something is a compline and it is a Mongol is not right it is not a kind of a Mongol. sent3: that the noncom is a kind of a Mongol is not false. sent4: the noncom is not synchronic if it is not a Cygnus. sent5: the bigamist is not a compline. sent6: if the fact that the dun does not spring-clean heated and it does not deprecate snarer is wrong then the noncom is not a kind of a Cygnus.", "context_formula": "sent1: (\u00ac{AA}{a} & \u00ac{AB}{a}) -> {B}{b} sent2: (x): \u00ac({B}x & {D}x) -> \u00ac{D}x sent3: {D}{c} sent4: \u00ac{A}{c} -> \u00ac{C}{c} sent5: \u00ac{B}{b} sent6: \u00ac(\u00ac{AA}{a} & \u00ac{AB}{a}) -> \u00ac{A}{c}", "proofs": ["void -> assump1: Let's assume that that the dun does not spring-clean heated and does not deprecate snarer hold.; sent1 & assump1 -> int1: the fact that the bigamist is a compline is not incorrect.; int1 & sent5 -> int2: this is contradiction.; [assump1] & int2 -> int3: that the dun does not spring-clean heated and does not deprecate snarer is not true.; int3 & sent6 -> int4: the noncom is not a Cygnus.; int4 & sent4 -> int5: the noncom is not synchronic.; int5 & sent3 -> hypothesis;"], "proofs_formula": ["void -> assump1: (\u00ac{AA}{a} & \u00ac{AB}{a}); sent1 & assump1 -> int1: {B}{b}; int1 & sent5 -> int2: #F#; [assump1] & int2 -> int3: \u00ac(\u00ac{AA}{a} & \u00ac{AB}{a}); int3 & sent6 -> int4: \u00ac{A}{c}; int4 & sent4 -> int5: \u00ac{C}{c}; int5 & sent3 -> hypothesis;"], "negative_hypothesis": "the Napoleon is not Mongol.", "negative_hypothesis_formula": "\u00ac{D}{ic}", "negative_proofs": ["sent2 -> int6: the Napoleon is not a kind of a Mongol if that it is a compline and it is a Mongol is wrong.;"], "negative_original_tree_depth": 4, "original_tree_depth": 6, "depth": 6, "num_formula_distractors": 1, "num_translation_distractors": 0, "num_all_distractors": 1, "proof_label": "PROVED", "negative_proof_label": "UNKNOWN", "world_assump_label": "PROVED", "negative_world_assump_label": "UNKNOWN"}