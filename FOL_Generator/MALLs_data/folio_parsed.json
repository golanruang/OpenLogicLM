[
    {
        "NL": "All people who regularly drink coffee are dependent on caffeine.",
        "FOL": "\u2200x (Drinks(x) \u2192 Dependent(x))"
    },
    {
        "NL": "People either regularly drink coffee or joke about being addicted to caffeine.",
        "FOL": "\u2200x (Drinks(x) \u2295 Jokes(x))"
    },
    {
        "NL": "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.",
        "FOL": "\u2200x (Jokes(x) \u2192 \u00acUnaware(x))"
    },
    {
        "NL": "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.",
        "FOL": "(Student(rina) \u2227 Unaware(rina)) \u2295 \u00ac(Student(rina) \u2228 Unaware(rina))"
    },
    {
        "NL": "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ",
        "FOL": "\u00ac(Dependent(rina) \u2227 Student(rina)) \u2192 (Dependent(rina) \u2227 Student(rina)) \u2295 \u00ac(Dependent(rina) \u2228 Student(rina))"
    },
    {
        "NL": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "FOL": "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)"
    },
    {
        "NL": "Any choral conductor is a musician.",
        "FOL": "\u2200x (ChoralConductor(x) \u2192 Musician(x))"
    },
    {
        "NL": "Some musicians love music.",
        "FOL": "\u2203x (Musician(x) \u2192 Love(x, music))"
    },
    {
        "NL": "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.",
        "FOL": "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)"
    },
    {
        "NL": "All eels are fish. ",
        "FOL": "\u2200x  (Eel (x)\u2192  Fish (x))"
    },
    {
        "NL": "No fish are plants. ",
        "FOL": "\u2200x  (Fish (x)\u2192 \u00ac Plant (x))"
    },
    {
        "NL": "A thing is either a plant or animal.",
        "FOL": "\u2200x ( Plant (x) \u2228  Animal (x))"
    },
    {
        "NL": "Nothing that breathes is paper. ",
        "FOL": "\u2200x  (Breathe (x)\u2192 \u00ac Paper (x))"
    },
    {
        "NL": "All animals breathe.",
        "FOL": "\u2200x  (Animal (x)\u2192  Breathe (x))"
    },
    {
        "NL": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.",
        "FOL": " Eel (seaEel) \u2295 Plant (seaEel) \u2192 Eel (seaEel) \u2228 Animal (seaEel) "
    },
    {
        "NL": "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.",
        "FOL": "\u2200x (Blake(x) \u2192 Building(x))"
    },
    {
        "NL": "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.",
        "FOL": "\u2200x (Blake(x) \u2192 Historic(x, year1990))"
    },
    {
        "NL": "The Emmet Building is a five-story building in Portland, Oregon.",
        "FOL": "\u2200x (Emmet(x) \u2192 Building(x) \u2227 FiveStory(x) \u2227 Locate(x, portland))"
    },
    {
        "NL": "The Emmet Building was built in 1915.",
        "FOL": "\u2200x (Emmet(x) \u2192 Construct(x, year1915))"
    },
    {
        "NL": "The Emmet Building is another name for the Blake McFall Company Building.",
        "FOL": "\u2200x (Emmet(x) \u2194 Blake(x))"
    },
    {
        "NL": "John works at the Emmet Building.",
        "FOL": "\u2203x (Emmet(x) \u2227 Work(john, x))"
    },
    {
        "NL": "William Dickinson was a British politician who sat in the House of Commons",
        "FOL": "BritishPolitician(williamdickinson) \u2227 SatInHouseOfCommons(williamdickinson)"
    },
    {
        "NL": "William Dickinson attended Westminster school for high school and then the University of Edinburgh.",
        "FOL": "Attended(williamdickinson, westminster) \u2227 Highschool(westminster) \u2227 Attended(williamdickinson, universityofedinburgh)"
    },
    {
        "NL": "The University of Edinburgh is a university located in the United Kingdom.",
        "FOL": "LocatedIn(universityofedinburgh, unitedkingdom) \u2227 University(universityofedinburgh)"
    },
    {
        "NL": "William Dickinson supported the Portland Whigs.",
        "FOL": "Supported(williamdickinson, portlandwhigs)"
    },
    {
        "NL": "People who supported the Portland Whigs did not get a seat in the Parliament.",
        "FOL": "\u2200x (Supported(x, portlandwhigs) \u2192 \u00acSeatInParliament(x))"
    },
    {
        "NL": "LanguageA is a universal language",
        "FOL": "UniversalLanguage(languageA)"
    },
    {
        "NL": "If a universal language exists, then for every two people if they both know the same universal language they can communicate.",
        "FOL": "\u2200x \u2200y (\u2203z (Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 Communicate(x, y))"
    },
    {
        "NL": "Katya cannot communicate with Danil.",
        "FOL": "Know(katya, languageA)"
    },
    {
        "NL": "Katya knows LanguageA. ",
        "FOL": "\u00acCommunicate(katya, danil)"
    },
    {
        "NL": "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "FOL": "\u2200x (AMC(x) \u2192 ThreeMovies(x))"
    },
    {
        "NL": "Some customers go to cinemas every week",
        "FOL": "\u2203x (CinemaEveryWeek(x))"
    },
    {
        "NL": "Customers either subscribe to AMC service or HBO service. ",
        "FOL": "\u2200x (AMC(x) \u2228 HBO(x))"
    },
    {
        "NL": "Customers who prefer TV series more and will not watch TV series in cinemas.",
        "FOL": "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))"
    },
    {
        "NL": "All customers who subscribe to HBO services prefer TV series to movies. ",
        "FOL": "\u2200x (HBO(x) \u2192 PreferTVSeries(x))"
    },
    {
        "NL": "James watches TV series in cinemas. ",
        "FOL": "WatchTVInCinema(james)"
    },
    {
        "NL": "A La Liga soccer team ranks higher than another if it receives more points.",
        "FOL": "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 MorePoints(x, y) \u2192 HigherRank(x, y))"
    },
    {
        "NL": "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.",
        "FOL": "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 \u00acMorePoints(x, y) \u2227 \u00acMorePoints(y, x) \u2227 MorePointsInGameBetween(x, y) \u2192 HigherRank(x, y))"
    },
    {
        "NL": "Real Madrid and Barcelona are both La Liga soccer teams.",
        "FOL": "LaLiga(realMadrid) \u2227 LaLiga(barcelona)"
    },
    {
        "NL": "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.",
        "FOL": "MorePoints(realMadrid, barcelona)"
    },
    {
        "NL": "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.",
        "FOL": "\u00acMorePointsInGameBetween(realMadrid, barcelona) \u2227 \u00acMorePointsInGameBetween(barcelona, realMadrid)"
    },
    {
        "NL": "Lawton Park is a neighbourhood in Seattle. ",
        "FOL": "Neighbourhoodin(lawtonPark, seattle)"
    },
    {
        "NL": "All citizens of Lawton Park use the zip code 98199. ",
        "FOL": "\u2200x (Citizenof(x, lawtonPark) \u2192 Usezipcode(x, number98199))"
    },
    {
        "NL": "Tom is a citizen of Lawton Park.",
        "FOL": "Citizenof(tom, lawtonPark)"
    },
    {
        "NL": "Daniel uses the zip code 98199. ",
        "FOL": "Usezipcode(daniel, number98199)"
    },
    {
        "NL": "If a legislator is found guilty of stealing government funds, they will be suspended from office.",
        "FOL": "\u2200x (IsLegislator(x) \u2227 StealsFunds(x) \u2192 Suspended(x))"
    },
    {
        "NL": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
        "FOL": "IsLegislator(tiffanyTAlston)"
    },
    {
        "NL": "Tiffany T. Alston was found guilty of stealing government funds in 2012.",
        "FOL": "StealsFunds(tiffanyTAlston)"
    },
    {
        "NL": "Some fish may sting.",
        "FOL": "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))"
    },
    {
        "NL": "Stonefish is a fish.",
        "FOL": "Fish(stonefish)"
    },
    {
        "NL": "It stings to step on a stonefish.",
        "FOL": "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))"
    },
    {
        "NL": "Stonefish stings cause death if not treated.",
        "FOL": "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))"
    },
    {
        "NL": "To treat stonefish stings, apply heat to the affected area or use an antivenom.",
        "FOL": "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))"
    },
    {
        "NL": "Some monitors produced by LG have a type-c port.",
        "FOL": "\u2203x (LG(x) \u2227 TypeC(x))"
    },
    {
        "NL": "If the monitor has a type-c port, then it is not produced by AOC.",
        "FOL": "\u2200x (TypeC(x) \u2192 \u00acAOC(x))"
    },
    {
        "NL": "All monitors in the library are produced by AOC. ",
        "FOL": "\u2200x (Library(x) \u2192 AOC(x))"
    },
    {
        "NL": "L-2021 is either in the library or has a type-c port.",
        "FOL": "Library(l-2021) \u2295 TypeC(l-2021) "
    },
    {
        "NL": "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.",
        "FOL": "\u00ac(AOC(l-2021) \u2295 LG(l-2021))"
    },
    {
        "NL": "People eat meat regularly or are vegetation.",
        "FOL": "\u2200x (Meat(x) \u2228 Vegetarian(x))"
    },
    {
        "NL": "If people eat meat regularly, then they enjoy eating hamburgers and steaks.",
        "FOL": "\u2200x (Meat(x) \u2192 Hamburgers(x))"
    },
    {
        "NL": "All people who are vegetarian are conscious of the environment or their health.",
        "FOL": "\u2200x (Vegetarian(x) \u2192 Conscious(x))"
    },
    {
        "NL": "If people are conscious about the environment or their health, then they do not go to fast food places often.",
        "FOL": "\u2200x (Conscious(x) \u2192 \u00acFastFood(x))"
    },
    {
        "NL": "If people have busy schedules without time to cook, then they go to fast food places often.",
        "FOL": "\u2200x (Busy(x) \u2192 FastFood(x))"
    },
    {
        "NL": "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.",
        "FOL": "\u00ac(FastFood(jeremy) \u2227 Conscious(jeremy)) \u2192 FastFood(jeremy)"
    },
    {
        "NL": "Sam is doing a project.",
        "FOL": "\u2203x (Project(x) \u2227 Do(sam, x))"
    },
    {
        "NL": "A project is written either in C++ or in Python.",
        "FOL": " \u2200x (Project(x) \u2192 (WrittenIn(x, python) \u2295 WrittenIn(x, c++)))"
    },
    {
        "NL": "If Sam does a project written in Python, he will not use a Mac.",
        "FOL": " \u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))"
    },
    {
        "NL": "Sam is using a Mac.",
        "FOL": " Use(sam, mac)"
    },
    {
        "NL": "If Sam uses a Mac, he will play a song.",
        "FOL": " Use(sam, mac) \u2192 \u2203x (Song(x) \u2227 Play(sam, x))"
    },
    {
        "NL": "If a song is not \"Perfect\", Sam will never play it.",
        "FOL": " \u2200x (\u00acBe(x, perfect) \u2192 \u00acPlay(sam, x))"
    },
    {
        "NL": "All rabbits have fur",
        "FOL": "\u2200x (Rabbit(x) \u2192 HasFur(x))"
    },
    {
        "NL": "Some pets are rabbits.",
        "FOL": "\u2203x (Pet(x) \u2227 Reptile(x))"
    },
    {
        "NL": "All video applications are software.",
        "FOL": "\u2200x (App(x) \u2192 Software(x))"
    },
    {
        "NL": "All YouTube-related applications are video applications. ",
        "FOL": "\u2200x (Youtube(x) \u2192 App(x))"
    },
    {
        "NL": "An APP is either related to YouTube or Instagram.",
        "FOL": "\u2200x (Youtube(x) \u2228 Instagram(x))"
    },
    {
        "NL": "All Instagram is entertainment. ",
        "FOL": "\u2200x (Instagram(x) \u2192 Entertainment(x))"
    },
    {
        "NL": "All software is programmed. ",
        "FOL": "\u2200x (Software(x) \u2192 Program(x))"
    },
    {
        "NL": "All entertainments are interesting.",
        "FOL": "\u2200x (Entertainment(x) \u2192 Interesting(x))"
    },
    {
        "NL": "If something is interesting, then it is good.",
        "FOL": "\u2200x (Interesting(x) \u2192 Good(x))"
    },
    {
        "NL": "TikTok is not good.",
        "FOL": "\u00acGood(tiktok)"
    },
    {
        "NL": "Ordinary is an unincorporated community.",
        "FOL": "UnincorporatedCommunity(ordinary)"
    },
    {
        "NL": "Located within Elliot County, Ordinary is on Kentucky Route 32.",
        "FOL": "In(ordinary, elliotcounty) \u2227 On(ordinary, kentuckyroute32)"
    },
    {
        "NL": "Ordinary is located northwest of Sandy Hook.",
        "FOL": "NorthwestOf(ordinary, sandyhook)"
    },
    {
        "NL": "All young adults go on a diet.",
        "FOL": "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))"
    },
    {
        "NL": "All college students are young adults.",
        "FOL": "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))"
    },
    {
        "NL": "All Yale students are college students.",
        "FOL": "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))"
    },
    {
        "NL": "Someone is either a Yale student or a Harvard student.",
        "FOL": "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))"
    },
    {
        "NL": "All Harvard students are diligent.",
        "FOL": "\u2200x (HarvardStudent(x) \u2192 Diligent(x))"
    },
    {
        "NL": "If Susan is a Harvard student, then she is a young adult.",
        "FOL": "HarvardStudent(susan) \u2192 YoungAdult(susan)"
    },
    {
        "NL": "If Susan is a Yale student, then she does not go on a diet.",
        "FOL": "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)"
    },
    {
        "NL": "Vic DiCara plays guitar and bass.",
        "FOL": "Play(vicdicara, guitar) \u2227 Play(vicdicara, bass)"
    },
    {
        "NL": "The only style of music Vic DiCara plays is punk music.",
        "FOL": "\u00ac(\u2203x (Music (vicdicara, punk) \u2227 Music (vicdicara, x)))"
    },
    {
        "NL": "Vic DiCara played in the band Inside Out.",
        "FOL": "Band(vicdicara, insideOut)"
    },
    {
        "NL": "All athletes are good at sports.",
        "FOL": "\u2200x (Athlete(x) \u2192 GoodAtSports(x))"
    },
    {
        "NL": "All Olympic gold medal winners are good athletes.",
        "FOL": "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))"
    },
    {
        "NL": "No scientists are good at sports.",
        "FOL": "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))"
    },
    {
        "NL": "All Nobel laureates are scientists.",
        "FOL": "\u2200x (NobelLaureate(x) \u2192 Scientist(x))"
    },
    {
        "NL": "Amy is good at sports or Amy is an Olympic gold medal winner.",
        "FOL": "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)"
    },
    {
        "NL": "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.",
        "FOL": "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)"
    },
    {
        "NL": "All fruits with the color red contain a large amount of vitamin C.",
        "FOL": "\u2200x (RedFruit(x) \u2192 VC(x))"
    },
    {
        "NL": "All apples are fruits with the color red.",
        "FOL": "\u2200x (Apple(x) \u2192 RedFruit(x))"
    },
    {
        "NL": "All fruits containing a large amount of vitamin C are beneficial to people. ",
        "FOL": "\u2200x (VC(x) \u2192 Benefit(x))"
    },
    {
        "NL": "No fruits that are beneficial to people are on a warning list.",
        "FOL": "\u2200x (Benefit(x) \u2192 \u00acWarningList(x))"
    },
    {
        "NL": "If K is not beneficial to people and also not an apple, then it is a fruit with the color red.",
        "FOL": "\u00ac(Benefit(k) \u2227 Apple(k)) \u2192 RedFruit(k)"
    },
    {
        "NL": "Everyone working at Meta has a high income. ",
        "FOL": "\u2200x (Meta(x) \u2192 HighIncome(x))"
    },
    {
        "NL": "If a person has a high income, then he/she will not take a bus to their destination.",
        "FOL": "\u2200x (HighIncome(x) \u2192 \u00acBus(x))"
    },
    {
        "NL": "People will either take a bus or drive to their destination. ",
        "FOL": "\u2200x (Bus(x) \u2228 Drive(x))"
    },
    {
        "NL": "Everyone who has a car will choose to drive to their destination. ",
        "FOL": "\u2200x (HaveCars(x) \u2192 Drive(x))"
    },
    {
        "NL": "No students drive to their destination. ",
        "FOL": "\u2200x (Student(x) \u2192 \u00acDrive(x))"
    },
    {
        "NL": "James has a car or works at Meta.",
        "FOL": "HaveCars(james) \u2228 Meta(james)"
    },
    {
        "NL": "Students either go to the park or go to the movies. ",
        "FOL": "\u2200x (Park(x) \u2295 Movies(x))"
    },
    {
        "NL": "No student who enjoys nature has free time during the weekend. ",
        "FOL": "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))"
    },
    {
        "NL": "All students who go to the movies enjoy nature. ",
        "FOL": "\u2200x (Movies(x) \u2192 Nature(x))"
    },
    {
        "NL": "All students who do not have class during the weekend have free time during the weekend. ",
        "FOL": "\u2200x (NoClass(x) \u2192 FreeTime(x))"
    },
    {
        "NL": "All students not in summer camp do not have class during the weekend. ",
        "FOL": "\u2200x (SummerCamp(x) \u2192 NoClass(x))"
    },
    {
        "NL": "James does not have class during the weekend.",
        "FOL": "NoClass(james)"
    },
    {
        "NL": "No television stars are certified public accountants.",
        "FOL": "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))"
    },
    {
        "NL": "All certified public accountants have good business sense.",
        "FOL": "\u2200x (CertifiedPublicAccoutant(x) \u2192 GoodBusinessSense(x))"
    },
    {
        "NL": "Some students good at math are good at chemistry.",
        "FOL": "\u2203x (Math(x) \u2227 Chemistry(x))"
    },
    {
        "NL": "All students good at chemistry enjoy conducting experiments. ",
        "FOL": "\u2200x (Chemistry(x) \u2192 Experiment(x))"
    },
    {
        "NL": "All students that enjoy conducting experiments are good at planning. ",
        "FOL": "\u2200x (Experiment(x) \u2192 Planning(x))"
    },
    {
        "NL": "No student good at planning is awarded the Dean's List. ",
        "FOL": "\u2200x (Planning(x) \u2192 \u00acAward(x))"
    },
    {
        "NL": "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List.",
        "FOL": "\u00ac(Chemistry(james) \u2295 Award(james))"
    },
    {
        "NL": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ",
        "FOL": "\u2200x (Easy(x) \u2192 LowerAC(x))"
    },
    {
        "NL": "All Leetcode problems that are recommended to novices are easy. ",
        "FOL": "\u2200x (Recommended(x) \u2192 Easy(x))"
    },
    {
        "NL": "A Leetode problem is either easy or hard.",
        "FOL": "\u2200x (Easy(x) \u2295 Hard(x))"
    },
    {
        "NL": "Leetcode problems that are starred by more than 1 thousand users are hard.",
        "FOL": "\u2200x (Starred(x) \u2192 Hard(x))"
    },
    {
        "NL": "2Sum is recommended to novices. ",
        "FOL": "Recommended(twosum) "
    },
    {
        "NL": "4Sum is starred by more than 1 thousand users.",
        "FOL": "Starred(foursum)"
    },
    {
        "NL": "All rental cars cost the renter money.",
        "FOL": "\u2200x (Rent(x, car) \u2192 Spend(x, money))"
    },
    {
        "NL": "Whenever Sarah goes to Vermont, Sarah drives there.",
        "FOL": "GoesTo(sarah, vermont) \u2192 DriveTo(sarah, vermont)"
    },
    {
        "NL": "For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.",
        "FOL": "\u2200x \u2200y (\u00acOwn(x, car) \u2227 DriveTo(x, y) \u2192 Borrow(x, car) \u2295 Rent(x, car))"
    },
    {
        "NL": "Sarah doesn\u2019t own a car.",
        "FOL": "\u00acOwn(sarah, car)"
    },
    {
        "NL": "Sarah never borrows a car to go camping.",
        "FOL": "\u2200x (Camping(sarah, x) \u2192 \u00ac(Borrow(sarah, car)))"
    },
    {
        "NL": "Sarah is going to go camping in Vermont this weekend.",
        "FOL": "Camping(sarah, vermont)"
    },
    {
        "NL": "To go camping somewhere, you must go to that place.",
        "FOL": "\u2200x \u2200y (Camping(x, y) \u2192 GoesTo(x, y))"
    },
    {
        "NL": "All people who attend weddings are getting married or have friends who are getting married.",
        "FOL": "\u2200x Weddings(x) \u2192 GettingMarried(x)"
    },
    {
        "NL": "No preteens and other young children are getting married or have friends who are getting married.",
        "FOL": "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)"
    },
    {
        "NL": "If people enjoy celebrating life milestone events with other people, then they attend weddings.",
        "FOL": "\u2200x Celebrating(x) \u2192 Weddings(x)"
    },
    {
        "NL": "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "FOL": "\u2200x LargeGathering(x) \u2192 Celebrating(x)"
    },
    {
        "NL": "All people who are outgoing and very spirited are fond of large organized group functions.",
        "FOL": "\u2200x Outgoing(x) \u2192 LargeGathering(x)"
    },
    {
        "NL": "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ",
        "FOL": "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)"
    },
    {
        "NL": "All Republicans are anti-abortion.",
        "FOL": "\u2200x (Republicans(x) \u2192 Anti-abortion(x))"
    },
    {
        "NL": "Either Republicans or Democrats. ",
        "FOL": " \u2200x (Republicans(x) \u2228 Democrats(x))"
    },
    {
        "NL": "No Democrats are conservative.",
        "FOL": " \u2200x (Democrats(x) \u2192 \u00acConservative(x))"
    },
    {
        "NL": "Either conservative or liberal. ",
        "FOL": " \u2200x (Conservative(x) \u2228 Liberal(x))"
    },
    {
        "NL": "A U.S government official is either conservative or a Republican.",
        "FOL": " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)"
    },
    {
        "NL": "All advocates of high tariff rates are Republicans.",
        "FOL": "\u2200x (AdvocateOfHighTariff(x) \u2192 Republican(x))"
    },
    {
        "NL": "Some Republicans are not conservatives.",
        "FOL": "\u2203x (Republican(x) \u2227 \u00acConservative(x))"
    },
    {
        "NL": "No athletes are slow runners. ",
        "FOL": "\u2200x (Athlete(x) \u2192 \u00acSlowRunner(x))"
    },
    {
        "NL": "All professional basketball players are athletes. ",
        "FOL": "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))"
    },
    {
        "NL": "All NBA players are professional basketball players. ",
        "FOL": "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))"
    },
    {
        "NL": "All Knicks players are NBA players. ",
        "FOL": "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))"
    },
    {
        "NL": "Jim is either not a professional basketball player or not a slow runner. ",
        "FOL": "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 SlowRunner(jim))"
    },
    {
        "NL": "All kids love animals.",
        "FOL": "\u2200x (Kid(x) \u2192 LoveAnimals(x))"
    },
    {
        "NL": "All toddlers are kids.",
        "FOL": "\u2200x (Toddler(x) \u2192 Kid(x))"
    },
    {
        "NL": "If someone loves animals, then they are not bad.",
        "FOL": "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))"
    },
    {
        "NL": "All pirates are bad.",
        "FOL": "\u2200x (Pirate(x) \u2192 Bad(x))"
    },
    {
        "NL": "If Nancy is not a pirate, then Nancy loves animals.",
        "FOL": "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)"
    },
    {
        "NL": "If Nancy is not a toddler, then Nancy is bad.",
        "FOL": "\u00acToddler(nancy) \u2192 Bad(nancy)"
    },
    {
        "NL": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.",
        "FOL": "DirectedBy(after_Tiller, lana_Wilson) \u2227 DirectedBy(the_Departure, lana_Wilson) \u2227 DirectedBy(miss_Americana, lana_Wilson)"
    },
    {
        "NL": "If a film is directedy by a person, the person is a filmmaker.",
        "FOL": "\u2200x \u2203y (DirectedBy(y, x) \u2192 Filmmaker(x))"
    },
    {
        "NL": "After Tiller is a documentary.",
        "FOL": "IsDocumentary(after_Tiller)"
    },
    {
        "NL": "The documentary is a type of films.",
        "FOL": "\u2200x (IsDocumentary(x) \u2192 IsFilm(x))"
    },
    {
        "NL": "Lana Wilson is from Kirkland.",
        "FOL": "FromCity(lana_Wilson, kirkland)"
    },
    {
        "NL": "Kirkland is a US city.",
        "FOL": "CityCountry(kirkland, us)"
    },
    {
        "NL": "If a person is from a city in a country, the person is from the country.",
        "FOL": "\u2200x \u2200y \u2200z (FromCity(x, y) \u2227 CityCountry(y, z) \u2192 FromCountry(x, z))"
    },
    {
        "NL": "After Tiller is nominated for the Independent Spirit Award for Best Documentary.",
        "FOL": "Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)"
    },
    {
        "NL": "All bears in zoos are not wild. ",
        "FOL": "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))"
    },
    {
        "NL": "Some bears are in zoos. ",
        "FOL": "\u2203x (Bear(x) \u2227 InZoo(x)) "
    },
    {
        "NL": "If a person is the leader of a country for life, that person is in a monarchy. ",
        "FOL": "\u2200x (Leader(x) \u2192 InMonarchy(x))"
    },
    {
        "NL": "Leaders are either a king or a queen.",
        "FOL": "\u2200x (Leader(x) \u2192 King(x) \u2295 Queen(x))"
    },
    {
        "NL": "Queens are female.",
        "FOL": "\u2200x (Queen(x) \u2192 Female(x))"
    },
    {
        "NL": "Kings are male. ",
        "FOL": "\u2200x (King(x) \u2192 Male(x))"
    },
    {
        "NL": "Elizabeth is a queen.",
        "FOL": "Queen(elizabeth)"
    },
    {
        "NL": "Elizabeth is a leader",
        "FOL": "Leader(elizabeth)"
    },
    {
        "NL": "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.",
        "FOL": "\u2200x (Matcha(x) \u2192 \u00acLate(x))"
    },
    {
        "NL": "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.",
        "FOL": "\u2200x (California(x) \u2192 Matcha(x))"
    },
    {
        "NL": "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.",
        "FOL": "\u2200x (Celebrities(x) \u2192 Late(x))"
    },
    {
        "NL": "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.",
        "FOL": "\u2200x (Jobs(x) \u2192 Celebrities(x))"
    },
    {
        "NL": "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.",
        "FOL": "\u2200x (WorkHome(x) \u2192 Jobs(x))"
    },
    {
        "NL": "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.",
        "FOL": "(WorkHome(clay) \u2227 Matcha(clay)) \u2295 (\u00acWorkHome(clay) \u2227 \u00acMatcha(clay))"
    },
    {
        "NL": "Thomas Barber was an English professional footballer.",
        "FOL": "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)"
    },
    {
        "NL": "Thomas Barber played in the Football League for Aston Villa.",
        "FOL": "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)"
    },
    {
        "NL": "Thomas Barber played as a half back and inside left.",
        "FOL": "PlayedAs(thomasBarber, aHalfBack) \u2227 PlayedAs(thomasBarber, anInsideLeft)"
    },
    {
        "NL": "Thomas Barber scored the winning goal in the 1913 FA Cup Final.",
        "FOL": "ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)"
    },
    {
        "NL": "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
        "FOL": "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))"
    },
    {
        "NL": "Peter plays piano, violin, and saxophone.",
        "FOL": "Play(peter, piano) \u2227Play(peter, violin)"
    },
    {
        "NL": "Peter was invited to play piano at the concert hall.",
        "FOL": "PlayInConcert(peter, piano)"
    },
    {
        "NL": "Oliver and Peter were both invited to perform in the concert.",
        "FOL": "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)"
    },
    {
        "NL": "Oliver plays a different musical instrument from Peter in the concert.",
        "FOL": "\u00acPlayInConcert(oliver, piano)"
    },
    {
        "NL": "If something can go underwater, then it enjoys water.",
        "FOL": "\u2200x (GoesUnderwater(x) \u2192 EnjoysWater(x))"
    },
    {
        "NL": "All animals that can swim can go underwater.",
        "FOL": "\u2200x (CanSwim(x) \u2192 GoesUnderwater(x))"
    },
    {
        "NL": "Either an animal can swim or it can walk.",
        "FOL": "\u2200x (CanSwim(x) \u2228 CanWalk(x))"
    },
    {
        "NL": "Animals that can walk travel on land.",
        "FOL": "\u2200x (CanWalk(x) \u2192 TravelsOnLand(x))"
    },
    {
        "NL": "Animals that enjoy water splash water around.",
        "FOL": "\u2200x (EnjoysWater(x) \u2192 Splashes(x))"
    },
    {
        "NL": "Every animal that travels on land enjoys basking in the sun.",
        "FOL": "\u2200x (TravelsOnLand(x) \u2192 EnjoysBasking(x))"
    },
    {
        "NL": "George splashes water around and can swim.",
        "FOL": "Splashes(george) \u2227 CanSwim(george)"
    },
    {
        "NL": "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.",
        "FOL": "(CanWalk(liam) \u2227 EnjoysWater(liam)) \u2228 (\u00acCanWalk(liam) \u2227 \u00acEnjoysWater(liam))"
    },
    {
        "NL": "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
        "FOL": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)"
    },
    {
        "NL": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
        "FOL": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)"
    },
    {
        "NL": "P values are thresholds for belief, not metrics of effect. ",
        "FOL": " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))"
    },
    {
        "NL": "All dispensable things are environment-friendly. ",
        "FOL": "\u2200x (Dispensable(x) \u2192 EnvironmentFriendly(x))"
    },
    {
        "NL": "All woodware is dispensable.",
        "FOL": "\u2200x (Woodware(x) \u2192 Dispensable(x))"
    },
    {
        "NL": "All paper is woodware. ",
        "FOL": "\u2200x (Paper(x) \u2192 Woodware(x))"
    },
    {
        "NL": "No good things are bad. ",
        "FOL": "\u2200x (Good(x) \u2192 \u00acBad(x))"
    },
    {
        "NL": "All environment-friendly things are good.",
        "FOL": "\u2200x (EnvironmentFriendly(x) \u2192 Good(x))"
    },
    {
        "NL": "A worksheet is either paper or is environment-friendly.",
        "FOL": "Paper(worksheet) \u2295 EnvironmentFriendly(worksheet)"
    },
    {
        "NL": "No reptile has fur.",
        "FOL": "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))"
    },
    {
        "NL": "All snakes are reptiles.",
        "FOL": "\u2200x (Snake(x) \u2192 Reptile(x))"
    },
    {
        "NL": "All buildings in New Haven are low. ",
        "FOL": "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))"
    },
    {
        "NL": "All buildings managed by the Yale Housing are located in New Haven. ",
        "FOL": "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))"
    },
    {
        "NL": "All buildings in Manhattans are high. ",
        "FOL": "\u2200x (Located(manhattans, x) \u2192 High(x))"
    },
    {
        "NL": "All buildings owned by Bloomberg are located in Manhattans. ",
        "FOL": "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))"
    },
    {
        "NL": "All buildings with the Bloomberg logo are owned by Bloomberg. ",
        "FOL": "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))"
    },
    {
        "NL": "Tower A is managed by the Yale Housing.",
        "FOL": "YaleHousing(tower-a)"
    },
    {
        "NL": "Tower B is with the Bloomberg logo.",
        "FOL": "BloombergLogo(tower-b)"
    },
    {
        "NL": "No cold-blooded animals are birds.",
        "FOL": "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))"
    },
    {
        "NL": "All reptiles are cold-blooded.",
        "FOL": "\u2200x (Reptile(x) \u2192 ColdBlooded(x))"
    },
    {
        "NL": "Either an animal is a bird or it eats other animals.",
        "FOL": "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))"
    },
    {
        "NL": "If an animal eats other animals, then it is a carnivore.",
        "FOL": "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))"
    },
    {
        "NL": "Ron is neither a cold-blooded animal nor a carnivore.",
        "FOL": "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)"
    },
    {
        "NL": "Henry is neither a carnivore nor a lizard.",
        "FOL": "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)"
    },
    {
        "NL": "Ambiortus is a prehistoric bird genus.",
        "FOL": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)"
    },
    {
        "NL": "Ambiorus Dementjevi is the only known species of Ambiortus.",
        "FOL": "\u2200x (Species(x, ambiortus) \u2192 AmbiortusDementjevi(x))"
    },
    {
        "NL": "The Mongol region was where Ambiorus Dementjevi lived.",
        "FOL": "\u2200x (AmbiortusDementjevi(x) \u2192 Lived(x, mongolregion))"
    },
    {
        "NL": "Yevgeny Kurochkin was the discoverer of Ambiortus.",
        "FOL": "Discovered(yevgenykurochkin, ambiortus)"
    },
    {
        "NL": "Everyone that uses a football can throw a football.",
        "FOL": "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))"
    },
    {
        "NL": "If someone plays football, then they use a football.",
        "FOL": "\u2200x (PlayFootball(x) \u2192 UseFootball(x))"
    },
    {
        "NL": "Either someone is a football player or a basketball player.",
        "FOL": "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))"
    },
    {
        "NL": "Every basketball player is tall.",
        "FOL": "\u2200x (BasketballPlayer(x) \u2192 Tall(x))"
    },
    {
        "NL": "Everyone that can throw a football can throw a football with a spiral.",
        "FOL": "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))"
    },
    {
        "NL": "If someone is tall, then they are in shape.",
        "FOL": "\u2200x (Tall(x) \u2192 InShape(x))"
    },
    {
        "NL": "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.",
        "FOL": "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)"
    },
    {
        "NL": "Fort Ticonderoga is the current name for Fort Carillon.",
        "FOL": "CurrentName(fortticonderoga, fortcarillon)"
    },
    {
        "NL": "Pierre de Rigaud de Vaudreuil built Fort Carillon.",
        "FOL": "Built(pierrederigauddevaudreuil, fortcarillon)"
    },
    {
        "NL": "Fort Carillon was located in New France.",
        "FOL": "LocatedIn(fortcarillon, newfrance)"
    },
    {
        "NL": "New France is not in Europe.",
        "FOL": "\u00acLocatedIn(newfrance, europe)"
    },
    {
        "NL": "No soccer players are professional basketball players.",
        "FOL": "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))"
    },
    {
        "NL": "All NBA players are professional basketball players.",
        "FOL": "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))"
    },
    {
        "NL": "All defenders are soccer players.",
        "FOL": "\u2200x (Defender(x) \u2192 SoccerPlayer(x))"
    },
    {
        "NL": "All centerback players are defenders.",
        "FOL": "\u2200x (Centerback(x) \u2192 Defender(x))"
    },
    {
        "NL": "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.",
        "FOL": "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)"
    },
    {
        "NL": "No songs are visual. ",
        "FOL": "\u2200x (Song(x) \u2192 \u00acVisual(x))"
    },
    {
        "NL": "All folk songs are songs. ",
        "FOL": "\u2200x (FolkSong(x) \u2192 Song(x))"
    },
    {
        "NL": "All videos are visual. ",
        "FOL": "\u2200x (Video(x) \u2192 Visual(x))"
    },
    {
        "NL": "All movies are videos.",
        "FOL": "\u2200x (Movie(x) \u2192 Video(x))"
    },
    {
        "NL": "All sci-fi movies are movies.",
        "FOL": "\u2200x (ScifiMovie(x) \u2192 Movie(x))"
    },
    {
        "NL": "Inception is a sci-fi movie.",
        "FOL": "ScifiMovie(inception)"
    },
    {
        "NL": "Mac is neither a folk song nor a sci-fi movie.",
        "FOL": "\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)"
    },
    {
        "NL": "All extroverts are overtly expressive.",
        "FOL": "\u2200x (Extroverts(x) \u2192 OvertlyExpressive(x))"
    },
    {
        "NL": "People are either extroverts or introverts.",
        "FOL": " \u2200x (Extroverts(x) \u2228 Introverts(x)) "
    },
    {
        "NL": "If someone is an introvert, then they are shy and reticent. ",
        "FOL": " \u2200x (Introverts(x) \u2192 ShyAndReticentPerson(x))"
    },
    {
        "NL": "No shy and reticent person likes to talk to strangers.",
        "FOL": " \u2200x (ShyAndReticentPerson(x) \u2192 \u00acLikeToTalkToStrangers(x))"
    },
    {
        "NL": "Jeff is not an extrovert and someone who likes to talk to strangers.",
        "FOL": " \u00acExtroverts(jeff) \u2227 \u00acLikeToTalkToStrangers(jeff)"
    },
    {
        "NL": "No low-scoring players are top players in the league.",
        "FOL": "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))"
    },
    {
        "NL": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
        "FOL": "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))"
    },
    {
        "NL": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
        "FOL": "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))"
    },
    {
        "NL": "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
        "FOL": "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))"
    },
    {
        "NL": "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.",
        "FOL": "LowScore(candace) \u2295 ThreePointer(candace)"
    },
    {
        "NL": "No plants are fungi.",
        "FOL": "\u2200x (Plant(x) \u2192 \u00acFungi(x))"
    },
    {
        "NL": "Mushrooms are fungi.",
        "FOL": "\u2200x (Mushroom(x) \u2192 Fungi(x))"
    },
    {
        "NL": "No road is clean.",
        "FOL": "\u2200x (Road(x) \u2192 \u00acClean(x))"
    },
    {
        "NL": "And some streets are roads.",
        "FOL": "\u2203x (Street(x) \u2227 Road(x))"
    },
    {
        "NL": "New York City is on the East Coast. ",
        "FOL": "On(newyorkcity, eastcoast)"
    },
    {
        "NL": "Seattle is on the West Coast. ",
        "FOL": "On(seattle, westcoast)"
    },
    {
        "NL": "If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.",
        "FOL": "\u2200x \u2200y \u2200z ((TravelingFrom(x, y) \u2227 On(y, eastcoast) \u2227 TravelingTo(x, z) \u2227 On(z, westcoast)) \u2192 OnLongFlight(x))"
    },
    {
        "NL": "Most passengers on flights to Seattle from New York City are not in first class.",
        "FOL": "\u2203x (\u00acInFirstClass(x) \u2227 TravelingFrom(x, newyorkcity) \u2227 TravelingTo(x, seattle))"
    },
    {
        "NL": "People on long flights are uncomfortable unless they're in first class",
        "FOL": "\u2200x (OnLongFlight(x) \u2227 \u00acInFirstClass(x) \u2192 Uncomfortable(x))"
    },
    {
        "NL": "Musicians have very busy lives.",
        "FOL": "\u2200x (Musician(x) \u2192 Busy(x))"
    },
    {
        "NL": "Singh Kaur is a musician and famous.",
        "FOL": "Musician(singhKaur) \u2227 Famous(singhKaur)"
    },
    {
        "NL": "If a musician is not famous, that musician will not make a lot of money.",
        "FOL": "\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeMoney(x))"
    },
    {
        "NL": "A musician can be a singer or a writer.",
        "FOL": "\u2203x (Musician(x) \u2227 Singer(x) \u2228 Writer(x))"
    },
    {
        "NL": "Each building is tall. ",
        "FOL": "\u2200x (Building(x) \u2192 \u00acTall(x))"
    },
    {
        "NL": "Everything tall has  height.",
        "FOL": "\u2200x (Tall(x) \u2192 HasHeight(x))"
    },
    {
        "NL": "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ",
        "FOL": "Cat(garfield) \u2227 MainCharacterGarfield(garfield) \u2227 BeOrange(garfield) \u2227 BeFat(garfield) \u2227 LikeLasagna(garfield)"
    },
    {
        "NL": "Garfield and Odie, who is another pet of Jon, share the same home. ",
        "FOL": "Pet(garfield, jon) \u2227 Pet(odie, jon) \u2227 ShareHome(garfield, odie)"
    },
    {
        "NL": "Garfield hates Odie.",
        "FOL": "Hate(garfield, odie)"
    },
    {
        "NL": "A pet who hates the pet with whom he shares the same owner is childish and possessive.",
        "FOL": "\u2200x \u2200y \u2203z (Pet(x, z) \u2227 Pet(y, z) \u2227 Hate(x, y) \u2192 BeChildish(x) \u2227 BePossessive(x))"
    },
    {
        "NL": "Cats are pets. ",
        "FOL": "\u2200x \u2203y (Cat(x) \u2192 Pet(x, y))"
    },
    {
        "NL": "All humans eat.",
        "FOL": "\u2200x (Human(x) \u2192 Eat(x))"
    },
    {
        "NL": "If something eats, then it is not a plant.",
        "FOL": "\u2200x (Eat(x) \u2192 \u00acPlant(x))"
    },
    {
        "NL": "A thing is either plant or animal.",
        "FOL": "\u2200x (Plant(x) \u2228 Animal(x))"
    },
    {
        "NL": "All goats are animals.",
        "FOL": "\u2200x (Goat(x) \u2192 Animal(x))"
    },
    {
        "NL": "No dirt is an animal.",
        "FOL": "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))"
    },
    {
        "NL": "Hulu is a goat or a human.",
        "FOL": "Goat(hulu) \u2228 Human(hulu)"
    },
    {
        "NL": "A controlled substance is a drug.",
        "FOL": "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))"
    },
    {
        "NL": "There exist both harmful and beneficial controlled substances.",
        "FOL": "\u2203x \u2203x (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 Beneficial(x) \u2227 Harmful(y))"
    },
    {
        "NL": "If a child is exposed to a controlled substance, he or she is in chemical endangerment.",
        "FOL": "\u2200x \u2200y (ExposedToControlledSubstance(x, y) \u2192 ChemicalEndangerment(x))"
    },
    {
        "NL": "Chemical Endangerment is harmful. ",
        "FOL": "\u2200x (ChemicalEndangerment(x) \u2192 Harmful(x))"
    },
    {
        "NL": "The Controlled Substances Act was an act passed in 1971.",
        "FOL": "PassedIn(controlledSubstancesAct, year1971) \u2227 Act(controlledSubstancesAct)"
    },
    {
        "NL": "Some Acts prevent harmful things.",
        "FOL": "\u2203x (Act(x) \u2227 PreventsHarm(x))"
    },
    {
        "NL": "No people who work at corporate jobs are starting a new company.",
        "FOL": "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))"
    },
    {
        "NL": "All entrepreneurs are starting a new company.",
        "FOL": " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))"
    },
    {
        "NL": "All risk-averse people are people who work at corporate jobs.",
        "FOL": " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))"
    },
    {
        "NL": "All people who hate working for others are entrepreneurs.",
        "FOL": " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))"
    },
    {
        "NL": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.",
        "FOL": " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)"
    },
    {
        "NL": "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
        "FOL": "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))"
    },
    {
        "NL": "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
        "FOL": "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)"
    },
    {
        "NL": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.",
        "FOL": "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)"
    },
    {
        "NL": "New York City is Located in the United States of America.",
        "FOL": "Locate(nyc, usa)"
    },
    {
        "NL": "United States of America is part of North America.",
        "FOL": "Locate(usa, northAmerica)"
    },
    {
        "NL": "North America is in the western hemisphere of the earth.",
        "FOL": "Locate(northAmerica, westHemisphere)"
    },
    {
        "NL": "New York City is a highly developed city.",
        "FOL": "HighlyDeveloped(nyc)"
    },
    {
        "NL": "If place A is located in place B and place B is located in place C, then place A is located in place C.",
        "FOL": "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
    },
    {
        "NL": "Callus 4 is a poem that was written by the ancient Roman writer Catullus.",
        "FOL": "Poem(callus4) \u2227 WrittenBy(callus4, catullus) \u2227 Roman(catullus)"
    },
    {
        "NL": "Callus 4 is a story about the retirement of a well-traveled ship.",
        "FOL": "RetirementShip(callus4)"
    },
    {
        "NL": "There is a strong analogy of human aging in the poem Callus 4.",
        "FOL": "Poem(callus4) \u2192 AgingAnalogy(callus4)"
    },
    {
        "NL": "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.",
        "FOL": "Poem(callus4) \u2192 Lambic(callus4) \u2227 Waves(callus4)"
    },
    {
        "NL": "Westworld is an American science fiction-thriller TV series.",
        "FOL": "TVSeries(westworld) \u2227 American(westworld) \u2227 ScienceFictionThriller(westworld)"
    },
    {
        "NL": "In 2016, a new television series named Westworld debuted on HBO.",
        "FOL": "Debut(westworld, year2016)"
    },
    {
        "NL": "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
        "FOL": "\u2203x (Adapt(westworld, x) \u2227 Produce(x, year1973) \u2227 Write(michael, x) \u2227 Direct(michael, x))"
    },
    {
        "NL": "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.",
        "FOL": "About(westworld, robots)"
    },
    {
        "NL": "The 2008 Summer Olympics were held in Beijing, China.",
        "FOL": "HeldIn(summer2008olympics, beijingchina)"
    },
    {
        "NL": "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.",
        "FOL": "SecondToBe(summer2008olympics, heldincommuniststate)"
    },
    {
        "NL": "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "FOL": "Won(china, mostgoldmedals)"
    },
    {
        "NL": "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "FOL": "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)"
    },
    {
        "NL": "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "FOL": "Placed(russia, thirdingoldmedals)"
    },
    {
        "NL": "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "FOL": "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))"
    },
    {
        "NL": "87 countries won at least one medal during the 2008 Games.",
        "FOL": "\u2203x (Country(x) \u2227 Won(x, medal))"
    },
    {
        "NL": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.",
        "FOL": "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)"
    },
    {
        "NL": "Yangshuo is not a district in Guilin. ",
        "FOL": "\u00acDistrictIn(yangshuo, guilin)"
    },
    {
        "NL": "All people who grow their own fresh vegetables in their home garden also have ample space.",
        "FOL": "\u2200x (Garden(x) \u2192 Space(x))"
    },
    {
        "NL": "If people are young working professionals who live in large cities, then they do not have ample space.",
        "FOL": "\u2200x (Professional(x) \u2192 \u00acSpace(x))"
    },
    {
        "NL": "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
        "FOL": "\u2200x (Takeout(x) \u2192 Garden(x))"
    },
    {
        "NL": "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
        "FOL": "\u2200x (GoingOut(x) \u2192 Takeout(x))"
    },
    {
        "NL": "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
        "FOL": "\u2200x (Homecooked(x) \u2192 GoingOut(x))"
    },
    {
        "NL": "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.",
        "FOL": "Garden(michael) \u2228 Homecooked(michael)"
    },
    {
        "NL": "All devices belonging to the company are connected to Google Home. ",
        "FOL": "\u2200x (Company(x) \u2192 GoogleHome(x))"
    },
    {
        "NL": "All devices belonging to employees are connected to the company's wifi. ",
        "FOL": "\u2200x (Employee(x) \u2192 Wifi(x))"
    },
    {
        "NL": "All devices connected to Google Home are controlled by the managers. ",
        "FOL": "\u2200x (GoogleHome(x) \u2192 Controlled(x))"
    },
    {
        "NL": "All devices that connect to the company's wifi are easy to operate. ",
        "FOL": "\u2200x (Wifi(x) \u2192 EasyToOperate(x))"
    },
    {
        "NL": "IPod1 belongs to employees. ",
        "FOL": "Employee(iPod1)"
    },
    {
        "NL": "No touring musicians are permanent members of an orchestra.",
        "FOL": "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))"
    },
    {
        "NL": "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
        "FOL": "\u2200x (Orchestra(x) \u2295 Unique(x))"
    },
    {
        "NL": "All musicians who have a unique musical voice or style are interesting as individual performers.",
        "FOL": "\u2200x (Unique(x) \u2192 Interesting(x))"
    },
    {
        "NL": "All musicians who are interesting as individual performers are capable of attracting large audiences.",
        "FOL": "\u2200x (Interesting(x) \u2192 Capable(x))"
    },
    {
        "NL": "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.",
        "FOL": "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))"
    },
    {
        "NL": "If someone yells, then they are not cool.",
        "FOL": "\u2200x (Yell(x) \u2192 \u00acCool(x))"
    },
    {
        "NL": "If someone is angry, then they yell.",
        "FOL": "\u2200x (Angry(x) \u2192 Yell(x))"
    },
    {
        "NL": "If someone flies, then they are cool.",
        "FOL": "\u2200x (Fly(x) \u2192 Cool(x))"
    },
    {
        "NL": "Every person that knows magic can fly.",
        "FOL": "\u2200x (KnowMagic(x) \u2192 Fly(x))"
    },
    {
        "NL": "All wizards know magic.",
        "FOL": "\u2200x (Wizard(x) \u2192 KnowMagic(x))"
    },
    {
        "NL": "Harry either yells and flies, or neither yells nor flies.",
        "FOL": "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))"
    },
    {
        "NL": "Potter is a wizard and flies.",
        "FOL": "Wizard(potter) \u2227 Fly(potter)"
    },
    {
        "NL": "Products are either produced in China or the US. ",
        "FOL": "\u2200x (China(x) \u2295 US(x))"
    },
    {
        "NL": "All produced in China are labeled. ",
        "FOL": "\u2200x (China(x) \u2192 Labeled(x))"
    },
    {
        "NL": "All produced in the US are sold in the US. ",
        "FOL": "\u2200x (US(x) \u2192 SoldInUS(x))"
    },
    {
        "NL": "If labeled, then the product is cheaper. ",
        "FOL": "\u2200x (Labeled(x) \u2192 Cheaper(x))"
    },
    {
        "NL": "All sold in the US are sold in Walmart. ",
        "FOL": "\u2200x (SoldInUS(x) \u2192 SoldInWalmart(x))"
    },
    {
        "NL": "All displayed on the homepage are sold in Walmart. ",
        "FOL": "\u2200x (DisplayedInHomepage(x) \u2192 SoldInWalmart(x))"
    },
    {
        "NL": "No products returned by customers are sold in Walmart. ",
        "FOL": "\u2200x (ReturnedByCustomer(x) \u2192 \u00acSoldInWalmart(x))"
    },
    {
        "NL": "G-910 is either displayed on the homepage or cheaper.",
        "FOL": "\u00ac(DisplayedInHomepage(g910) \u2295 Cheaper(g910))"
    },
    {
        "NL": "People either order a lot of Amazon packages or are environmentally conscious.",
        "FOL": "\u2200x (Amazon(x) \u2295 Environmental(x))"
    },
    {
        "NL": "If people order a lot of Amazon packages, then they get a lot of daily mail delivered.",
        "FOL": "\u2200x (Amazon(x) \u2192 DailyMail(x))"
    },
    {
        "NL": "If people are environmentally conscious, then they have solar panels in their homes.",
        "FOL": "\u2200x (Environmental(x) \u2192 Solar(x))"
    },
    {
        "NL": "If people get a lot of daily mail delivered, then they are very involved with their neighborhood.",
        "FOL": "\u2200x (DailyMail(x) \u2192 Neighborhood(x))"
    },
    {
        "NL": "If people have solar panels in their homes, then they save a lot of money.",
        "FOL": "\u2200x (Solar(x) \u2192 SaveMoney(x))"
    },
    {
        "NL": "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. ",
        "FOL": "\u00ac(DailyMail(marcy) \u2295 Neighborhood(marcy)) \u2192 (\u00acDailyMail(marcy) \u2228 \u00acAmazon(marcy))"
    },
    {
        "NL": "Indonesia is a country.",
        "FOL": "Country(indonesia)"
    },
    {
        "NL": "In Indonesia, the prosecutor only personally investigates cases of some special crimes.",
        "FOL": "\u2203x \u2203y (Country(indonesia) \u2227 Prosecutor(x) \u2227 Crime(y) \u2192 InvestigatePersonally(x, y))"
    },
    {
        "NL": "Corruption is a type of crime.",
        "FOL": "Crime(corruption)"
    },
    {
        "NL": "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ",
        "FOL": "\u2200x \u2200y (Crime(y) \u2227 PoliceCompInves(y) \u2227 Prosecutor(x) \u2192 Evidence(y) \u2227 HandToProsecutor(x, y))"
    },
    {
        "NL": "Evidence can be either satisfactory or unsatisfactory.",
        "FOL": "\u2200x (Crime(x) \u2227 Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))"
    },
    {
        "NL": "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.",
        "FOL": "\u2200x \u2200y (Evidence(y) \u2227 HandToProsecutor(x, y) \u2227 Satisfactory(y) \u2192 ProsecuteTheOffender(x, y))"
    },
    {
        "NL": "No watch that is battery-powered is automatic.",
        "FOL": "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))"
    },
    {
        "NL": "All digital watches are battery-powered.",
        "FOL": "\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))"
    },
    {
        "NL": "Some mechanical watches are automatic.",
        "FOL": "\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))"
    },
    {
        "NL": "All smart watches are digital.",
        "FOL": "\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))"
    },
    {
        "NL": "Moonwatch is not a digital watch or an automatic.",
        "FOL": "\u00acDigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch)"
    },
    {
        "NL": "People who have the talent of cooking can distinguish the taste of different condiments.",
        "FOL": "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))"
    },
    {
        "NL": "Only people with the talent of cooking can make delicious meals.",
        "FOL": "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) "
    },
    {
        "NL": "If the meal is popular at the party, then it is delicious.",
        "FOL": "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))"
    },
    {
        "NL": "John can make meals which are popular at the party.",
        "FOL": "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))"
    },
    {
        "NL": "Effective monetary policy is possible with successful inflation control and a strong national currency.",
        "FOL": "\u2200x (EffMonPolicy(x) \u2192 InfControl(x) \u2227 StongCurr(x))"
    },
    {
        "NL": "A country cannot simultaneously regulate the exchange rate and successfully control inflation.",
        "FOL": "\u00ac(\u2200x (InfControl(x) \u2227 ExRate(x)))"
    },
    {
        "NL": "The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.",
        "FOL": "\u2200x (Embargo(x) \u2192 ExportFall(x))"
    },
    {
        "NL": "If exports fall sharply, the national currency cannot be in this country.",
        "FOL": "\u2200x (ExportFall(x) \u2192 \u00acStongCurr(x))"
    },
    {
        "NL": "Regulation of the exchange rate is required to have a strong national currency. ",
        "FOL": "\u2200x (ExRate(x) \u2192 StongCurr(x))"
    },
    {
        "NL": "There is an embargo on Russian foreign trade goods.",
        "FOL": "Embargo(russia)"
    },
    {
        "NL": "Video Gag is a French television series that airs weekly.",
        "FOL": "\u2200x (VideoGag(x) \u2192 FrenchTelevision(x) \u2227 AirsWeekly(x))"
    },
    {
        "NL": "Video Gag airs on the French broadcast channel TF1. ",
        "FOL": "\u2200x (VideoGag(x) \u2192 ChannelTF1(x))"
    },
    {
        "NL": "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.",
        "FOL": "\u2200x (FunnyVideos(x) \u2192 AirsWeekly(x))"
    },
    {
        "NL": "All videos aired on Video Gag are in French.",
        "FOL": "\u2200x (VideoGag(x) \u2192 AirsWeekly(x) \u2227 French(x))"
    },
    {
        "NL": "All phones are things.",
        "FOL": "\u2200x (Phone(x) \u2192 Thing(x))"
    },
    {
        "NL": "All cellphones are phones. ",
        "FOL": "\u2200x (Cellphone(x) \u2192 Phone(x))"
    },
    {
        "NL": "All iPhones are cellphones. ",
        "FOL": "\u2200x (Iphone(x) \u2192 Cellphone(x))"
    },
    {
        "NL": "All engineers are workers.",
        "FOL": "\u2200x (Engineer(x) \u2192 Worker(x))"
    },
    {
        "NL": "All workers are human. ",
        "FOL": "\u2200x (Worker(x) \u2192 Human(x))"
    },
    {
        "NL": "Jack is either an engineer or a worker.",
        "FOL": "Engineer(jack) \u2295 Worker(jack) "
    },
    {
        "NL": "Jack is is either a human or a phone.",
        "FOL": "Human(jack) \u2295 Phone(jack)"
    },
    {
        "NL": "All iPhones are electronic.",
        "FOL": "\u2200x (IPhone(x) \u2192 Electronic(x))"
    },
    {
        "NL": "Some phones are iPhones.",
        "FOL": "\u2203x (Phone(x) \u2227 IPhone(x))"
    },
    {
        "NL": "Metropolitan Museum of Art is a museum in NYC.",
        "FOL": "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)"
    },
    {
        "NL": "Whitney Museum of American Art is a museum in NYC.",
        "FOL": "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)"
    },
    {
        "NL": "Museum of Modern Art (MoMA) is a museum if NYC. ",
        "FOL": "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)"
    },
    {
        "NL": "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
        "FOL": "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)"
    },
    {
        "NL": "Whitney Museum of American Art includes American art.",
        "FOL": "Include(whitneyMuseumofAmericanArt, americanArt)"
    },
    {
        "NL": "A person either likes eating cheese or is a francophile.",
        "FOL": "\u2200x (Spanish(x) \u2228 Francophile(x))"
    },
    {
        "NL": "No francophiles are people who like Spain as their favorite country.",
        "FOL": "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))"
    },
    {
        "NL": "A person likes Spain as their favorite country or likes eating cheese.",
        "FOL": "\u2200x (SpainFav(x) \u2228 Cheese(x))"
    },
    {
        "NL": "Benji is not a person who likes eating cheese and a person who studies Spanish.",
        "FOL": "\u00ac(Cheese(benji) \u2227 Spanish(benji))"
    },
    {
        "NL": "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.",
        "FOL": "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))"
    },
    {
        "NL": "Gasteren is village located in the province of Drenthe.",
        "FOL": "Village(gasteren) \u2227 Province(drenthe) \u2227 LocatedIn(gasteren, drenthe)"
    },
    {
        "NL": "Drenthe is a Dutch province. ",
        "FOL": "Province(drenthe) \u2227 Dutch(drenthe)"
    },
    {
        "NL": "No cities are villages.",
        "FOL": "\u2200x (City(x) \u2192 \u00acVillage(x))"
    },
    {
        "NL": "The population of a village in Drenthe was 155 people.",
        "FOL": "\u2203x (Population155(x) \u2227 Village(x) \u2227 LocatedIn(x, drenthe))"
    },
    {
        "NL": "The only types of mammals that lay eggs are platypuses and echidnas.",
        "FOL": "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))"
    },
    {
        "NL": "Platypuses are not hyrax.",
        "FOL": "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))"
    },
    {
        "NL": "Echidnas are not hyrax.",
        "FOL": "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))"
    },
    {
        "NL": "No mammals are invertebrates.",
        "FOL": "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))"
    },
    {
        "NL": "All animals are either vertebrates or invertebrates.",
        "FOL": "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))"
    },
    {
        "NL": "Mammals are animals.",
        "FOL": "\u2200x (Mammal(x) \u2192 Animal(x))"
    },
    {
        "NL": "Hyraxes are mammals.",
        "FOL": "\u2200x (Hyrax(x) \u2192 Mammal(x))"
    },
    {
        "NL": "Grebes lay eggs.",
        "FOL": "\u2200x (Grebes(x) \u2192 LayEgg(x))"
    },
    {
        "NL": "Grebes are not platypuses and also not echidnas.",
        "FOL": "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))"
    },
    {
        "NL": "Bobby Flynn is a singer-songwriter. ",
        "FOL": "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)"
    },
    {
        "NL": "Bobby Flynn finished 7th while competing on Australian Idol.",
        "FOL": "Finished7th(bobbyFlynn) \u2227 CompetedOnAustralianIdol(bobbyFlynn)"
    },
    {
        "NL": "Australian Idol competitors are Australian citizens.",
        "FOL": "\u2200x (CompetedOnAustralianIdol(x) \u2192 AustralianCitizen(x))"
    },
    {
        "NL": "The Omega Three band made a nationwide tour in 2007.",
        "FOL": "MadeNationWideTour2007(theOmegaThreeBand) "
    },
    {
        "NL": "Bobby Flynn is a member of The Omega Three band.",
        "FOL": "IsMember(bobbyFlynn, theOmegaThreeBand)"
    },
    {
        "NL": "Bobby Flynn was born in Queensland.",
        "FOL": "BornIn(bobbyFlynn, queensland)"
    },
    {
        "NL": "All proteins are organic compounds.",
        "FOL": "\u2200x (Protein(x) \u2192 OrganicCompound(x))"
    },
    {
        "NL": "All enzymes are organic compounds.",
        "FOL": "\u2200x (Enzyme(x) \u2192 OrganicCompound(x))"
    },
    {
        "NL": "One American screenwriter and producer is Maggie Friedman.",
        "FOL": "American(maggiefriedman) \u2227 Screenwriter(maggiefriedman) \u2227 Producer(maggiefriedman)"
    },
    {
        "NL": "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.",
        "FOL": "ShowRunnerOf(maggiefriedman, witchesofeastend) \u2227 ExecutiveProducerOf(maggiefriedman, witchesofeastend) \u2227 LifetimeTelevisionSeries(maggiefriedman)"
    },
    {
        "NL": "Witches of East End is a fantasy-drama series.",
        "FOL": "Fantasy-Drama(witchesofeastend) \u2227 Series(witchesofeastend)"
    },
    {
        "NL": "Maggie Friedman produced and developed Eastwick.",
        "FOL": "Produced(maggiefriedman, eastwick) \u2227 Developed(maggiefriedman, eastwick)"
    },
    {
        "NL": "Eastwick is a series by ABC.",
        "FOL": "Series(eastwick) \u2227 By(eastwick, abc)"
    },
    {
        "NL": "Evangelos Eleftheriou is a Greek electrical engineer.",
        "FOL": "Greek(evangeloseleftheriou) \u2227 ElectricalEngineer(evangeloseleftheriou)"
    },
    {
        "NL": "Evangelos Eleftheriou worked for IBM in Zurich.",
        "FOL": "WorkedFor(evangeloseleftheriou, ibm) \u2227 WorkedIn(evangeloseleftheriou, zurich)"
    },
    {
        "NL": "If a company has employees working for them somewhere, then they have an office there.",
        "FOL": "\u2200x \u2200x \u2200z (Company(x) \u2227 WorkedFor(y, x) \u2227 WorkedIn(y, z) \u2192 HasOfficeIn(x, z))"
    },
    {
        "NL": "IBM is a company.",
        "FOL": "Company(ibm)"
    },
    {
        "NL": "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.",
        "FOL": "\u2203x (Song(x) \u2227 By(x, boneym) \u2227 N1GermanSingle(x))"
    },
    {
        "NL": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.",
        "FOL": "Song(hooray) \u2227 HitEurope(hooray)"
    },
    {
        "NL": "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.",
        "FOL": "Song(hooray) \u2227 \u00acN1GermanSingle(hooray)"
    },
    {
        "NL": "A song that peaks below #1 on the german charts is also a song that is not the #1 single",
        "FOL": "\u2200x (PeaksBelowN1(x) \u2194 \u00acN1GermanSingle(x))"
    },
    {
        "NL": "Every chef can cook.",
        "FOL": "\u2200x (Chef(x) \u2192 Cook(x))"
    },
    {
        "NL": "Some people who aren\u2019t chefs can cook.",
        "FOL": "\u2203x (\u00acChef(x) \u2227 Cook(x))"
    },
    {
        "NL": "People who cook can make scrambled eggs and pasta.",
        "FOL": "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))"
    },
    {
        "NL": "If someone can make cookies and muffins, they are a baker.",
        "FOL": "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))"
    },
    {
        "NL": "Bakers who can also make scrambled eggs can make a good breakfast.",
        "FOL": "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))"
    },
    {
        "NL": "Luke can make cookies, scrambled eggs, and muffins, but not pasta.",
        "FOL": "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)"
    },
    {
        "NL": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "FOL": "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))"
    },
    {
        "NL": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "FOL": "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))"
    },
    {
        "NL": "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "FOL": "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))"
    },
    {
        "NL": "ETS also develops K-12 statewide assessments used for accountability testing in many states.",
        "FOL": "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))"
    },
    {
        "NL": "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.",
        "FOL": "\u2200x (Gelato(x) \u2192 Italy(x))"
    },
    {
        "NL": "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.",
        "FOL": "\u2200x (\u00acResist(x))"
    },
    {
        "NL": "People either enjoy eating gelato ice cream or love to travel and vacation often.",
        "FOL": "\u2200x (Gelato(x) \u2228 Travel(x))"
    },
    {
        "NL": "If people often take study abroad semesters to Europe, then they do not regret their college experiences.",
        "FOL": "\u2200x (Europe(x) \u2192 \u00acRegret(x))"
    },
    {
        "NL": "If people love to travel and vacation often, then they often take study abroad semesters to Europe.",
        "FOL": "\u2200x (Travel(x) \u2192 Europe(x))"
    },
    {
        "NL": "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.",
        "FOL": "(Gelato(robert) \u2227 Travel(robert)) \u2228 (\u00acGelato(robert) \u2227 \u00acTravel(robert))"
    },
    {
        "NL": "To get a student visa, you must be full-time enrolled in an academic program.",
        "FOL": "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))"
    },
    {
        "NL": "Those who are full-time enrolled in an academic program can not work full-time.",
        "FOL": "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))"
    },
    {
        "NL": "Everyone who wants to study abroad needs to have a student visa.",
        "FOL": "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))"
    },
    {
        "NL": "All PhD graduates can work full time. ",
        "FOL": "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))"
    },
    {
        "NL": "If Tom does not want to study abroad, he is full-time enrolled in an educational program.",
        "FOL": "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)"
    },
    {
        "NL": "The installment sales method is the approach to recognize revenue under the US GAAP.",
        "FOL": "\u2200x (UsesGAAP(x) \u2192 UsesInstallmentMethod(x))"
    },
    {
        "NL": "In accrual accounting, revenues are recognized when they are realized.",
        "FOL": "\u2200x (UsesAccruralAccounting(x) \u2192 RecognizedWhen(revenues, realized))"
    },
    {
        "NL": "In cash accounting, revenues are recognized when cash is received.",
        "FOL": "\u2200x (UsesCashAccounting(x) \u2192 RecognizedWhen(revenues, cashrecieved))"
    },
    {
        "NL": "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.",
        "FOL": "DevelopedBy(usgaap, ussecuritiesandexchangecommission) \u2227 UsesGAAP(ussecuritiesandexchangecommission)"
    },
    {
        "NL": "Sally works for the US Securities and Exchange Commission.",
        "FOL": "WorksFor(sally, ussecuritiesandexchangecommission)"
    },
    {
        "NL": "All people who are respected by others are people who contribute to the country. ",
        "FOL": "\u2200x (Respected(x) \u2192 ContributeToCountry(x))"
    },
    {
        "NL": "If a person is respected by others, then he/she contributes to the country. ",
        "FOL": "\u2200x (Respected(x) \u2192 ContributeToCountry(x))"
    },
    {
        "NL": "All people available to have a visit without any fees are those respected by others. ",
        "FOL": "\u2200x (HaveVisitWithoutAnyFees(x) \u2192 Respected(x))"
    },
    {
        "NL": "All Customers who once served in the army are available to have a visit without any fees. ",
        "FOL": "\u2200x (Army(x) \u2192 HaveVisitWithoutAnyFees(x))"
    },
    {
        "NL": "All people who once were sentenced for thief stayed in prison for some time. ",
        "FOL": "\u2200x (Thief(x) \u2192 Prison(x))"
    },
    {
        "NL": "All people who once stayed in prison for some time have a bad record in the local state. ",
        "FOL": "\u2200x (Prison(x) \u2192 BadRecord(x))"
    },
    {
        "NL": "James was either once sentenced for thief or stayed in prison for some time. ",
        "FOL": "Thief(james) \u2295 Prison(james) "
    },
    {
        "NL": "James is either with a bad record in the local state or respected by others. ",
        "FOL": "BadRecord(james) \u2295 Respected(james)"
    },
    {
        "NL": "The Croton River watershed is the drainage basin of the Croton River.",
        "FOL": "DrainageBasinOf(crotonriverwatershed, crotonriver)"
    },
    {
        "NL": "The Croton River is in southwestern New York.",
        "FOL": "In(crotonriver, southwesternnewyork)"
    },
    {
        "NL": "Water from the Croton River watershed flows to the Bronx.",
        "FOL": "\u2203x (Water(x) \u2227 From(x, crotonriverwatershed) \u2227 FlowsTo(x, bronx))"
    },
    {
        "NL": "The Bronx is in New York.",
        "FOL": "In(bronx, newyork)"
    },
    {
        "NL": "All nuclear-powered submarines are warships.",
        "FOL": "\u2200x (NuclearPoweredSubmarine(x) \u2192 Warship(x))"
    },
    {
        "NL": "No nuclear-powered submarines are commercial vessels.",
        "FOL": "\u2200x (NuclearPoweredSubmarine(x) \u2192 \u00acCommercialVessel(x))"
    },
    {
        "NL": "If a album is written by a rock band, then the genre of the album is rock.",
        "FOL": "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))"
    },
    {
        "NL": "If a band writes a album winning an award, then this band wins this award.",
        "FOL": "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))"
    },
    {
        "NL": "Trouble at the Henhouse is an album by The Tragically Hip.",
        "FOL": "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)"
    },
    {
        "NL": "The Tragically Hip is a Canadian rock band.",
        "FOL": "RockBand(the_Tragically_Hip, canada)"
    },
    {
        "NL": "The song \"Butts Wigglin'\" is in Trouble at the Henhouse.",
        "FOL": "SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)"
    },
    {
        "NL": "Trouble at the Henhouse won the Album of the Year award.",
        "FOL": "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)"
    },
    {
        "NL": "A song in Trouble at the Henhouse appeared in a film.",
        "FOL": "\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))"
    },
    {
        "NL": "Daniel is a software engineer and he works at Palantir Technologies.",
        "FOL": "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)"
    },
    {
        "NL": "Daniel studied bioengineering during his undergraduate at Rice University.",
        "FOL": " StudiedBioengineering(daniel, riceUniversity)"
    },
    {
        "NL": "Daniel\u2019s older sister works at Meta as a technical sourcer. ",
        "FOL": " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)"
    },
    {
        "NL": "Daniel\u2019s dad and older sister both graduated from Stanford University.",
        "FOL": " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)"
    },
    {
        "NL": "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis",
        "FOL": " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)"
    },
    {
        "NL": "All commerical aircraft are produced by either Boeing or Airbus.",
        "FOL": "\u2200x (CommercialAircraft(x) \u2192 ProducedBy(x, boeing) \u2295 ProducedBy(x, airbus))"
    },
    {
        "NL": "All American Airlines jets are commerical aircraft. ",
        "FOL": "\u2200x (AmericanAirlinesAircraft(x) \u2192 CommercialAircraft(x))"
    },
    {
        "NL": "Airbus made more in revenue than Boeing last year.",
        "FOL": "MoreinRevenue(airbus, boeing)"
    },
    {
        "NL": "Luzon is an island in the Philippines.",
        "FOL": "Island(luzon) \u2227 In(luzon, philippines)"
    },
    {
        "NL": "In December 1999, an earthquake struck Luzon.",
        "FOL": "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon))"
    },
    {
        "NL": "People died in the December 1999 earthquake in Luzon.",
        "FOL": "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon) \u2227 Killed(x))"
    },
    {
        "NL": "People either invest in the public stock market regularly or enjoy gambling regularly.",
        "FOL": "\u2200x (Invests(x) \u2228 Gambling(x))"
    },
    {
        "NL": "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
        "FOL": "\u2200x (Invests(x) \u2192 Newspapers(x))"
    },
    {
        "NL": "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
        "FOL": "\u2200x (Gambling(x) \u2192 Casinos(x))"
    },
    {
        "NL": "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
        "FOL": "\u2200x (Casinos(x) \u2192 LasVegas(x))"
    },
    {
        "NL": "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
        "FOL": "\u2200x (Casinos(x) \u2192 DisposableIncome(x))"
    },
    {
        "NL": "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. ",
        "FOL": "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)"
    },
    {
        "NL": "All students learning piano can strike the right notes. ",
        "FOL": "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 StrikeRightNotes(x))"
    },
    {
        "NL": "All students who can strike the right note can get the rhythms right. ",
        "FOL": "\u2200x (Student(x) \u2227 StrikeRightNotes(x) \u2192 GetRhythmRight(x))"
    },
    {
        "NL": "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ",
        "FOL": "\u2200x (Student(x) \u2227 GetRhythmRight(x) \u2192 StartCoordination(x))"
    },
    {
        "NL": "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ",
        "FOL": "\u2200x (Student(x) \u2227 StartCoordination(x) \u2192 GoodAtCoordination(x) \u2295 FindCoordinationChallenging(x))"
    },
    {
        "NL": "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ",
        "FOL": "StrikeRightNotes(john) \u2227 GetRhythmRight(john) \u2227 GoodAtCoordination(john) \u2192 PutEmotion(john)"
    },
    {
        "NL": "John is a student learning piano. ",
        "FOL": "Student(john) \u2227 LearningPiano(john)"
    },
    {
        "NL": "John does not find coordination between the left and the right hands challenging. ",
        "FOL": "\u00acFindCoordinationChallenging(john)"
    },
    {
        "NL": "Barbara Ann Marshall is a former swimmer and former world record-holder.",
        "FOL": "FormerSwimmer(barbaraannmarshall) \u2227 FormerWorldRecordHolder(barbaraannmarshall)"
    },
    {
        "NL": "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "FOL": "ParticipatedIn(barbaraannmarshall, summer1972olympics)"
    },
    {
        "NL": "Barbara Ann Marshall's home country is the United States.",
        "FOL": "HomeCountry(barbaraannmarshall, unitedstates)"
    },
    {
        "NL": "All people who compete in the 1972 Summer Olympics represent their home country.",
        "FOL": "\u2200x \u2203y (ParticipatedIn(x, summer1972olympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))"
    },
    {
        "NL": "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "FOL": "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)"
    },
    {
        "NL": "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "FOL": "\u00acParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)"
    },
    {
        "NL": "A game is played with three stages: red stage, yellow stage, and green stage.",
        "FOL": "\u2203x (Player(x))"
    },
    {
        "NL": "Each player begins at the red stage.",
        "FOL": "\u2200x (Player(x) \u2192 StartRed(x))"
    },
    {
        "NL": "All players must reach the yellow stage before they can reach the green stage.",
        "FOL": "\u2200x (Player(x) \u2192 YellowToGreen(x))"
    },
    {
        "NL": "The yellow stage comes after the red stage.",
        "FOL": "\u2200x (Player(x) \u2192 RedToYellow(x))"
    },
    {
        "NL": "All players must proceed one stage at a time.",
        "FOL": "\u2200x (Player(x) \u2192 \u00acRedToGreen(x))"
    },
    {
        "NL": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "FOL": "\u2200x (Physical(x) \u2228 Words(x))"
    },
    {
        "NL": "If a person values physical touch as an especially important love language, then they are good with pets.",
        "FOL": "\u2200x (Physical(x) \u2192 GoodWithPets(x))"
    },
    {
        "NL": "No people that are good with pets are scared of animals.",
        "FOL": "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))"
    },
    {
        "NL": "People are either scared of animals or love animals.",
        "FOL": "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))"
    },
    {
        "NL": "Adam is either a person who values physical touch as an especially important love language or a person who loves animals.",
        "FOL": "Physical(adam) \u2295 LoveAnimals(adam)"
    },
    {
        "NL": "All birds have wings.",
        "FOL": "\u2200x (Bird(x) \u2192 Winged(x))"
    },
    {
        "NL": "No animal with wings is a reptile.",
        "FOL": "\u2200x (Winged(x) \u2192 \u00acReptile(x))"
    },
    {
        "NL": "Some animals that fly are birds.",
        "FOL": "\u2203x (Fly(x) \u2227 Bird(x))"
    },
    {
        "NL": "If something is an iguana, then it is a reptile.",
        "FOL": "\u2200x (Iguana(x) \u2192 Reptile(x))"
    },
    {
        "NL": "John is neither an iguana nor a bird.",
        "FOL": "\u00acIguana(john) \u2295 Bird(john)"
    },
    {
        "NL": "EndGame is a movie released in 2006.",
        "FOL": "Movie(endGame) \u2227 Released(endGame, year2006)"
    },
    {
        "NL": "EndGame was set in Washington.",
        "FOL": "Set(endGame, washington)"
    },
    {
        "NL": "EndGame was filmed outside of Washington.",
        "FOL": "FilmedOutside(endGame, washington)"
    },
    {
        "NL": "Some movies are filmed in New York.",
        "FOL": "\u2203x (FilmedIn(x, newYork))"
    },
    {
        "NL": "Andy Chang directed EndGame.",
        "FOL": "Directed(andyChang, endGame)"
    },
    {
        "NL": "Andy Chang is from Hong Kong.",
        "FOL": "From(andyChang, hongKong)"
    },
    {
        "NL": "Six, seven and eight are real numbers.",
        "FOL": "RealNum(six) \u2227 RealNum(seven) \u2227 RealNum(eight)"
    },
    {
        "NL": "If a real number equals another real number adding one, the first number is larger.",
        "FOL": "\u2200x \u2200y (RealNum(x) \u2227 RealNum(y) \u2227 EqualAddOne(x, y) \u2192 Larger(x, y))"
    },
    {
        "NL": "If the number x is larger than number y, then y is not larger than x.",
        "FOL": "\u2200x \u2200y (Larger(x, y) \u2194 \u00acLarger(y, x))"
    },
    {
        "NL": "Seven equals six plus one.",
        "FOL": "EqualAddOne(seven, six)"
    },
    {
        "NL": "Eight equals seven plus one.",
        "FOL": "EqualAddOne(eight, seven)"
    },
    {
        "NL": "Two is positive.",
        "FOL": "Positive(two)"
    },
    {
        "NL": "If a number is positive, then the double of it is also positive.",
        "FOL": "\u2200x \u2200y ((Positive(x) \u2227 EqualDouble(y, x)) \u2192 Positive(y))"
    },
    {
        "NL": "Eight is the double of four.",
        "FOL": "EqualDouble(eight, four)"
    },
    {
        "NL": "Four is the double of two.",
        "FOL": "EqualDouble(four, two)"
    },
    {
        "NL": "A dog never tells the truth.",
        "FOL": "\u2200x (Dog(x) \u2192 NeverTellsTruth(x))"
    },
    {
        "NL": "Some poker players are dogs.",
        "FOL": "\u2203x (PokerPlayer(x) \u2227 Dog(x))"
    },
    {
        "NL": "All Asians are human. ",
        "FOL": "\u2200x ( Asian(x)\u2192  Human(x))"
    },
    {
        "NL": "All Chinese are Asian.",
        "FOL": "\u2200x ( Chinese(x)\u2192  Asian(x))"
    },
    {
        "NL": "A man is either Chinese or British.",
        "FOL": "\u2200x ( Chinese(x) \u2228  British(x))"
    },
    {
        "NL": "All British are European. ",
        "FOL": "\u2200x ( British(x)\u2192  European(x))"
    },
    {
        "NL": "All Spanish are European. ",
        "FOL": "\u2200x ( Spanish(x)\u2192  European(x))"
    },
    {
        "NL": "No Indian is European. ",
        "FOL": "\u2200x ( Indian(x)\u2192 \u00ac European(x))"
    },
    {
        "NL": "Jessee is either both an Indian and a human, or neither an Indian nor a human.",
        "FOL": "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))"
    },
    {
        "NL": "No people who never admit a mistake are good teachers.",
        "FOL": "\u2200x (NeverAdmitMistakes(x) \u2192 \u00acGoodTeacher(x))"
    },
    {
        "NL": "Some well-informed people are people who never admit a mistake.",
        "FOL": "\u2203x (WellInformed(x) \u2227 NeverAdmitMistakes(x))"
    },
    {
        "NL": "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
        "FOL": "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))"
    },
    {
        "NL": "Mort is not a Stamp catalogue.",
        "FOL": "\u00acStamp(mort)"
    },
    {
        "NL": "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "FOL": "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))"
    },
    {
        "NL": "Mort is a piece of Philatelic literature.",
        "FOL": "PhilatelicLit(mort)"
    },
    {
        "NL": "Adventures of Rusty is a drama film and children's film.",
        "FOL": "DramaFilm(adventuresofrusty) \u2227 ChildrensFilm(adventuresofrusty)"
    },
    {
        "NL": "Columbia Pictures produced Adventures of Rusty",
        "FOL": "Produced(columbiapictures, adventuresofrusty)"
    },
    {
        "NL": "Tintin was produced by Paramount.",
        "FOL": "Produced(paramount, tintin)"
    },
    {
        "NL": "Tintin is an adventure film.",
        "FOL": "AdventureFilm(tintin)"
    },
    {
        "NL": "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ",
        "FOL": "ParamountLeaderOf(dengxiaoping, prc)"
    },
    {
        "NL": "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.",
        "FOL": "PraisedFor(dengxiaoping, reaffirmationofreformprogram) \u2227 PraisedFor(dengxiaoping, reversionofhongkong) \u2227 PraisedFor(dengxiaoping, returnofmacau)"
    },
    {
        "NL": "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.",
        "FOL": "PartysSecretaryGeneral(dengxiaoping) \u2227 Under(dengxiaoping, mao) \u2227 VicePremier(dengxiaoping) \u2227 PresidedOver(dengxiaoping, antirightistcampaign) \u2227 LaunchedBy(antirightistcampaign, mao)"
    },
    {
        "NL": "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960).",
        "FOL": "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) \u2227 Following(chinaseconomicreconstruction, greatleapforward) \u2227 Disastrous(greatleapforward)"
    },
    {
        "NL": "Mao Zedong died in 1976.",
        "FOL": "DiedIn(mao, y1976)"
    },
    {
        "NL": "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.",
        "FOL": "GraduallyRoseTo(dengxiaoping, supremepower)"
    },
    {
        "NL": "All imaginative processes are produced in human brains.",
        "FOL": "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))"
    },
    {
        "NL": "All science-fiction is from an imaginative process.",
        "FOL": " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) "
    },
    {
        "NL": "Either science-fiction or fact. ",
        "FOL": " \u2200x (Science-fiction(x) \u2228 Fact(x))"
    },
    {
        "NL": "No facts are proven to be false.",
        "FOL": " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) "
    },
    {
        "NL": "Dune is a science-fiction or proven to be false.",
        "FOL": " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)"
    },
    {
        "NL": "An American superhero comes from either DC universe or Marvel universe.",
        "FOL": "\u2200x (Superhero(x) \u2227 American(x) \u2192 (ComeFrom(x, dc universe) \u2295 ComeFrom(x, marvel universe))) "
    },
    {
        "NL": "Captain America is a superhero.",
        "FOL": " Superhero(captain america) "
    },
    {
        "NL": "Captain America is an American.",
        "FOL": " American(captain america) "
    },
    {
        "NL": "Captain America does not come from DC universe.",
        "FOL": " \u00acComeFrom(captain america, dc universe) "
    },
    {
        "NL": "If a superhero is American, he speaks English.",
        "FOL": " \u2200x (Superhero(x) \u2227 American(x) \u2192 Speak(x, english)) "
    },
    {
        "NL": "A superhero speaks English or Spanish.",
        "FOL": " \u2200x (Superhero(x) \u2192 (Speak(x, english) \u2228 Speak(x, spanish)))"
    },
    {
        "NL": "Robert Zimmer was born in Germany.",
        "FOL": "BornInGermany(robertZimmer)"
    },
    {
        "NL": "Robert Zimmer is an essayist.",
        "FOL": "IsEssayist(robertZimmer)"
    },
    {
        "NL": "Robert Zimmer was born in 1953.",
        "FOL": "BornIn(robertZimmer, year1953)"
    },
    {
        "NL": "Every essayist is a writer.",
        "FOL": "\u2200x (IsEssayist(x) \u2192 IsWriter(x))"
    },
    {
        "NL": "Every person born in Germany is German.",
        "FOL": "\u2200x (BornInGermany(x) \u2192 IsGerman(x))"
    },
    {
        "NL": "All people who repay their loans on time have a high credit score.",
        "FOL": "\u2200x (Repay(x) \u2192 HighCreditScore(x))"
    },
    {
        "NL": "Some people with high credit scores and high salaries are approved for mortgages.",
        "FOL": "\u2203x ((HighCreditScore(x) \u2227 HighSalary(x)) \u2192 Mortgage(x))"
    },
    {
        "NL": "John has a high salary.",
        "FOL": "HighSalary(john)"
    },
    {
        "NL": "All students are members of the university.",
        "FOL": "\u2200x (Student(x) \u2192 MemberOfUniversity(x))"
    },
    {
        "NL": "All graduate students are students.",
        "FOL": "\u2200x (GraduateStudent(x) \u2192 Student(x))"
    },
    {
        "NL": "All PhD students are graduate students.",
        "FOL": "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))"
    },
    {
        "NL": "Some PhD students have high IQs.",
        "FOL": "\u2203x (PhDStudent(x) \u2227 HighIQ(x))"
    },
    {
        "NL": "If John is not a PhD student, then he is not a member of the university.",
        "FOL": "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)"
    },
    {
        "NL": "If John has a high IQ, then he is a PhD student or a graduate student.",
        "FOL": "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)"
    },
    {
        "NL": "Belgium, France and Germany are European countries.",
        "FOL": "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)"
    },
    {
        "NL": "Paris is the capital of France.",
        "FOL": "CapitalOf(paris, france)"
    },
    {
        "NL": "The Eiffel Tower is one of the main tourist attractions located in Paris.",
        "FOL": "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)"
    },
    {
        "NL": "Some people who live in Belgium speak French.",
        "FOL": "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))"
    },
    {
        "NL": "If John goes to Europe, he will see some tourist attractions.",
        "FOL": "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))"
    },
    {
        "NL": "John speaks French.",
        "FOL": "Speak(john, french)"
    },
    {
        "NL": "All sports cars are loud.",
        "FOL": "\u2200x (SportsCar(x) \u2192 LoudCar(x))"
    },
    {
        "NL": "No loud cars are electric.",
        "FOL": "\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))"
    },
    {
        "NL": "If a car is a Ferrari, then it is a sports car.",
        "FOL": "\u2200x (Ferrari(x) \u2192 SportsCar(x))"
    },
    {
        "NL": "All cars made in Maranello are Ferrari",
        "FOL": "\u2200x (MadeInMaranello(x) \u2192 Ferrari(x))"
    },
    {
        "NL": "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.",
        "FOL": "\u2200x (\u00acSportsCar(prius) \u2228 \u00acLoudCar(prius) \u2192 MadeInMaranello(prius) \u2228 LoudCar(prius))"
    },
    {
        "NL": "If something is a plant, then it is not a cute animal.",
        "FOL": "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))"
    },
    {
        "NL": "All flowers are plants.",
        "FOL": "\u2200x (Flower(x) \u2192 Plant(x))"
    },
    {
        "NL": "Every kitten is a cute animal.",
        "FOL": "\u2200x (Kitten(x) \u2192 CuteAnimal(x))"
    },
    {
        "NL": "If something is grown in a garden, then it is a flower.",
        "FOL": "\u2200x (GrownInGarden(x) \u2192 Flower(x))"
    },
    {
        "NL": "Piper is a kitten or a cute animal.",
        "FOL": "Kitten(piper) \u2228 CuteAnimal(piper)"
    },
    {
        "NL": "Guam has participated in the Winter Olympics.",
        "FOL": "ParticipatedIn(guam, winterolympics)"
    },
    {
        "NL": "In 1988, the Winter Olympics were held in Calgary.",
        "FOL": "Year(y1988) \u2192 BeHeld(winterolympics, calgary)"
    },
    {
        "NL": "Guam sent an athlete to the Calgary Winter Olympics.",
        "FOL": "BeHeld(winterolympics, calgary) \u2192 SendAthletes(guam)"
    },
    {
        "NL": "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.",
        "FOL": "SendAthletes(guam) \u2192 ParticipatedIn(guam, winterolympics)"
    },
    {
        "NL": "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.",
        "FOL": "BeFrom(bankert, guam) \u2227 ParticipatedIn(bankert, winterolympics)"
    },
    {
        "NL": "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "FOL": "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)"
    },
    {
        "NL": "One of the word-setters of My Word! was Michael O'Donnell.",
        "FOL": "WordSetter(michael)"
    },
    {
        "NL": "The magazine World Medicine was edited by Michael O'Donnell.",
        "FOL": "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)"
    },
    {
        "NL": "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.",
        "FOL": "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))"
    },
    {
        "NL": "No homework is fun.",
        "FOL": "\u2200x (Homework(x) \u2192 \u00acIsFun(x))"
    },
    {
        "NL": "Some reading is homework.",
        "FOL": "\u2203x (IsReading(x) \u2227 Homework(x))"
    },
    {
        "NL": "If violence is good, it is justified.",
        "FOL": "\u2200x ((Violence(x) \u2227 Good(x)) \u2192 Justified(x))"
    },
    {
        "NL": "If something is justified, it is lawful.",
        "FOL": "\u2200x (Justified(x) \u2192 Lawful(x))"
    },
    {
        "NL": "All people who have a horse ranch regularly ride horses for pleasure and sport.",
        "FOL": "\u2200x (Ranch(x) \u2192 RegularlyRide(x))"
    },
    {
        "NL": "All people who have a lot of disposable income have a horse ranch.",
        "FOL": "\u2200x (DisposableIncome(x) \u2192 Ranch(x))"
    },
    {
        "NL": "If people compete in horse dressage shows, then they have a lot of disposable income.",
        "FOL": "\u2200x (Compete(x) \u2192 DisposableIncome(x))"
    },
    {
        "NL": "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.",
        "FOL": "\u2200x (Compete(x) \u2192 Invested(x))"
    },
    {
        "NL": "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.",
        "FOL": "\u2200x (RegularlyRide(x) \u2192 \u00acCramped(x))"
    },
    {
        "NL": "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.",
        "FOL": "(Ranch(manny) \u2227 Cramped(manny)) \u2295 (\u00acRanch(manny) \u2227 \u00acCramped(manny))"
    },
    {
        "NL": "A roundel is a rounded artillery fortification.",
        "FOL": "\u2200x (Roundel(x) \u2192 Rounded(x) \u2227 ArtilleryFortification(x))"
    },
    {
        "NL": "A roundel is not higher than adjacent walls. ",
        "FOL": "\u2200x \u2200y (Roundel(x) \u2227 AdjacentWall(y) \u2192 \u00acHigher(x, y))"
    },
    {
        "NL": "Cannons can be deployed on artillery fortifications. ",
        "FOL": "\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))"
    },
    {
        "NL": "Roundels are the oldest artillery fortifications.",
        "FOL": "\u2200x \u2200y (Roundel(x) \u2227 ArtilleryFortification(x) \u2227 ArtilleryFortification(y) \u2192 Older(x, y))"
    },
    {
        "NL": "Battery towers are an artillery fortification.",
        "FOL": "\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))"
    },
    {
        "NL": "All tissues are soft.",
        "FOL": "\u2200x (Tissue(x) \u2192 Soft(x))"
    },
    {
        "NL": "Some papers are tissues.",
        "FOL": "\u2203x (Paper(x) \u2227 Tissue(x))"
    },
    {
        "NL": "All volunteers receive intangible benefits for their work.",
        "FOL": "\u2200x (Volunteer(x) \u2192 GetIntangibleBenefits(x))"
    },
    {
        "NL": "Volunteers work regularly or on an as-needed basis.",
        "FOL": "\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2228 WorkAsNeeded(x))"
    },
    {
        "NL": "Some volunteers are trained.",
        "FOL": "\u2203x (Volunteer(x) \u2192 Trained(x))"
    },
    {
        "NL": "Volunteers work in groups or individually.",
        "FOL": "\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))"
    },
    {
        "NL": "Environmental volunteers contribute toward environmental management or conservation.",
        "FOL": "\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalmanagement) \u2228 ContributeTo(x, environmentalconservation)))"
    },
    {
        "NL": "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.",
        "FOL": "\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturaldisasterresponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))"
    },
    {
        "NL": "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.",
        "FOL": "\u2200x (Consistent(x) \u2192 NoSurprises(x))"
    },
    {
        "NL": "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.",
        "FOL": "\u2200x (Flannel(x) \u2192 Consistent(x))"
    },
    {
        "NL": "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.",
        "FOL": "\u2200x (NoShopping(x) \u2192 Flannel(x))"
    },
    {
        "NL": "All old people living in stable homes do not like surprises.",
        "FOL": "\u2200x (Old(x) \u2192 NoSurprises(x))"
    },
    {
        "NL": "If people have very high energy and are impulsive, then they like surprises.",
        "FOL": "\u2200x (Impulsive(x) \u2192 \u00acNoSurprises(x))"
    },
    {
        "NL": "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.",
        "FOL": "\u00ac(NoSurprises(mike) \u2227 Impulsive(mike)) \u2192 Consistent(mike) \u2295 NoSurprises(mike)"
    },
    {
        "NL": "Adam owns cars.",
        "FOL": "\u2203x (Owns(adam, x))"
    },
    {
        "NL": "Adam has a favorite car.",
        "FOL": "\u2203x (Favorite(adam, x))"
    },
    {
        "NL": "Among the cars he owns, Adam's favorite car is European.",
        "FOL": "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))"
    },
    {
        "NL": "Adam broke his favorite car.",
        "FOL": "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))"
    },
    {
        "NL": "No buildings in New Haven are higher than 400 meters. ",
        "FOL": "\u2200x (NewHaven(x) \u2192 \u00acHigh(x))"
    },
    {
        "NL": "All buildings managed by Yale Housing are in New Haven. ",
        "FOL": "\u2200x (YaleHousing(x) \u2192 NewHaven(x))"
    },
    {
        "NL": "All buildings in Manhattan are higher than 400 meters. ",
        "FOL": "\u2200x (Manhattan(x) \u2192 High(x))"
    },
    {
        "NL": "All buildings owned by Bloomberg are in Manhattan. ",
        "FOL": "\u2200x (Bloomberg(x) \u2192 Manhattan(x))"
    },
    {
        "NL": "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
        "FOL": "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))"
    },
    {
        "NL": "Tower A is neither in New Haven nor in Manhattan.",
        "FOL": "\u00ac(NewHaven(towera) \u2295 Manhattan(towera))"
    },
    {
        "NL": "Tower B is a building with the Bloomberg logo and in Manhattan. ",
        "FOL": "BloombergLogo(towerb) \u2227 Manhattan(towerb)"
    },
    {
        "NL": "No fish are birds.",
        "FOL": "\u2200x (Fish(x) \u2192 \u00acBird(x))"
    },
    {
        "NL": "Everything that is an osprey is a bird.",
        "FOL": "\u2200x (Osprey(x) \u2192 Bird(x))"
    },
    {
        "NL": "If something is a carp, then it is a fish.",
        "FOL": "\u2200x (Carp(x) \u2192 Fish(x))"
    },
    {
        "NL": "All goldfish are carp.",
        "FOL": "\u2200x (Goldfish(x) \u2192 Carp(x))"
    },
    {
        "NL": "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.",
        "FOL": "Osprey(bubbles) \u2295 Carp(bubbles) \u2192 \u00acFish(bubbles)"
    },
    {
        "NL": "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.",
        "FOL": "\u2200x (WantToGo(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 (NeverGo(x)))"
    },
    {
        "NL": "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
        "FOL": "\u2200x (((SanFrancisco(x) \u2228 LosAngeles(x) \u2228 SanDiego(x)) \u2227 California(x)) \u2192 WantToGo(x))"
    },
    {
        "NL": "Mr. Smith has been to two cities in California.",
        "FOL": "CaliforniaCityVisited(mr.smith, two)"
    },
    {
        "NL": "Mrs. Smith has been to one city in Florida.",
        "FOL": "FloridaCityVisited(mrs.smith, one)"
    },
    {
        "NL": "Everything is either big or small.",
        "FOL": "\u2200x (Big(x) \u2295 Small(x))"
    },
    {
        "NL": "All big things are heavy. ",
        "FOL": "\u2200x (Big(x) \u2192 Heavy(x))"
    },
    {
        "NL": "All small things are light. ",
        "FOL": "\u2200x (Small(x) \u2192 Light(x))"
    },
    {
        "NL": "All heavy things are still.",
        "FOL": "\u2200x (Heavy(x) \u2192 Still(x))"
    },
    {
        "NL": "All light things are unstable.",
        "FOL": "\u2200x (Light(x) \u2192 Unstable(x))"
    },
    {
        "NL": "All unstable things are changing.",
        "FOL": "\u2200x (Unstable(x) \u2192 Changing(x))"
    },
    {
        "NL": "All unstable things are kinetic. ",
        "FOL": "\u2200x (Unstable(x) \u2192 Kinetic(x))"
    },
    {
        "NL": "A bird is not both heavy and still.",
        "FOL": "\u00ac(Heavy(bird) \u2227 Still(bird))"
    },
    {
        "NL": "DI Ray is a police procedural television series.",
        "FOL": "TelevisionSeries(diRay)"
    },
    {
        "NL": "DI Ray was created and written by Maya Sondhi.",
        "FOL": "Create(maya, diRay) \u2227 Write(maya, diRay)"
    },
    {
        "NL": "DI Ray was produced by Jed Mercurio.",
        "FOL": "Produce(jed, diRay)"
    },
    {
        "NL": "Maya Sondhi and Jed Mercurio are both British.",
        "FOL": "British(maya) \u2227 British(jed) "
    },
    {
        "NL": "All men are human.",
        "FOL": "\u2200x (Man(x) \u2192 Human(x))"
    },
    {
        "NL": "All gentlemen are men.",
        "FOL": "\u2200x (Gentleman(x) \u2192 Man(x))"
    },
    {
        "NL": "All lawyers are gentlemen.",
        "FOL": "\u2200x (Lawyer(x) \u2192 Gentleman(x))"
    },
    {
        "NL": "All women are human.",
        "FOL": "\u2200x (Woman(x) \u2192 Human(x))"
    },
    {
        "NL": "No sheep are human.",
        "FOL": "\u2200x (Sheep(x) \u2192 \u00acHuman(x))"
    },
    {
        "NL": "If Mike is not both a human and a sheep, then Mike is either a man or a human.",
        "FOL": "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)"
    },
    {
        "NL": "Some defenders are centerback.",
        "FOL": "\u2203x (Defender(x) \u2227 Centerback(x))"
    },
    {
        "NL": "Stephen Curry is an NBA player.",
        "FOL": "NBAPlayer(stephencurry)"
    },
    {
        "NL": "If a person doesn't have enough money to buy a product, then that person can't buy it.",
        "FOL": "\u2200x \u2200y (Person(x) \u2227 Product(y) \u2227 \u00acHaveEnoughMoneyFor(x, y) \u2192 \u00acBuy(x, y))"
    },
    {
        "NL": "Monitors are products.",
        "FOL": "\u2200x (Monitor(x) \u2192 Product(x))"
    },
    {
        "NL": "4k monitors are more expensive than 1080 monitors and 2k monitors.",
        "FOL": "\u2200x \u2200y \u2200z (Monitor(x) \u2227 Monitor(y) \u2227 Monitor(z) \u2227 FourK(x) \u2227 OneOEightO(y) \u2227 TwoK(z) \u2192 MoreExpensive(x, y) \u2227 MoreExpensive(x, z))"
    },
    {
        "NL": "John is a person.",
        "FOL": "Person(john)"
    },
    {
        "NL": "John doesn't have enough money to buy a 2k monitor.",
        "FOL": "\u2200x (Monitor(x) \u2227 TwoK(x) \u2192 \u00acHaveEnoughMoneyFor(john, x))"
    },
    {
        "NL": "All artificial satellites are important scientific achievements.",
        "FOL": "\u2200x (ArtificialSatellite(x) \u2192 ImportantScientificAchievement(x))"
    },
    {
        "NL": "Some artificial satellites are not U.S. inventions.",
        "FOL": "\u2203x (ArtificialSatellite(x) \u2227 \u00acUSInvention(x))"
    },
    {
        "NL": "Some cats are not pets.",
        "FOL": "\u2203x (Cat(x) \u2227 \u00acPet(x))"
    },
    {
        "NL": "All cats are mammals.",
        "FOL": "\u2200x (Cat(x) \u2192 Mammal(x))"
    },
    {
        "NL": "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.",
        "FOL": "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))"
    },
    {
        "NL": "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "FOL": "\u2200x (CoffeeShop(x) \u2228 Takeout(x))"
    },
    {
        "NL": "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.",
        "FOL": "\u2200x (MakeFood(x) \u2192 Takeout(x))"
    },
    {
        "NL": "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.",
        "FOL": "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))"
    },
    {
        "NL": "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "FOL": "\u2200x (Busy(x) \u2192 MakeFood(x))"
    },
    {
        "NL": "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours",
        "FOL": "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))"
    },
    {
        "NL": "No professional basketball players are soccer players.",
        "FOL": "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))"
    },
    {
        "NL": "All centerbacks are defenders.",
        "FOL": "\u2200x (Centerback(x) \u2192 Defender(x))"
    },
    {
        "NL": "Roger Federer is not an NBA player or a defender.",
        "FOL": "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))"
    },
    {
        "NL": "Some teachers working at a pool are not nice.",
        "FOL": "\u2203x (TeacherWorkingAtPool(x) \u2227 \u00acNice(x))"
    },
    {
        "NL": "All teachers working at pools are pool managers.",
        "FOL": "\u2200x (TeacherWorkingAtPool(x) \u2192 PoolManager(x))"
    },
    {
        "NL": "All pool managers are lifeguards.",
        "FOL": "\u2200x (PoolManager(x) \u2192 Lifeguard(x))"
    },
    {
        "NL": "If someone is a lifeguard, then they work at a pool.",
        "FOL": "\u2200x (Lifeguard(x) \u2192 WorkAtPool(x))"
    },
    {
        "NL": "Not all art pieces require talent.",
        "FOL": "\u2203x (ArtPiece(x) \u2227 \u00acRequiresTalent(x))"
    },
    {
        "NL": "Everything that requires talent requires practice.",
        "FOL": "\u2200x (RequiresTalent(x) \u2192 RequiresPractice(x))"
    },
    {
        "NL": "Bernarda Bryson Shahn was a painter and lithographer.",
        "FOL": "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) "
    },
    {
        "NL": "Bernarda Bryson Shahn was born in Athens, Ohio. ",
        "FOL": "BornIn(bernardaBrysonShahn, athensOhio)"
    },
    {
        "NL": "Bernarda Bryson Shahn was married to Ben Shahn.",
        "FOL": "MarriedTo(bernardaBrysonShahn, benShahn)"
    },
    {
        "NL": "People born in Athens, Ohio are Americans.",
        "FOL": "\u2200x (BornIn(x, athensOhio) \u2192 American(x))"
    },
    {
        "NL": "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.",
        "FOL": "\u2200x (Iphone(x) \u2192 \u00acHouse(x))"
    },
    {
        "NL": "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.",
        "FOL": "\u2200x (Tech(x) \u2192 Iphone(x))"
    },
    {
        "NL": "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "FOL": "\u2200x (House(x) \u2228 Apartment(x))"
    },
    {
        "NL": "If people live with at least one roommate then they do not own at least one pet.",
        "FOL": "\u2200x (Roommate(x) \u2192 \u00acPet(x))"
    },
    {
        "NL": "All people who own at least one pet live with at least one roommate.",
        "FOL": "\u2200x (Apartment(x) \u2192 Roommate(x))"
    },
    {
        "NL": "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ",
        "FOL": "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))"
    },
    {
        "NL": "If you are on the payroll, then you are being paid by the school.",
        "FOL": "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))"
    },
    {
        "NL": "If someone has a job at a school, then they are on the payroll.",
        "FOL": "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))"
    },
    {
        "NL": "All faculty members have a job at a school.",
        "FOL": "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))"
    },
    {
        "NL": "One can either be a faculty member or a teacher.",
        "FOL": "\u2200x (FacultyMember(x) \u2228 Teacher(x))"
    },
    {
        "NL": "Every teacher has students.",
        "FOL": "\u2200x (Teacher(x) \u2192 HasStudents(x))"
    },
    {
        "NL": "If Nancy is a teacher, then they are on the payroll.",
        "FOL": "Teacher(nancy) \u2192 OnPayroll(nancy)"
    },
    {
        "NL": "If Nancy is not a teacher, then they are not paid by the school.",
        "FOL": "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)"
    },
    {
        "NL": "Kangaroo is an animal.",
        "FOL": "\u2200x (Kangaroo(x) \u2192 Animal(x))"
    },
    {
        "NL": "No Kangaroos live in Germany.",
        "FOL": "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))"
    },
    {
        "NL": "If Jane saves enough money for the summer, she will fly to Germany.",
        "FOL": "EnoughMoney(jane) \u2192 FlyTo(jane, germany)"
    },
    {
        "NL": "If Jane flies to Germany, she will go to the Berlin Zoo.",
        "FOL": "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) "
    },
    {
        "NL": "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany.",
        "FOL": "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))"
    },
    {
        "NL": "If a class has prerequisites the student must take the prerequisites to take the class.",
        "FOL": "\u2200x \u2200y ((Prereq(x, y) \u2227 Taken(x)) \u2194 CanTake(y))"
    },
    {
        "NL": "If a class has no prerequisites, then the student can take the class",
        "FOL": "\u2200x \u2200y (\u00acPrereq(x, y) \u2192 CanTake(y))"
    },
    {
        "NL": "CPSC 201 and CPSC 223 are prerequisites for CPSC 323.",
        "FOL": "Prereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)"
    },
    {
        "NL": "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.",
        "FOL": "(Prereq(intromicro, intermediatemicro) \u2227 Taken(intromicro)) \u2192 CanTake(intermediatemicro)"
    },
    {
        "NL": "Intro Geology has no prerequisites.",
        "FOL": "\u2200x (\u00acPrereq(x, introgeology))"
    },
    {
        "NL": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.",
        "FOL": "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))"
    },
    {
        "NL": "The Harry Potter series consists of 7 distinct works.",
        "FOL": "SevenDistinctWorks(harryPotter)"
    },
    {
        "NL": "The Chronicles of Narnia consists of 7 distinct works.",
        "FOL": "SevenDistinctWorks(chroniclesofNarnia)"
    },
    {
        "NL": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.",
        "FOL": "\u2200x (RenaissanceFair(x) \u2192 DressingUp(x))"
    },
    {
        "NL": "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.",
        "FOL": "\u2200x (HistoryRenaissance(x) \u2192 RenaissanceFair(x))"
    },
    {
        "NL": "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.",
        "FOL": "\u2200x (HistoryRenaissance(x) \u2228 NotAcademics(x))"
    },
    {
        "NL": "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.",
        "FOL": "\u2200x (Industry(x) \u2192 NotAcademics(x))"
    },
    {
        "NL": "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.",
        "FOL": "\u2200x (HistoryProf(x) \u2192 \u00acNotAcademics(x))"
    },
    {
        "NL": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.",
        "FOL": "\u00acIndustry(clyde) \u2192 \u00ac(Industry(clyde) \u2228 DressingUp(clyde))"
    },
    {
        "NL": "No sports cars are vehicles intended to be driven at moderate speeds.",
        "FOL": "\u2200x (SportsCar(x) \u2192 \u00acIntendedToBeDrivenAtModerateSpeeds(x))"
    },
    {
        "NL": "All automobiles designed for family use are vehicles intended to be driven at moderate speeds.",
        "FOL": "\u2200x (ForFamilyUse(x) \u2192 IntendedToBeDrivenAtModerateSpeeds(x))"
    },
    {
        "NL": "If people work well in teams in their workplace, then they get along with all their colleagues at their work.",
        "FOL": "\u2200x (WorkTeams(x) \u2192 Colleagues(x))"
    },
    {
        "NL": "If people come to work every day with a positive attitude, then they work well in teams in their workplace.",
        "FOL": "\u2200x (PositiveAttitude(x) \u2192 WorkTeams(x))"
    },
    {
        "NL": "If people get many promotions from their boss at work, then they receive negative feedback from teams at work.",
        "FOL": "\u2200x (BossPromotions(x) \u2192 \u00acNegativeFeedback(x))"
    },
    {
        "NL": "Drishti is open-source.",
        "FOL": "OpenSource(drishti)"
    },
    {
        "NL": "Open-source software is free to modify.",
        "FOL": "\u2200x (OpenSource(x) \u2192 ModifyFree(x))"
    },
    {
        "NL": "There are five grades including A+, A, B+, B, and C in English.",
        "FOL": "Grade(a+) \u2228 Grade(a) \u2228 Grade(b+) \u2228 Grade(b) \u2228 Grade(c)"
    },
    {
        "NL": "If a student gets A+ in English, then his score is greater than 95.",
        "FOL": "\u2200x (GetGrade(x, a+) \u2192 GreaterThan95(x))"
    },
    {
        "NL": "If a student gets A in English, then his score is in the range of 90-95.",
        "FOL": "\u2200x (GetGrade(x, a) \u2192 Range90to95(x))"
    },
    {
        "NL": "Zhang got an A in English.",
        "FOL": "GetGrade(zhang, a)"
    },
    {
        "NL": "Wang's English score is better than Zhang's.",
        "FOL": "Better(wang, zhang)"
    },
    {
        "NL": "Wu's English score is lower than 90.",
        "FOL": "LowerThan90(wu)"
    },
    {
        "NL": "Olivia doesn't prefer warm temperature during the day.",
        "FOL": "\u2200x (Day(x) \u2192 \u00acPrefersWarmAt(olivia, x))"
    },
    {
        "NL": "When Olivia sleeps, she prefers cool temperature.",
        "FOL": "\u2200x (SleepingDuring(olivia, x) \u2192 PrefersCoolAt(olivia, x))"
    },
    {
        "NL": "Olivia sleeps during the night.",
        "FOL": "\u2200x (SleepingDuring(olivia, x) \u2192 Night(x))"
    },
    {
        "NL": "Olivia works during the day.",
        "FOL": "\u2200x (WorkingDuring(olivia, x) \u2192 Day(x))"
    },
    {
        "NL": "Olivia either works or sleeps.",
        "FOL": "\u2200x (WorkingDuring(olivia, x) \u2228 SleepingDuring(olivia, x))"
    },
    {
        "NL": "The time is either the day or the night.",
        "FOL": "\u2200x (Day(x) \u2228 Night(x))"
    },
    {
        "NL": "Olivia either prefers warm temperature or prefers cool temperature.",
        "FOL": "\u2200x (PrefersWarmAt(olivia, x) \u2228 PrefersCoolAt(olivia, x))"
    },
    {
        "NL": "Taylor Swift gives a commencement speech in New York University in 2022.",
        "FOL": "Speech(taylorSwift, nyc)"
    },
    {
        "NL": "Both Columbia University and New York University are located in Manhattan.",
        "FOL": "Manhattan(columbiaUniversity) \u2227 Manhattan(nyc)"
    },
    {
        "NL": "Taylor Swift has received three Grammy Album of the Year Awards.",
        "FOL": "HaveAlbum(taylorSwift)"
    },
    {
        "NL": "Columbia University is one of the Ivy League schools.",
        "FOL": "IvyLeague(columbiaUniversity)"
    },
    {
        "NL": "Customers either choose Plan A or Plan B.",
        "FOL": "\u2200x (PlanA(x) \u2228 PlanB(x))"
    },
    {
        "NL": "All who choose Plan B are rewarded with a $30 gift card. ",
        "FOL": "\u2200x (PlanB(x) \u2192 Award(x))"
    },
    {
        "NL": "There are no customers who do not choose any plans. ",
        "FOL": "\u2200x (\u00acNoPlan(x))"
    },
    {
        "NL": "No customers rewarded a $30 gift card are older than 80.",
        "FOL": "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))"
    },
    {
        "NL": "Customers are either older than 80 or are currently studying at school. ",
        "FOL": "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))"
    },
    {
        "NL": "James is not a customer who is currently studying at school. ",
        "FOL": "\u00acStudyAtSchool(james)"
    },
    {
        "NL": "Detroit City is a horse.",
        "FOL": "Horse(detroitcity)"
    },
    {
        "NL": "Some horses are racehorses.",
        "FOL": "\u2203x (Horse(x) \u2227 Racehorse(x))"
    },
    {
        "NL": "If a horse falls during a race, then it dies.",
        "FOL": "\u2200x (Horse(x) \u2227 Racing(x) \u2227 Falls(x) \u2192 Dead(x))"
    },
    {
        "NL": "Detroit City fell during a race.",
        "FOL": "Racing(detroitcity) \u2227 Falls(detroitcity)"
    },
    {
        "NL": "A horse is a racehorse if it is in a race.",
        "FOL": "\u2200x (Horse(x) \u2227 Racing(x) \u2192 Racehorse(x))"
    },
    {
        "NL": "Frederick Monhoff was an architect, artist, and illustrator.",
        "FOL": "Architect(monhoff) \u2227 Artist(monhoff) \u2227 Illustrator(monhoff)"
    },
    {
        "NL": "Frederick Monhoff was an American.",
        "FOL": "American(monhoff)"
    },
    {
        "NL": "An artist is good at painting or music.",
        "FOL": "\u2200x (Artist(x) \u2192 GoodAt(x, painting) \u2228 GoodAt(x, music))"
    },
    {
        "NL": "All Americans speak English.",
        "FOL": "\u2200x (American(x) \u2192 Speak(x, english))"
    },
    {
        "NL": "Miroslav Fiedler was a Czech mathematician.",
        "FOL": "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)"
    },
    {
        "NL": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
        "FOL": "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)"
    },
    {
        "NL": "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
        "FOL": "HonoredBy(miroslavfiedler, fiedlerEigenvalue)"
    },
    {
        "NL": "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.",
        "FOL": "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)"
    },
    {
        "NL": "A laptop is a computer.",
        "FOL": "\u2200x (Laptop(x) \u2192 Computer(x))"
    },
    {
        "NL": "You can play games on a computer.",
        "FOL": "\u2200x (Computer(x) \u2192 CanPlayGames(x))"
    },
    {
        "NL": "A phone is not a computer.",
        "FOL": "\u2200x (Phone(x) \u2192 \u00acComputer(x))"
    },
    {
        "NL": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
        "FOL": "AmericanPolitician(walterbrown) \u2227 Lawyer(walterbrown) \u2227 ServedAs(walterbrown, postamastergeneral)"
    },
    {
        "NL": "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.",
        "FOL": "Graduated(walterbrown, harvard) \u2227 GraduatedWith(walterbrown, bachelorsofart)"
    },
    {
        "NL": "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.",
        "FOL": "In(walterbrown, toledo) \u2227 In(walterbrownfather, toledo) \u2227 PracticedLawTogether(walterbrownfather, walterbrown)"
    },
    {
        "NL": "Katherin Hafer married Walter Folger Brown.",
        "FOL": "Married(ketherinhafer, walterbrown)"
    },
    {
        "NL": "All products shipped from China are made in China. ",
        "FOL": "\u2200x (ShipChina(x) \u2192 MadeInChina(x))"
    },
    {
        "NL": "All products sold in JD are shipped from China. ",
        "FOL": "\u2200x (SoldJD(x) \u2192 ShipChina(x))"
    },
    {
        "NL": "All products commonly used in China are sold in JD.",
        "FOL": "\u2200x (CommonlyUsedChina(x) \u2192 SoldJD(x))"
    },
    {
        "NL": "All products favored by young people are commonly used in China. ",
        "FOL": "\u2200x (FavoredByYoungPeople(x) \u2192 CommonlyUsedChina(x))"
    },
    {
        "NL": "MacBook is not made in China and is not commonly used in China.",
        "FOL": "\u00ac(MadeInChina(macbook) \u2227 CommonlyUsedChina(macbook))"
    },
    {
        "NL": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.",
        "FOL": "OxfordStreet(oxfordCircus) \u2227 RegentStreet(oxfordCircus)"
    },
    {
        "NL": "Oxford Street is in London.",
        "FOL": "\u2200x (OxfordStreet(x) \u2192 London(x))"
    },
    {
        "NL": "John Nash designed the construction on Regent Street.",
        "FOL": "\u2203x (RegentStreet(x) \u2227 Design(johnNash, x))"
    },
    {
        "NL": "John Nash designed Oxford Circus.",
        "FOL": "Design(johnNash, oxfordCircus)"
    },
    {
        "NL": "John Nash is an architect in British.",
        "FOL": "British(johnNash) \u2227 Architect(johnNash)"
    },
    {
        "NL": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.",
        "FOL": "CentralLine(oxfordCircus)"
    },
    {
        "NL": "An animal is either a cat or a dog.",
        "FOL": "\u2200x (Cat(x) \u2295 Dog(x))"
    },
    {
        "NL": "All dogs bark.",
        "FOL": "\u2200x (Dog(x) \u2192 Bark(x))"
    },
    {
        "NL": "Ghosts do not exist.",
        "FOL": "\u2200x (\u00acGhost(x))"
    },
    {
        "NL": "If something barks, then it is not alive.",
        "FOL": "\u2200x (Bark(x) \u2192 \u00acAlive(x))"
    },
    {
        "NL": "A thing is either alive or dead.",
        "FOL": "\u2200x (Alive(x) \u2295 Dead(x))"
    },
    {
        "NL": "Jojo is not dead.",
        "FOL": "\u00acDead(jojo)"
    },
    {
        "NL": "All animals that are tigers are cats.",
        "FOL": "\u2200x (Tiger(x) \u2192 Cat(x))"
    },
    {
        "NL": "No cats are dogs.",
        "FOL": "\u2200x (Cat(x) \u2192 \u00acDog(x))"
    },
    {
        "NL": "All Bengal tigers are tigers.",
        "FOL": "\u2200x (BengalTiger(x) \u2192 Tiger(x))"
    },
    {
        "NL": "Everything that is a husky is a dog.",
        "FOL": "\u2200x (Husky(x) \u2192 Dog(x))"
    },
    {
        "NL": "Fido is either a Bengal tiger or a cat.",
        "FOL": "BengalTiger(fido) \u2228 Cat(fido)"
    },
    {
        "NL": "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "FOL": "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))"
    },
    {
        "NL": "If a city is in a state which is in US, the city is a US city.",
        "FOL": "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))"
    },
    {
        "NL": "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "FOL": "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))"
    },
    {
        "NL": "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
        "FOL": "SummerOlympicsCity(y2028, la)"
    },
    {
        "NL": "LA is a city in California(CA).",
        "FOL": "CityInState(la, ca)"
    },
    {
        "NL": "Atlanta is a US city.",
        "FOL": "CityInCountry(atlanta, us)"
    },
    {
        "NL": "Atlanta is in Georgia(CA).",
        "FOL": "StateInCountry(ca, us)"
    },
    {
        "NL": "CA is a state in the United States.",
        "FOL": "CityInState(atlanta, ga)"
    },
    {
        "NL": "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.",
        "FOL": "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)"
    },
    {
        "NL": "Atlanta in the United States hold the 1996 Summer Olympics.",
        "FOL": "SummerOlympicsCity(y1996, atlanta)"
    },
    {
        "NL": "The taiga vole is a large vole found in northwestern North America. ",
        "FOL": "Vole(taigaVole) \u2227 Find(taigaVole, northAmerica)"
    },
    {
        "NL": "Cats like playing with all voles.",
        "FOL": "\u2200x (Vole(x) \u2192 CatLikePlayingWith(x))"
    },
    {
        "NL": "The taiga vole lives in the boreal taiga zone.",
        "FOL": "Live(taigaVole, borealTaigaZone)"
    },
    {
        "NL": "The boreal taiga zone in North America is a cold place to live in.",
        "FOL": "\u2200x (Find(x, northAmerica) \u2227 Live(x, borealTaigaZone) \u2192 LiveInColdPlace(x))"
    },
    {
        "NL": "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.",
        "FOL": "Larger(taigaVole, microtusVole)"
    },
    {
        "NL": "Either in women or in men. ",
        "FOL": "\u2200x (Women(x) \u2228 Men(x)) "
    },
    {
        "NL": "No men have breast cancer.",
        "FOL": " \u2200x (Men(x) \u2192 \u00acBreastCancer(x))"
    },
    {
        "NL": "Either breast cancer or non-breast cancer. ",
        "FOL": " \u2200x (BreastCancer (x) \u2228 Non-BreastCancer(x)) "
    },
    {
        "NL": "No type of cancer is without a tumor.",
        "FOL": " \u2200x (ATypeOfCancer(x) \u2192 \u00acWithoutTumor (x)) "
    },
    {
        "NL": "All non-breast cancers are a type of cancer.",
        "FOL": " \u2200x (Non-BreastCancer(x) \u2192 ATypeOfCancer(x)) "
    },
    {
        "NL": "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.",
        "FOL": " ATypeOfCancer(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma) \u2192 women(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma)"
    },
    {
        "NL": "Some monitors equipped in the lab are produced by the company named AOC. ",
        "FOL": "\u2203x (Lab(x) \u2227 AOC(x))"
    },
    {
        "NL": "All monitors equipped in the lab are cheaper than their original prices. ",
        "FOL": "\u2200x (Lab(x) \u2192 Cheaper(x))"
    },
    {
        "NL": "If the monitor is cheaper than its original prices, then its resolution is 1080p. ",
        "FOL": "\u2200x (Cheaper(x) \u2192 A1080p(x))"
    },
    {
        "NL": "If a monitor is with a resolution of 1080p, then it does not support the type-c port. ",
        "FOL": "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))"
    },
    {
        "NL": "LG34 is equipped in the lab.  ",
        "FOL": "Lab(lg-34)"
    },
    {
        "NL": "All fruits sold in Boston are shipped from Columbia. ",
        "FOL": "\u2200x (SoldBoston(x) \u2192 ShippedFromColumbia(x))"
    },
    {
        "NL": "Some fruits sold in New Haven are shipped from Mexico.",
        "FOL": "\u2203x (SoldNewHaven(x) \u2227 ShippedFromMexico(x))"
    },
    {
        "NL": "No fruits shipped from Columbia are fruits sold in New York. ",
        "FOL": "\u2200x (ShippedFromColumbia(x) \u2192 \u00acSoldNewYork(x))"
    },
    {
        "NL": "Avocadoe are a kind of fruit sold in New York or New York. ",
        "FOL": "SoldNewYork(avocado) \u2228 SoldBoston(avocado)"
    },
    {
        "NL": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ",
        "FOL": "\u00ac(ShippedFromColumbia(avocado) \u2295 SoldNewHaven(avocado))"
    },
    {
        "NL": "Some monitors equipped in the library are produced by AOC. ",
        "FOL": "\u2203x (Library(x) \u2227 AOC(x))"
    },
    {
        "NL": "All monitors equipped in the library are cheaper than 800 dollars. ",
        "FOL": "\u2200x (Library(x) \u2192 Cheap(x))"
    },
    {
        "NL": "All monitors cheaper than 800 dollars are with a resolution of 1080p. ",
        "FOL": "\u2200x (Cheap(x) \u2192 A1080p(x))"
    },
    {
        "NL": "If a monitor has a resolution of 1080p, then it does not support the type-c port. ",
        "FOL": "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))"
    },
    {
        "NL": "A-2017 supports the type-c port. ",
        "FOL": "TypeC(a-2017)"
    },
    {
        "NL": "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup.",
        "FOL": "Hold(suduva, thelithuaniansupercup)"
    },
    {
        "NL": "S\u016bduva Marijampol\u0117 is a soccer team.",
        "FOL": "SoccerTeam(suduva)"
    },
    {
        "NL": "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "FOL": "\u2200x (AinderbyQuernhow(x) \u2192 Village(x) \u2227 CivilParish(x) \u2227 Hambleton(x))"
    },
    {
        "NL": "Hambleton District is in North Yorkshire.",
        "FOL": "\u2200x (Hambleton(x) \u2192 NorthYorkshire(x))"
    },
    {
        "NL": "North Yorkshire is in England.",
        "FOL": "\u2200x (NorthYorkshire(x) \u2192 England(x))"
    },
    {
        "NL": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "FOL": "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)"
    },
    {
        "NL": "The Salmon of Doubt is about life experiences and technology.",
        "FOL": "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)"
    },
    {
        "NL": "All authors are writers.",
        "FOL": "\u2200x (Author(x) \u2192 Writer(x))"
    },
    {
        "NL": "Writers create innovative ideas.",
        "FOL": "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))"
    },
    {
        "NL": "Some books that contain innovative ideas are about technology.",
        "FOL": "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))"
    },
    {
        "NL": "No disposable products can help slow down global warming. ",
        "FOL": "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))"
    },
    {
        "NL": "All eco-friendly brands can help slow down global warming. ",
        "FOL": " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))"
    },
    {
        "NL": "All sustainable fashion brands are eco-friendly brands.",
        "FOL": " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))"
    },
    {
        "NL": "All fast fashion products are disposable products.",
        "FOL": " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) "
    },
    {
        "NL": "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.",
        "FOL": " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)"
    },
    {
        "NL": "Roy Richardson was a cricketer for Sint Maartener, a consituent country.",
        "FOL": "Cricketeer(royrichardson) \u2227 PlayedFor(royrichardson, sintmaartener) \u2227 ConstituentCountry(sintmaartener)"
    },
    {
        "NL": "Roy Richardson was a right handed batsman and medium pace bowler.",
        "FOL": "RightHanded(royrichardson) \u2227 Batsman(royrichardson) \u2227 MediumPaceBowler(royrichardson)"
    },
    {
        "NL": "Roy Richardson was old when he debuted in cricket.",
        "FOL": "Old(royrichardson) \u2227 DebutedIn(royrichardson, cricket)"
    },
    {
        "NL": "Sherville Huggins dismissed Roy Richardson.",
        "FOL": "Dismissed(shervillehuggins, royrichardson)"
    },
    {
        "NL": "To get a job at Google, you need to have a lot of work experience or a good education.",
        "FOL": "\u2200x (Employed(x, google) \u2192 WorkExp(x) \u2228 GoodEduc(x))"
    },
    {
        "NL": " All Yale graduates who submitted their resumes to Google got jobs there.",
        "FOL": "\u2200x ((Yale(x) \u2227 CV(x, google)) \u2192 Employed(x, google))"
    },
    {
        "NL": " John has a lot of work experience.",
        "FOL": "WorkExp(john)"
    },
    {
        "NL": " John submitted his resume to Google and got a job there.",
        "FOL": "CV(john, google) \u2227 Employed(john, google)"
    },
    {
        "NL": "No students are doctors.",
        "FOL": "\u2200x (Student(x) \u2192 \u00acDoctor(x))"
    },
    {
        "NL": "All people taking classes are students. ",
        "FOL": "\u2200x (TakingClass(x) \u2192 Student(x))"
    },
    {
        "NL": "All graduate students are people taking classes. ",
        "FOL": "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))"
    },
    {
        "NL": "All PhD students are graduate students. ",
        "FOL": "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))"
    },
    {
        "NL": "Hugh Vanstone is one of the world's leading lighting designers. ",
        "FOL": "WorldLeadingLightningDesigner(hughVanstone)"
    },
    {
        "NL": "Hugh Vanstone is from the UK.",
        "FOL": "FromUK(hughVanstone)"
    },
    {
        "NL": "Hugh Vanstone has lit more than 160 productions.",
        "FOL": "LitOver160Productions(hughVanstone)"
    },
    {
        "NL": "Hugh Vanstone attended school where he is from. ",
        "FOL": "AttendedSchoolWhereFrom(hughVanstone)"
    },
    {
        "NL": "No man can run faster than Bolt. ",
        "FOL": "\u2200x (Man(x) \u2192 \u00acFasterThanBolt(x))"
    },
    {
        "NL": "Superman is not a man.",
        "FOL": "\u00acMan(superman) "
    },
    {
        "NL": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
        "FOL": "AmericanComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorStanford(donaldErvinKnuth)"
    },
    {
        "NL": "Knuth has been called the \"father of the analysis of algorithms\".",
        "FOL": "BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)"
    },
    {
        "NL": "Neocrepidodera Corpulentas are flea beetles or moths.",
        "FOL": "FleaBeetle(neocrepidoderacorpulenta) \u2228 Moth(neocrepidoderacorpulenta)"
    },
    {
        "NL": "The species Neocrepidodera Corpulenta is in the Chrysomelidae family.",
        "FOL": "Species(neocrepidoderacorpulenta) \u2227 Family(chrysomelidae) \u2227 In(neocrepidoderacorpulenta, chrysomelidae)"
    },
    {
        "NL": "There are no moths within the Chrysomelidae family.",
        "FOL": "\u2200x (In(x, chrysomelidae) \u2227 Family(chrysomelidae) \u2192 \u00acMoth(x))"
    },
    {
        "NL": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
        "FOL": "MilaneseCoachbuilderCompany(carrozzeriacolli) \u2227 EstablishedBy(carrozzeriacolli, giuseppecolli) \u2227 EstablishedIn(carrozzeriacolli, y1901)"
    },
    {
        "NL": "Carrozzeria Colli is a company that specialized in using aluminum.",
        "FOL": "SpecializedIn(carrozzeriacolli, usingaluminum)"
    },
    {
        "NL": "The first automobiles built by Carrozzeria Colli were racing cars.",
        "FOL": "\u2200x (FirstAutomobilesBy(x, carrozzeriacolli) \u2192 Racingcar(x))"
    },
    {
        "NL": "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.",
        "FOL": "\u2203x (RacingCar(x) \u2227 BuiltBy(x, carrozzeriacolli) \u2227 Used(x, fiat110mechanicals) \u2227 Used(x, chasis))"
    },
    {
        "NL": "Carrozzeria Colli worked for airforces.",
        "FOL": "\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriacolli, x))"
    },
    {
        "NL": "Carrozzeria Colli made car bodies. ",
        "FOL": "Made(carrozzeriacolli, carbodies)"
    },
    {
        "NL": "John will go to the cinema if and only if Jack goes to the cinema today.",
        "FOL": "GoToTheCinema(john, today) \u2194 GoToTheCinema(jack, today)"
    },
    {
        "NL": "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.",
        "FOL": "GoToTheCinema(jack, today) \u2194 (Movie(ironman) \u2227 \u00acBadWeather(today))"
    },
    {
        "NL": "Some days in March have bad weather.",
        "FOL": "\u2203x (Month(march) \u2192 BadWeather(x))"
    },
    {
        "NL": "Iron man is on.",
        "FOL": "Movie(ironman)"
    },
    {
        "NL": "It's March now.",
        "FOL": "Month(march)"
    },
    {
        "NL": "Quiksilver sells sportswear, clothing, footwear, and accessories.",
        "FOL": "\u2200x (QuiksilverSells(x) \u2192 Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x))"
    },
    {
        "NL": "Flannels are a type of clothing.",
        "FOL": "Clothing(flannel)"
    },
    {
        "NL": "Joe owns an item fron Quiksilver.",
        "FOL": "\u2203x (QuiksilverSells(x) \u2192 JoeOwns(x))"
    },
    {
        "NL": "No video games released by Nintendo support the PS4 platform.",
        "FOL": "\u2200x (Nintendo(x) \u2192 \u00acSupportPS4(x))"
    },
    {
        "NL": "All video games in the Pokemon series are released by Nintendo. ",
        "FOL": "\u2200x (Pokemon(x) \u2192 Nintendo(x))"
    },
    {
        "NL": "All video games in the FIFA series support the PS4 platform. ",
        "FOL": "\u2200x (FIFA(x) \u2192 SupportPS4(x))"
    },
    {
        "NL": "All video games supporting users to simulate playing soccer games online are in the FIFA series.",
        "FOL": "\u2200x (SoccerOnline(x) \u2192 FIFA(x))"
    },
    {
        "NL": "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online.",
        "FOL": "Pokemon(belionel) \u2295 SoccerOnline(belionel)"
    },
    {
        "NL": "No payment cards issued by Russian banks can be used with ApplePay.",
        "FOL": "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))"
    },
    {
        "NL": "All MIR payment cards are issued by Russian banks.",
        "FOL": "\u2200x (Mir(x) \u2192 RussianBank(x))"
    },
    {
        "NL": "Some international payment cards can be used with ApplePay.",
        "FOL": "\u2203x (International(x) \u2192 ApplePay(x))"
    },
    {
        "NL": "Social payments in Russia can only be transferred to MIR payment cards.",
        "FOL": "\u2200x (SocialRussia(x) \u2192 Mir(x))"
    },
    {
        "NL": "Bank of America payment cards can be used with ApplePay.",
        "FOL": "ApplePay(boapaymentcards)"
    },
    {
        "NL": "The Lumina APV is produced by Chevrolet. ",
        "FOL": "Chevrolet(luminaAPV)"
    },
    {
        "NL": "The Astro is a van produced by Chevrolet. ",
        "FOL": "Chevrolet(astro) \u2227 Van(astro)"
    },
    {
        "NL": "Cars produced by Chevrolet are either cars or vans.",
        "FOL": "\u2200x (Chevrolet(x) \u2192 Car(x) \u2295 Van(x))"
    },
    {
        "NL": "Everyone who works in person is a commuter.",
        "FOL": "\u2200x (InPerson(x) \u2192 Commuter(x))"
    },
    {
        "NL": "People either work in person or work from home.",
        "FOL": "\u2200x (InPerson(x) \u2295 FromHome(x))"
    },
    {
        "NL": "Everyone who works from home has a relaxed schedule.",
        "FOL": "\u2200x (FromHome(x) \u2192 Relaxed(x))"
    },
    {
        "NL": "George is either a commuter or has a home office setup.",
        "FOL": "Commuter(george) \u2295 HomeOffice(george)"
    },
    {
        "NL": "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.",
        "FOL": "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))"
    },
    {
        "NL": "Jason Kramer is an American music supervisor.",
        "FOL": "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)"
    },
    {
        "NL": "Some American radio personalities are also music supervisors. ",
        "FOL": "\u2203x (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x))"
    },
    {
        "NL": "Anyone who hosts a show on a public radio station is a radio personality.",
        "FOL": "\u2200x (HostShowOnPublicRadioStation(x) \u2192 RadioPersonality(x))"
    },
    {
        "NL": "Joe Rogan is a radio personality.",
        "FOL": "RadioPersonality(joeRogan)"
    },
    {
        "NL": "Jason Kramer hosted a show on a public radio station.",
        "FOL": "HostShowOnPublicRadioStation(jasonKramer)"
    },
    {
        "NL": "No coffee sold in Walmart is produced in France. ",
        "FOL": "\u2200x (Walmart(x) \u2192 \u00acFrance(x))"
    },
    {
        "NL": "All coffee supplied by the company is sold in Walmart. ",
        "FOL": "\u2200x (Company(x) \u2192 Walmart(x))"
    },
    {
        "NL": "All coffee produced in Columbia is produced in France. ",
        "FOL": "\u2200x (Columbia(x) \u2192 France(x))"
    },
    {
        "NL": "All coffee favored by local residents is coffee produced in Columbia. ",
        "FOL": "\u2200x (Favored(x) \u2192 Columbia(x))"
    },
    {
        "NL": "All coffee with high prices is favored by local residents. ",
        "FOL": "\u2200x (HighPrice(x) \u2192 Favored(x))"
    },
    {
        "NL": "Civet Coffee is not produced in Columbia and is cheap.",
        "FOL": "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))"
    },
    {
        "NL": "Jamaica Blue is sold in Walmart or favored by local residents.",
        "FOL": "Walmart(jamaicablue) \u2228 Favored(jamaicablue)"
    },
    {
        "NL": "There are two places named Galicia: either in Spain or in Poland.",
        "FOL": "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))"
    },
    {
        "NL": "Spain is in Europe.",
        "FOL": "\u2200x (Spain(x) \u2192 Europe(x))"
    },
    {
        "NL": "Poland is in Europe.",
        "FOL": "\u2200x (Poland(x) \u2192 Europe(x))"
    },
    {
        "NL": "Rochelle lives in Europe.",
        "FOL": "\u2200x (RochelleLive(x) \u2192 Europe(x))"
    },
    {
        "NL": "Dominique does not live in Europe.",
        "FOL": "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))"
    },
    {
        "NL": "Alfonso lives in Galicia.",
        "FOL": "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))"
    },
    {
        "NL": "Ralph Hammerthaler was born in Wasserburg am Inn.",
        "FOL": "BornIn(ralphHammerthaler, wasserburgAmInn)"
    },
    {
        "NL": "Wasserburg am Inn is in Germany.",
        "FOL": "LocatedIn(wasserbAmInn, germany)"
    },
    {
        "NL": "Germany is in Europe.",
        "FOL": "LocatedIn(germany, europe)"
    },
    {
        "NL": "Ralph Hammerthaler is a German writer.",
        "FOL": "Writer(ralphHammerthaler)"
    },
    {
        "NL": "Ralph Hammerthaler was born in 1965. ",
        "FOL": "BornIn1965(ralphHammerthaler)"
    },
    {
        "NL": "All books written by Tomas have sold more than 1 million copies. ",
        "FOL": "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))"
    },
    {
        "NL": "Some books that have won Hugo Awards are written by Tomas.",
        "FOL": "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))"
    },
    {
        "NL": "All books about the future are inspired by Shakespeare. ",
        "FOL": "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))"
    },
    {
        "NL": "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
        "FOL": "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) "
    },
    {
        "NL": "2001 is a book that has either sold more than 1 million copies or it was written by Tomas.",
        "FOL": "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)"
    },
    {
        "NL": "No grass is food. ",
        "FOL": "\u2200x (Grass(x) \u2192 \u00acFood(x))"
    },
    {
        "NL": "All meadows are grass.",
        "FOL": "\u2200x (Meadow(x) \u2192 Grass(x))"
    },
    {
        "NL": "All edible things are food. ",
        "FOL": "\u2200x (Edible(x) \u2192 Food(x))"
    },
    {
        "NL": "All fruits are edible.",
        "FOL": "\u2200x (Fruit(x) \u2192 Edible(x))"
    },
    {
        "NL": "All lemons are fruit.",
        "FOL": "\u2200x (Lemon(x) \u2192 Fruit(x))"
    },
    {
        "NL": "Grapes are not edible and lemons.",
        "FOL": "\u00ac(Edible(grape) \u2227 Lemon(grape))"
    },
    {
        "NL": "Bananas are grass or fruit.",
        "FOL": "Grass(banana) \u2228 Fruit(banana)"
    },
    {
        "NL": "The Golden State Warriors are a team from San Francisco.",
        "FOL": "Team(goldenstatewarriors) \u2227 From(goldenstatewarriors, sanfrancisco)"
    },
    {
        "NL": "The Golden State Warriors won the NBA finals.",
        "FOL": "Won(goldenstatewarriors, nbafinals)"
    },
    {
        "NL": "All teams attending the NBA finals have more than thirty years of history.",
        "FOL": "\u2200x (team(x) \u2227 Attending(x, nbafinals) \u2192 HasMoreThan(x, thirtyyearsofhistory))"
    },
    {
        "NL": "Boston Celtics are a team that lost the NBA finals.",
        "FOL": "Team(bostonceltics) \u2227 Lost(bostonceltics, nbafinals)"
    },
    {
        "NL": "If a team wins the NBA finals, then they will have more income.",
        "FOL": "\u2200x (Team(x) \u2227 Won(x, nbafinals) \u2192 MoreIncome(x))"
    },
    {
        "NL": "If a team wins or loses at the NBA finals, then they are attending the finals.",
        "FOL": "\u2200x (Won(x, nbafinals) \u2228 Lost(x, nbafinals) \u2192 Attending(x, nbafinals))"
    },
    {
        "NL": "Maya will play violin if and only if she never injures her fingers.",
        "FOL": "CanInjureFingures(maya) \u2192 \u00acWillPlayViolin(maya)"
    },
    {
        "NL": "Volleyball players can injure their ankle, fingers, or shoulder.",
        "FOL": "\u2200x (VolleyballPlayer(x) \u2192 CanInjureFingures(x))"
    },
    {
        "NL": "Maya is a volleyball player.",
        "FOL": "VolleyballPlayer(maya)"
    },
    {
        "NL": "All devices with the company logo belong to the company. ",
        "FOL": "\u2200x (CompanyLogo(x) \u2192 InCompany(x))"
    },
    {
        "NL": "A device is either with the company logo or belongs to employees. ",
        "FOL": "\u2200x (CompanyLogo(x) \u2228 Employee(x))"
    },
    {
        "NL": "All devices belonging to employees are available to connect to the company's wifi. ",
        "FOL": "\u2200x (Employee(x) \u2192 Wifi(x))"
    },
    {
        "NL": "All devices connected to Google Home are controlled by managers. ",
        "FOL": "\u2200x (GoogleHome(x) \u2192 ControlledByManager(x))"
    },
    {
        "NL": "All devices that are easy to operate are produced after 2020. ",
        "FOL": "\u2200x (EasyToOperate(x) \u2192 ProducedAfter2020(x))"
    },
    {
        "NL": "IPod1 is produced before 2020. ",
        "FOL": "\u00acProducedAfter2020(iPod1)"
    },
    {
        "NL": "All CD players are delicate mechanisms.",
        "FOL": "\u2200x (CDPlayer(x) \u2192 DelicateMechanism(x))"
    },
    {
        "NL": "No delicate mechanisms are suitable toys for children.",
        "FOL": "\u2200x (DelicateMechanism(x) \u2192 \u00acSuitableToyForChildren(x))"
    },
    {
        "NL": "All mammals are living beings.",
        "FOL": "\u2200x (Mammal(x) \u2192 LivingBeing(x)) "
    },
    {
        "NL": "All elephants are mammals.",
        "FOL": "\u2200x (Elephant(x) \u2192 Mammal(x))"
    },
    {
        "NL": "All baby elephants are elephants.",
        "FOL": "\u2200x (BabyElephant(x) \u2192 Elephant(x))"
    },
    {
        "NL": "Some baby elephants are sleepy.",
        "FOL": "\u2203x (BabyElephant(x) \u2227 Sleepy(x))"
    },
    {
        "NL": "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.",
        "FOL": "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))"
    },
    {
        "NL": "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.",
        "FOL": "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)"
    },
    {
        "NL": "No faculty does homework.",
        "FOL": "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))"
    },
    {
        "NL": "All students do homework.",
        "FOL": "\u2200x (Student(x) \u2192 DoesHomework(x))"
    },
    {
        "NL": "All kids are students.",
        "FOL": "\u2200x (Kid(x) \u2192 Student(x))"
    },
    {
        "NL": "If someone works at a school, then they are faculty.",
        "FOL": "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))"
    },
    {
        "NL": "If Jill works at a school or is a teacher, then Jill works at a school.",
        "FOL": "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)"
    },
    {
        "NL": "Either Max listens to classical music or Max listens to rap. ",
        "FOL": "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))"
    },
    {
        "NL": "All the songs that Max listens to that are classical music are from the 12th century.",
        "FOL": "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))"
    },
    {
        "NL": "If the song Max listens to is rap, then the song is from Kanye West. ",
        "FOL": "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))"
    },
    {
        "NL": "If a songs is from Kanye West, then the song is full of lyrics. ",
        "FOL": "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))"
    },
    {
        "NL": "All songs that are full of lyrics need to be written with words",
        "FOL": "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))"
    },
    {
        "NL": "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.",
        "FOL": "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)"
    },
    {
        "NL": "\"Your Woman\" is a song by British one-man band White Town.",
        "FOL": "Produce(whiteTown, yourWoman)"
    },
    {
        "NL": "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.",
        "FOL": "Peak(yourWoman, uKSinglesChart)"
    },
    {
        "NL": "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
        "FOL": "\u2200x \u2200y (Peak(x, y) \u2192 Popular(x))"
    },
    {
        "NL": "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain.",
        "FOL": "Peak(yourWoman, iceland) \u2227 Peak(yourWoman, isarel) \u2227 Peak(yourWoman, spain)"
    },
    {
        "NL": "All people who limp often and regularly have long-term medical issues with underlying causes.",
        "FOL": "\u2200x (Limp(x) \u2192 Medical(x))"
    },
    {
        "NL": "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.",
        "FOL": "\u2200x (Medical(x) \u2192 \u00acSpry(x))"
    },
    {
        "NL": "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.",
        "FOL": "\u2200x (Indoors(x) \u2192 \u00acGym(x))"
    },
    {
        "NL": "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.",
        "FOL": "(Limp(Mark) \u2295 Spry(Mark)) \u2192 Limp(Mark) \u2228 Tired(Mark)"
    },
    {
        "NL": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.",
        "FOL": "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2192 PlayExtra(x, y))"
    },
    {
        "NL": "If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.",
        "FOL": "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))"
    },
    {
        "NL": "Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL final during the regular time.",
        "FOL": "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)"
    },
    {
        "NL": "Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL final during the extra time.",
        "FOL": "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)"
    },
    {
        "NL": "System 7 is a UK-based electronic dance music band.",
        "FOL": "BasedOn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)"
    },
    {
        "NL": "Steve Hillage and Miquette Giraudy formed System 7.",
        "FOL": "Formed(stevehillage, system7) \u2227 Formed(miquettegiraudy, system7)"
    },
    {
        "NL": "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
        "FOL": "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)"
    },
    {
        "NL": "Electric dance music bands are bands.",
        "FOL": "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))"
    },
    {
        "NL": "System 7 has released several club singles.",
        "FOL": "\u2203x (ClubSingle(x) \u2227 Released(system7, x))"
    },
    {
        "NL": "Club singles are not singles.",
        "FOL": "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))"
    },
    {
        "NL": "A summarization model is always faithful if it uses content from the input documents.",
        "FOL": "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))"
    },
    {
        "NL": "Extractive models are a kind of summarization models.",
        "FOL": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))"
    },
    {
        "NL": "Extractive model can only use content from the input documents.",
        "FOL": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))"
    },
    {
        "NL": "If people practice coding questions, then they are not studying to go to medical school to become a doctor.",
        "FOL": "\u2200x Coding(x) \u2192 \u00acStudyingToBeDoctor(x)"
    },
    {
        "NL": "If people want to work in the software engineering industry, then they practice coding questions.",
        "FOL": "\u2200x Industry(x) \u2192 Coding(x)"
    },
    {
        "NL": "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.",
        "FOL": "\u2200x Healthcare(x) \u2192 StudyingToBeDoctor(x)"
    },
    {
        "NL": "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.",
        "FOL": "\u2200x ParentDoctors(x) \u2192 Healthcare(x)"
    },
    {
        "NL": "If people study hard, then they grew up with parents who worked as doctors.",
        "FOL": "\u2200x Study(x) \u2192 ParentDoctors(x)"
    },
    {
        "NL": "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.",
        "FOL": "\u00ac(Healthcare(Robin) \u2228 ParentDoctors(Robin)) \u2192 (Study(Robin) \u2228 ParentDoctors(Robin)) "
    },
    {
        "NL": "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
        "FOL": "\u2200x Spa(x) \u2192 \u00acMiserly(x)"
    },
    {
        "NL": "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
        "FOL": "\u2200x Miserly(x) \u2228 Frivolous(x)"
    },
    {
        "NL": "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
        "FOL": "\u2200x Frivolous(x) \u2192 Luxury(x)"
    },
    {
        "NL": "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "FOL": "\u2200x Luxury(x) \u2192 Shopping(x)"
    },
    {
        "NL": "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
        "FOL": "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)"
    },
    {
        "NL": "The indie pop band Phoenix has released 6 albums. ",
        "FOL": "AlbumsReleased(phoenix, l6)"
    },
    {
        "NL": "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ",
        "FOL": "Album(wolfgangamadeusphoenix) \u2227 IsAlbumOf(wolfgangamadeusphoenix, phoenix) \u2227 SoldOver(wolfgangamadeusphoenix, l500000)"
    },
    {
        "NL": "A certified gold album or single is one which sold over half a million copies. ",
        "FOL": "\u2200x ((Album(x) \u2228 Single(x)) \u2227 SoldOver(x, l500000) \u2192 CertifiedGold(x))"
    },
    {
        "NL": "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"",
        "FOL": "Single(l1901) \u2227 From(l1901, wolfgangamadeusphoenix) \u2227 By(l1901, phoenix)"
    },
    {
        "NL": "Over 400,000 copies of \"1901\" have been sold. ",
        "FOL": "SoldOver(l1901, l400000)"
    },
    {
        "NL": "Peter Parker is a either a superhero or a civilian.",
        "FOL": "Superhero(peter) \u2295 Civilian(peter)"
    },
    {
        "NL": "The Hulk is a destroyer.",
        "FOL": "Destroyer(hulk)"
    },
    {
        "NL": "The Hulk wakes up when he is angry.",
        "FOL": "Angry(hulk) \u2192 Wake(hulk)"
    },
    {
        "NL": "If the Hulk wakes up, then he will break a bridge.",
        "FOL": "Wake(hulk) \u2192 BreakBridge(hulk)"
    },
    {
        "NL": "Thor is a god.",
        "FOL": "God(thor)"
    },
    {
        "NL": "Thor will break a bridge when he is happy.",
        "FOL": "Happy(thor) \u2192 BreakBridge(thor)"
    },
    {
        "NL": "A god is not a destroyer and a destroyer is not a god.",
        "FOL": "\u2200x (God(x) \u2194 \u00acDestroyer(x))"
    },
    {
        "NL": "Peter Parker wears a uniform when he is a superhero.",
        "FOL": "Superhero(peter) \u2192 WearUniform(peter)"
    },
    {
        "NL": "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.",
        "FOL": "\u2200x (\u00acCivilian(peter) \u2194 (Destroyer(x) \u2227 BreakBridge(x)))"
    },
    {
        "NL": "If Thor is happy, the Hulk is angry.",
        "FOL": "Happy(thor) \u2192 Angry(hulk)"
    },
    {
        "NL": "Diethylcarbamazine is a medication discovered in the year 1947.",
        "FOL": "\u2200x (Diethylcarbamazine(x) \u2227 Medication(x) \u2227 DiscoveredIn(x, year1947))"
    },
    {
        "NL": "Diethylcarbamazine can be used to treat river blindness.",
        "FOL": "\u2200x \u2200y (Diethylcarbamazine(x) \u2227 RiverBlindness(y) \u2192 Treats(x, y))"
    },
    {
        "NL": "The only preferred treatment for river blindness is ivermectin.",
        "FOL": "\u2200x \u2200y (RiverBlindness(y) \u2227 PreferredTreatment(x, y) \u2192 Ivermectin(x))"
    },
    {
        "NL": "Diethylcarbamazine is not ivermectin.",
        "FOL": "\u2200x (Diethylcarbamazine(x) \u2192 \u00acIvermectin(x))"
    },
    {
        "NL": "All univariate analyses use a generalized linear model. ",
        "FOL": "\u2200x (UnivariateAnalysis(x) \u2192 UsesGeneralizedLinearModel(x)) "
    },
    {
        "NL": "All multivoxel (pattern) analyses are implementing machine learning algorithms.",
        "FOL": " \u2200x (MultivoxelPatternAnalysis(x) \u2192 ImplementingMachineLearningAlgorithms(x))"
    },
    {
        "NL": "All implementing machine learning algorithms are to learn and classify multivariate data.",
        "FOL": " \u2200x (ImplementingMachineLearningAlgorithms(x) \u2192 LearnAndClassifyMultivariateData(x)) "
    },
    {
        "NL": "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
        "FOL": " UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2228 UnivariateAnalysis(latentDirichletAllocationModel)"
    },
    {
        "NL": "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.",
        "FOL": " \u00acLearnAndClassifyMultivariateData(latentDirichletAllocationModel) \u2192 UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2227 MultivoxelPatternAnalysis(latentDirichletAllocationModel)"
    },
    {
        "NL": "If something requires a medical diagnosis, then lab tests or imaging is required. ",
        "FOL": "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) "
    },
    {
        "NL": "All rare diseases require a medical diagnosis.",
        "FOL": "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))"
    },
    {
        "NL": "If something is mild, then no lab tests or imaging is required. ",
        "FOL": "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) "
    },
    {
        "NL": "All blood cancers are rare diseases.",
        "FOL": "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))"
    },
    {
        "NL": "All Leukemia is blood cancer. ",
        "FOL": "\u2200x (Leukemia(x) \u2192 BloodCancer(x))"
    },
    {
        "NL": "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.",
        "FOL": "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)"
    },
    {
        "NL": "No precious metals aren't scarce.",
        "FOL": "\u2200x (PreciousMetals(x) \u2192 \u00acNotScarce(x))"
    },
    {
        "NL": "All non-rare earth metals are not scarce.",
        "FOL": " \u2200x (Non-rareEarthMetals(x) \u2192 NotScarce(x)) "
    },
    {
        "NL": "Either non-rare earth metals or rare earth metals. ",
        "FOL": " \u2200x (Non-rareEarthMetals(x) \u2228 RareEarthMetals(x)) "
    },
    {
        "NL": "All rare earth metals can be used for batteries.",
        "FOL": " \u2200x (RareEarthMetals(x) \u2192 BeUsedForBatteries(x)) "
    },
    {
        "NL": "All rare earth metals are essential for electric vehicles.",
        "FOL": " \u2200x (RareEarthMetals(x) \u2192 EssentialForElectricVehicles(x))"
    },
    {
        "NL": "Lithium is neither a non-rare earth metal nor essential for electric vehicles.",
        "FOL": " \u00acNon-rareEarthMetals(lithium) \u2295 \u00acEssentialForElectricVehicles(lithium)"
    },
    {
        "NL": "If people own at least one pet, then they do not have tidy houses.",
        "FOL": "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))"
    },
    {
        "NL": "If people grew up with childhood pets, then they own at least one pet.",
        "FOL": "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))"
    },
    {
        "NL": "If people hire a maid or cleaning service, then they have tidy houses.",
        "FOL": "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))"
    },
    {
        "NL": "If people live in the suburbs, then they have tidy houses.",
        "FOL": "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))"
    },
    {
        "NL": "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.",
        "FOL": "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))"
    },
    {
        "NL": "A bottle is either standing upright or toppled over. ",
        "FOL": "Upright(bottle) \u2295 ToppledOver(bottle)"
    },
    {
        "NL": "The bottle is not upright.",
        "FOL": "\u00acUpright(bottle)"
    },
    {
        "NL": "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.",
        "FOL": "\u2200x (Cereal(x) \u2192 BusyMorning(x))"
    },
    {
        "NL": "All young children below the age of ten eat cereal and milk every day for breakfast.",
        "FOL": "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))"
    },
    {
        "NL": "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
        "FOL": "\u2200x (YoungChildren(x) \u2295 Committments(x))"
    },
    {
        "NL": "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
        "FOL": "\u2200x (Committments(x) \u2192 Hardworking(x))"
    },
    {
        "NL": "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.",
        "FOL": "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))"
    },
    {
        "NL": "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.",
        "FOL": "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))"
    },
    {
        "NL": "Ableton has an office in Germany.",
        "FOL": "OfficeIn(ableton, germany)"
    },
    {
        "NL": "Ableton has an office in the USA.",
        "FOL": "OfficeIn(ableton, usa)"
    },
    {
        "NL": "USA and Germany are different countries.",
        "FOL": "\u00acSameCountry(germany, usa)"
    },
    {
        "NL": "Any company that has offices in different countries is a multinational company.",
        "FOL": "\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 \u00acSameCountry(y, z) \u2192 IsMultinationalCompany(x))"
    },
    {
        "NL": "Ableton makes music software.",
        "FOL": "MakesMusicSoftware(ableton)"
    },
    {
        "NL": "Every swimmer can go underwater.",
        "FOL": "\u2200x (Swimmer(x) \u2192 GoesUnderwater(x))"
    },
    {
        "NL": "Everyone that eats fish they catch themselves is a swimmer.",
        "FOL": "\u2200x (EatsFishCaughtThemselves(x) \u2192 Swimmer(x))"
    },
    {
        "NL": "Every penguin eats fish they catch themselves.",
        "FOL": "\u2200x (Penguin(x) \u2192 EatsFishCaughtThemselves(x))"
    },
    {
        "NL": "All nonflying birds in Antarctica are penguins.",
        "FOL": "\u2200x (NonFlyingBirdAntartica(x) \u2192 Penguin(x))"
    },
    {
        "NL": "Fido is a penguin or a swimmer.",
        "FOL": "Penguin(fido) \u2228 Swimmer(fido)"
    },
    {
        "NL": "All professors are teachers.",
        "FOL": "\u2200x (Professor(x) \u2192 Teacher(x))"
    },
    {
        "NL": "All researchers are professors.",
        "FOL": "\u2200x (Researcher(x) \u2192 Professor(x))"
    },
    {
        "NL": "No teachers are students.",
        "FOL": "\u2200x (Teacher(x) \u2192 \u00acStudent(x))"
    },
    {
        "NL": "All people who study are students.",
        "FOL": "\u2200x (Study(x) \u2192 Student(x))"
    },
    {
        "NL": "Leon is not studying or a researcher.",
        "FOL": "\u00acStudy(leon) \u2295 Researcher(leon)"
    },
    {
        "NL": "If Leon is not studying, then Leon is a teacher.",
        "FOL": "\u00acStudy(leon) \u2192 Teacher(leon)"
    },
    {
        "NL": "A cutman is responsible for preventing and treating physical damage to a fighter.",
        "FOL": "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamage) \u2227 Treat(x, physicalDamage))"
    },
    {
        "NL": "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ",
        "FOL": "\u2200x (Cutman(x) \u2192 Appear(x, boxing) \u2228 Appear(x, kickboxing) \u2228 Appear(x, mixedMartialBout))"
    },
    {
        "NL": "Cutmen typically handle swelling, nosebleeds and lacerations. ",
        "FOL": "\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleeds) \u2227 Handle(x, lacerations))"
    },
    {
        "NL": "Jack is a cutman.",
        "FOL": "Cutman(jack)"
    },
    {
        "NL": "The Mona Lisa is one of the world's best-known artworks.",
        "FOL": "Painting(monaLisa) \u2227 WorldsBestKnown(monaLisa)"
    },
    {
        "NL": "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
        "FOL": "PaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)"
    },
    {
        "NL": "Leonardo da Vinci was a scientist and painter.",
        "FOL": "Scientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)"
    },
    {
        "NL": "Painting genres are history, portrait, animal, landscape, and still life.",
        "FOL": "\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))"
    },
    {
        "NL": "No professional tennis umpires are professional tennis players.",
        "FOL": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))"
    },
    {
        "NL": "If you are a World Tour player, then you are a professional tennis player.",
        "FOL": "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))"
    },
    {
        "NL": "All Grand Slam champions are World Tour players.",
        "FOL": "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))"
    },
    {
        "NL": "All Grand Slam umpires are professional tennis umpires.",
        "FOL": "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))"
    },
    {
        "NL": "Nadal is a World Tour player or a Grand Slam champion",
        "FOL": "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)"
    },
    {
        "NL": "Buisnesses are either sanctioned or unsanctioned.",
        "FOL": "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))"
    },
    {
        "NL": "Sanctioned buisnesses are limited.",
        "FOL": "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))"
    },
    {
        "NL": "Unsanctioned buisnesses are free.",
        "FOL": "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))"
    },
    {
        "NL": "The Crude Oil Data Exchange is a buisness that isn't free.",
        "FOL": "Buisness(crudeoildataexchange) \u2227 \u00acFree(crudeoildataexchange)"
    },
    {
        "NL": "When something is depressing, it is sad.",
        "FOL": "\u2200x (Depressing(x) \u2192 Sad(x))"
    },
    {
        "NL": "V is depressing. ",
        "FOL": "\u2200x (V(x) \u2192 Depressing(x))"
    },
    {
        "NL": "Palstaves are a type of early bronze axe.",
        "FOL": "\u2200x (Palstave(x) \u2192 From(x, earlybronzeage) \u2227 Axe(x))"
    },
    {
        "NL": "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.",
        "FOL": "\u2200x \u2200y (Palstave(x) \u2227 Mould(y) \u2192 FoundIn(x, northerneurope) \u2227 FoundIn(x, westerneurope) \u2227 FoundIn(x, south-westerneurope) \u2227 CastIn(x, y))"
    },
    {
        "NL": "John Evans is an archeologist who popularized the term \"palstave\".",
        "FOL": "Archeologist(johnevans) \u2227 Popularized(johnevans, termpalstave)"
    },
    {
        "NL": "A paalstab is not an axe, but rather a digging shovel.",
        "FOL": "\u2200x (Paalstab(x) \u2192 \u00acAxe(x) \u2227 DiggingShovel(x))"
    },
    {
        "NL": "Koei Tecmo is a Japanese video game and anime holding company.",
        "FOL": "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)"
    },
    {
        "NL": "Holding companies hold several companies.",
        "FOL": "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))"
    },
    {
        "NL": "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "FOL": "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)"
    },
    {
        "NL": "Video game holding companies are holding companies.",
        "FOL": "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))"
    },
    {
        "NL": "The PlayStation EyeToy is a camera accessory for the Playstation 2. ",
        "FOL": "Accessory(pseyetoy, ps2)"
    },
    {
        "NL": "The PlayStation Eye is a camera accessory for the Playstation 3.",
        "FOL": "Accessory(pseye, ps3)"
    },
    {
        "NL": "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.",
        "FOL": "Accessory(pscamera, ps4) \u2227 Accessory(pscamera, ps5)"
    },
    {
        "NL": "Camera accessory for the system is compatible with that system",
        "FOL": "\u2200x \u2200y (Accessory(x, y) \u2192 Compatible(x, y))"
    },
    {
        "NL": "Only the Playstation Camera is compatible with more than one system.",
        "FOL": "\u00acCompatible(pseye, ps2) \u2227 \u00acCompatible(pseye, ps4)\u2227\u00acCompatible(pseye, ps5)\u2227\u00acCompatible(pseyetoy, ps3)\u2227\u00acCompatible(pseyetoy, ps4)\u2227\u00acCompatible(pseyetoy, ps5)"
    },
    {
        "NL": "Adam Buska is a European football player.",
        "FOL": "FootballPlayer(adambuska) \u2227 European(adambuska)"
    },
    {
        "NL": "If a European plays football, they play what Americans call soccer.",
        "FOL": "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))"
    },
    {
        "NL": "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "FOL": "\u2200x (SoldMillion(x) \u2192 BestSeller(x))"
    },
    {
        "NL": "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "FOL": "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))"
    },
    {
        "NL": "Some games published before 2010 support the Linux OS system. ",
        "FOL": "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))"
    },
    {
        "NL": "All games on the Best Seller list are popular among young people. ",
        "FOL": "\u2200x (BestSeller(x) \u2192 Popular(x))"
    },
    {
        "NL": "FIFA22 neither supports the Linux OS system nor is it popular among young people.",
        "FOL": "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))"
    },
    {
        "NL": "China is one of BRICS and its economy is emerging.",
        "FOL": "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))"
    },
    {
        "NL": "India is one of BRICS and its economy is emerging.",
        "FOL": "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))"
    },
    {
        "NL": "All people from China speak Chinese.",
        "FOL": "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))"
    },
    {
        "NL": "All people from India speak Hindi or English.",
        "FOL": "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))"
    },
    {
        "NL": "There is an Indian.",
        "FOL": "\u2203x \u2203y (From(x, y) \u2227 India(y))"
    },
    {
        "NL": "Daveed Diggs is an actor and film producer.",
        "FOL": "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)"
    },
    {
        "NL": "Daveed Diggs played two roles in the musical Hamilton.",
        "FOL": "PlayedTwoRoles(daveedDiggs) \u2227 PlayedIn(daveedDiggs, hamilton) \u2227 Musical(hamilton)"
    },
    {
        "NL": "One of the actors from Hamilton won the best actor award.",
        "FOL": "\u2203x (Actor(x) \u2227 PlayedIn(x, hamilton) \u2227 WonBestActorAward(x))"
    },
    {
        "NL": "The actor playing Thomas Jefferson won the best actor award.",
        "FOL": "\u2200x (Actor(x) \u2227 Played(x, thomasJefferson) \u2192 WonBestActorAward(x))"
    },
    {
        "NL": "Daveed Diggs played Thomas Jefferson.",
        "FOL": "Played(daveedDiggs, thomasJefferson)"
    },
    {
        "NL": "Musicals are not films.",
        "FOL": "\u2200x (Musical(x) \u2192 \u00acFilm(x))"
    },
    {
        "NL": "Ernest Pohl was a Polish football player. ",
        "FOL": "PolishFootballPlayer(ernestpohl)"
    },
    {
        "NL": "A football player in the Polish First Division has scored over 180 goals. ",
        "FOL": "\u2203x (In(x, polishfirstdivision) \u2227 ScoredMoreThan180Goals(x))"
    },
    {
        "NL": "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
        "FOL": "ScoredMoreThan180Goals(ernestpohl) \u2227 In(ernestpohl, polishfirstdivision)"
    },
    {
        "NL": "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ",
        "FOL": "\u2203x (NamedAfter(gornikzabrze, x) \u2227 FootballPlayer(x) \u2227 From(x, rudaslaska))"
    },
    {
        "NL": "Ernest Pohl is from Ruda \u015al\u0105ska. ",
        "FOL": "From(ernestpohl, rudaslaska)"
    },
    {
        "NL": "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.",
        "FOL": "PhiladephiaCouncil(annJLand) \u2227 DemocraticParty(annJLand)"
    },
    {
        "NL": "Ann J. Land ran unopposed for the Philadephia City Council in 1980.",
        "FOL": "Year(y1980) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand)"
    },
    {
        "NL": "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.",
        "FOL": "\u2200x (RunFor(x) \u2227 PhiladephiaCouncil(x) \u2192 Elected(x))"
    },
    {
        "NL": "Michael Nutter was a political challenger.",
        "FOL": "Challenger(nutter)"
    },
    {
        "NL": "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.",
        "FOL": "Year(y1987) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand) \u2227 Defeated(annJLand, nutter)"
    },
    {
        "NL": "Aberdeen won the cup in the 2013 final.",
        "FOL": "WonCup(aberdeen, twentythirteen)"
    },
    {
        "NL": "Rangers won the cup in 2014 final.",
        "FOL": "WonCup(rangers, twentyfourteen)"
    },
    {
        "NL": "Aberdeen and Rangers are different teams.",
        "FOL": "Different(aberdeen, rangers) \u2227 Different(rangers, aberdeen)"
    },
    {
        "NL": "Different teams cannot win the same cup in a given year's final.",
        "FOL": "\u2200x \u2200y \u2200z (Different(x, y)  \u2227 WonCup(x, z)  \u2192 \u00acWonCup(y, z))"
    },
    {
        "NL": "All young working professionals who have regular 9-5 jobs also have pets.",
        "FOL": "\u2200x (Working(x) \u2192 Pets(x))"
    },
    {
        "NL": "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
        "FOL": "\u2203x (Manhattan(x) \u2227 Working(x))"
    },
    {
        "NL": "All people who have pets are people who have at least one child.",
        "FOL": "\u2200x (Pets(x) \u2192 Child(x))"
    },
    {
        "NL": "People who do not have at least one child are people who own a sports car.",
        "FOL": "\u2200x (Child(x) \u2192 \u00acCar(x))"
    },
    {
        "NL": "Mary either does not own a sports car or, if they do, then they do not have at least one child.",
        "FOL": "\u00ac(Car(mary) \u2295 Child(mary))"
    },
    {
        "NL": "Either block design or event-related design. ",
        "FOL": "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))"
    },
    {
        "NL": "All event-related designs are brain image acquisition.",
        "FOL": "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))"
    },
    {
        "NL": "All brain image acquisition is preceded by data processing.",
        "FOL": "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))"
    },
    {
        "NL": "Nothing preceded by data processing acquires data.",
        "FOL": "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))"
    },
    {
        "NL": "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.",
        "FOL": "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))"
    },
    {
        "NL": "The USS Lyon was a US Navy ship involved in WWII.",
        "FOL": "(USNavyShip(usslyon) \u2227 InWWII(usslyon))"
    },
    {
        "NL": "All ships involved in WWII are currently decommissioned or in a museum.",
        "FOL": "\u2200x (InWWII(x) \u2192 (Decommissioned(x) \u2228 InMuseum(x)))"
    },
    {
        "NL": "All disposable chopsticks are made from trees.",
        "FOL": "\u2200x (DisposableChopsticks(x) \u2192 MadeFromTrees(x))"
    },
    {
        "NL": "Some chopsticks are eco-friendly.",
        "FOL": "\u2203x (EcoFriendly(x))"
    },
    {
        "NL": "Either disposable chopsticks or reusable chopsticks. ",
        "FOL": "\u2200x (DisposableChopsticks(x) \u2295 Reusable(x)) "
    },
    {
        "NL": "If chopsticks are made from metals, then they are not made from plastics. ",
        "FOL": "\u2200x (MadeFromMetals(x) \u2192 \u00acMadeFromPlastics(x))"
    },
    {
        "NL": "All reusable chopsticks are made from metal.",
        "FOL": "\u2200x (Reusable(x) \u2192 MadeFromMetals(x))"
    },
    {
        "NL": "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.",
        "FOL": "\u00ac(MadeFromMetals(chopsticksAtRestaurants) \u2295 MadeFromPlastics(chopsticksAtRestaurants))"
    },
    {
        "NL": "Anything that is lazy is unproductive.",
        "FOL": "\u2200x (Lazy(x) \u2192 Unproductive(x))"
    },
    {
        "NL": "No one unproductive is an energetic person.",
        "FOL": "\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))"
    },
    {
        "NL": "If something is a sloth, then it is lazy.",
        "FOL": "\u2200x (Sloth(x) \u2192 Lazy(x))"
    },
    {
        "NL": "Some animals are sloths.",
        "FOL": "\u2203x (Animal(x) \u2227 Sloth(x))"
    },
    {
        "NL": "Sid is not either an energetic person or a sloth.",
        "FOL": "\u00acEnergetic(sid) \u2228 Sloth(sid)"
    },
    {
        "NL": "European soccer clubs can attend UCL, UEL and UECL.",
        "FOL": "\u2200x (European(x) \u2227 SoccerClub(x) \u2192 Attend(x, ucl) \u2228 Attend(x, uel) \u2228 Attend(x, uecl))"
    },
    {
        "NL": "A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.",
        "FOL": "\u2200x \u2200y (SoccerClub(x) \u2227 SoccerClub(y) \u2227 Attend(x, ucl) \u2227 Attend(y, uel) \u2192 HigherRank(x, y))"
    },
    {
        "NL": "A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.",
        "FOL": "\u2200x \u2200y (SoccerClub(x) \u2227 SoccerClub(y) \u2227 Attend(x, uel) \u2227 Attend(y, uecl) \u2192 HigherRank(x, y))"
    },
    {
        "NL": "Manchester United and Machester City are both European soccer clubs.",
        "FOL": "European(manchesterunited) \u2227 SoccerClub(manchesterunited) \u2227 European(manchestercity) \u2227 SoccerClub(manchestercity)"
    },
    {
        "NL": "Manchester United is eligible to attend UEL next season.",
        "FOL": "Attend(manchesterunited, uel)"
    },
    {
        "NL": "Manchester City is eligible to attend UCL next season.",
        "FOL": "Attend(manchestercity, ucl)"
    },
    {
        "NL": "If a person coach a football club, the person is a football coach.",
        "FOL": "\u2200x \u2200y (Coach(x, y) \u2227 IsFootballClub(y) \u2192 IsFootballCoach(x))"
    },
    {
        "NL": "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.",
        "FOL": "\u2200x \u2200y \u2200z (PlayFor(x, y) \u2227 NFLTeamYear(y, z) \u2227 InTeam(x, z) \u2192 PlayInNFL(x))"
    },
    {
        "NL": "Minnesota Vikings is a football club.",
        "FOL": "IsFootballClub(minnesota_Vikings)"
    },
    {
        "NL": "Dennis Green coached Minnesota Vikings.",
        "FOL": "Coach(dennis_Green, minnesota_Vikings)"
    },
    {
        "NL": "Cris Carter had 13 touchdown receptions.",
        "FOL": "TouchDownReceptionTime(cris_Carter, t13)"
    },
    {
        "NL": "Minnesota Vikings was in the National Football League in 1997.",
        "FOL": "NFLTeamYear(minnesota_Vikings, y1997)"
    },
    {
        "NL": "John Randle was Minnesota Vikings defensive tackle in 1997.",
        "FOL": "Position(john_Randle, defensive_tackle) \u2227 InTeam(john_Randle, y1997) \u2227 PlayFor(john_Randle, minnesota_Vikings)"
    },
    {
        "NL": "All cats are cute.",
        "FOL": "\u2200x (Cat(x) \u2192 Cute(x))"
    },
    {
        "NL": "Nothing that barks is lovely. ",
        "FOL": "\u2200x (Bark(x) \u2192 \u00acLovely(x))"
    },
    {
        "NL": "If something is a dog, then it barks.",
        "FOL": "\u2200x (Dog(x) \u2192 Bark(x))"
    },
    {
        "NL": "Grace is either a cat and a dog, or neither a cat nor a dog.",
        "FOL": "(Cat(grace) \u2227 Dog(grace)) \u2295 (\u00acCat(grace) \u2227 \u00acDog(grace))"
    },
    {
        "NL": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.",
        "FOL": "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)"
    },
    {
        "NL": "Baku is northwest of Shafaq-Asiman.",
        "FOL": "NorthwestOf(baku, shafaq-asiman)"
    },
    {
        "NL": "If place A is northwest of place B, then place B is southeast of place A.",
        "FOL": "\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))"
    },
    {
        "NL": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
        "FOL": "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 GymnasticMaster(herodicus)"
    },
    {
        "NL": "Herodicus was born in the city of Selymbria.",
        "FOL": "Born(herodicus, selymbia) \u2227 City(selymbia)"
    },
    {
        "NL": "Selymbria is a colony of the city-state Megara.",
        "FOL": "Colony(selymbia, megara) \u2227 CityState(megara)"
    },
    {
        "NL": "One of the tutors of Hippocrates was Herodicus.",
        "FOL": "Tutored(herodicus, hippocrates)"
    },
    {
        "NL": "Massages were recommended by Herodicus.",
        "FOL": "Recommended(herodicus, massages)"
    },
    {
        "NL": "Some of theories of Herodicus are considered to be the foundation of sports medicine.",
        "FOL": "\u2203x (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine))"
    },
    {
        "NL": "No kid loves the Opera.",
        "FOL": "\u2200x (Kid(x) \u2192 \u00acOperaLover(x))"
    },
    {
        "NL": "All adults love the Opera.",
        "FOL": "\u2200x (Adult(x) \u2192 OperaLover(x))"
    },
    {
        "NL": "If someone is a scientist, then they are an adult.",
        "FOL": "\u2200x (Scientist(x) \u2192 Adult(x))"
    },
    {
        "NL": "Some students are kids.",
        "FOL": "\u2203x (Student(x) \u2227 Kid(x))"
    },
    {
        "NL": "Billy is a kid.",
        "FOL": "Kid(billy)"
    },
    {
        "NL": "Brian Winter is a Scottish football referee.",
        "FOL": "Scottish(brianwinter) \u2227 FootballReferee(brianwinter)"
    },
    {
        "NL": "After being injured, Brian Winter retired in 2012.",
        "FOL": "Injured(brianwinter) \u2227 Retired(brianwinter)"
    },
    {
        "NL": "Brian Winter was appointed as a referee observer after his retirement.",
        "FOL": "RefereeObserver(brianwinter)"
    },
    {
        "NL": "Some football referees become referee observers.",
        "FOL": "\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))"
    },
    {
        "NL": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.",
        "FOL": "Son(andywinter, brianwinter) \u2227 FootballPlayer(andywinter) \u2227 PlaysFor(andywinter, hamiltonacademical)"
    },
    {
        "NL": "People are either interested in puzzles or bad at chess.",
        "FOL": "\u2200x (Puzzles(x) \u2228 BadChess(x))"
    },
    {
        "NL": "If a person is bad at chess, then they don't play a lot of chess.",
        "FOL": "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))"
    },
    {
        "NL": "A person is either a planner or a creative person.",
        "FOL": "\u2200x (Plans(x) \u2228 Creative(x))"
    },
    {
        "NL": "Erica is someone who plays a lot of chess.",
        "FOL": "PlaysLots(erica)"
    },
    {
        "NL": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.",
        "FOL": "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))"
    },
    {
        "NL": "Soccer players have a right foot and a left foot.",
        "FOL": "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))"
    },
    {
        "NL": "Top soccer players are soccer players who can use their both feet very efficiently.",
        "FOL": "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))"
    },
    {
        "NL": "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.",
        "FOL": "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))"
    },
    {
        "NL": "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.",
        "FOL": "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))"
    },
    {
        "NL": "Cristiano Ronaldo is a soccer player.",
        "FOL": "SoccerPlayer(ronaldo)"
    },
    {
        "NL": "Cristiano Ronaldo can use his right foot very efficiently.",
        "FOL": "Efficient(ronaldo, right)"
    },
    {
        "NL": "Cristiano Ronaldo have scored more than one hundred goals using his left foot.",
        "FOL": "ScoreManyGoals(ronaldo, left)"
    },
    {
        "NL": "The National Lobster Hatchery is a hatchery located in Padstow England.",
        "FOL": "Hatchery(nationallobsterhatchery) \u2227 LocatedIn(nationallobsterhatchery, padstowengland)"
    },
    {
        "NL": "The National Lobster Hatchery is open to visitors.",
        "FOL": "OpenToVisitors(nationallobsterhatchery)"
    },
    {
        "NL": "A hatchery is either for profit, or for conservation.",
        "FOL": "\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2228 ForProfit(x))"
    },
    {
        "NL": "If a hatchery is for conservation, it might release animals into the wild.",
        "FOL": "\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleasesAnimalsToWild(x))"
    },
    {
        "NL": "The National Lobster Hatchery is not for profit.",
        "FOL": "\u00acForProfit(nationallobsterhatchery)"
    },
    {
        "NL": "Rhos Aelwyd F.C. is a Welsh football club.",
        "FOL": "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))"
    },
    {
        "NL": "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
        "FOL": "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))"
    },
    {
        "NL": "The Premier Division was won in 2005\u201306 by a team from Ponciau. ",
        "FOL": "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))"
    },
    {
        "NL": "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.",
        "FOL": "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))"
    },
    {
        "NL": "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. ",
        "FOL": "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))"
    },
    {
        "NL": "All OS are software.",
        "FOL": "\u2200x (OS(x) \u2192 Software(x))"
    },
    {
        "NL": "All Mac are OS.",
        "FOL": "\u2200x (Mac(x) \u2192 OS(x))"
    },
    {
        "NL": "An OS is either Mac or Windows.",
        "FOL": "\u2200x (Mac(x) \u2228 Windows(x))"
    },
    {
        "NL": "All Windows are convenient.",
        "FOL": "\u2200x (Windows(x) \u2192 Convenient(x))"
    },
    {
        "NL": "All software has code.",
        "FOL": "\u2200x (Software(x) \u2192 Code(x))"
    },
    {
        "NL": "If something is convenient, then it is popular.",
        "FOL": "\u2200x (Convenient(x) \u2192 Popular(x))"
    },
    {
        "NL": "PyTorch is either Windows and software, or neither Windows nor software.",
        "FOL": "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))"
    },
    {
        "NL": "Roads made of concrete last longer than roads made with asphalt.",
        "FOL": "\u2200x \u2200y (Road(x) \u2227 MadeOfConcrete(x) \u2227 Road(y) \u2227 MadeOfAsphalt(y) \u2192 LastLonger(x, y))"
    },
    {
        "NL": "Roads made of asphalt are smoother than roads made of concrete.",
        "FOL": "\u2200x \u2200y (Road(x) \u2227 MadeOfAsphalt(x) \u2227 Road(y) \u2227 MadeOfConcrete(y) \u2192 Smoother(x, y))"
    },
    {
        "NL": "Everyone prefers the smoother of two roads. ",
        "FOL": "\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefers(z, x))"
    },
    {
        "NL": "Road one is made of concrete and Road two is made of asphalt.",
        "FOL": "Road(one) \u2227 MadeOfConcrete(one) \u2227 Road(two) \u2227 MadeOfAsphalt(two)"
    },
    {
        "NL": "Camp Davern is a traditional summer camp for boys and girls.",
        "FOL": "TraditionalSummerCamp(campdavern) \u2227 ForBoysAndGirls(campdavern)"
    },
    {
        "NL": "Camp Davern was established in the year 1946.",
        "FOL": "EstablishedIn(campdavern, year1946)"
    },
    {
        "NL": "Camp Davern was operated by the YMCA until the year 2015.",
        "FOL": "OperatedByYMCAUntil(campdavern, year2015)"
    },
    {
        "NL": "Camp Davern is one of Ontario's oldest summer camps.",
        "FOL": "OneOf(campdavern, ontariosoldestsummercamps)"
    },
    {
        "NL": "If people publish journals, then they do not work in the entertainment industry.",
        "FOL": "\u2200x (PublishJournals(x) \u2192 \u00acEntertainment(x))"
    },
    {
        "NL": "All people who are award-winning novelists publish journals.",
        "FOL": "\u2200x (Novelist(x) \u2192 PublishJournals(x))"
    },
    {
        "NL": "People either work in the entertainment industry or are highly acclaimed in their profession.",
        "FOL": "\u2200x (Entertainment(x) \u2228 Acclaimed(x))"
    },
    {
        "NL": "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.",
        "FOL": "\u2200x (Acclaimed(x) \u2192 Tenured(x))"
    },
    {
        "NL": "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.",
        "FOL": "\u2200x (Acclaimed(x) \u2192 Glowing(x))"
    },
    {
        "NL": "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. ",
        "FOL": "(Acclaimed(emily) \u2227 Tenured(emily)) \u2228 (\u00acAcclaimed(emily) \u2227 \u00acTenured(emily)) \u2192 \u00acAcclaimed(emily)"
    },
    {
        "NL": "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.",
        "FOL": "YoungAdultFantasyNovel(thickastheives) \u2227 WrittenBy(thickastheives, megan)"
    },
    {
        "NL": "Thick as Thieves was published by Greenwillow Books.",
        "FOL": "PublishedBy(thickastheives, greenwillowbooks)"
    },
    {
        "NL": "If a book was published by a company, than the author of that book worked with the company that published the book.",
        "FOL": "\u2200x \u2200y \u2200z (WrittenBy(x, y) \u2227 PublishedBy(x, z) \u2192 WorkedWith(y, z))"
    },
    {
        "NL": "The fictional Mede Empire is where Thick as Thieves is set.",
        "FOL": "Fictional(medeempire) \u2227 SetIn(thickastheives, medeempire)"
    },
    {
        "NL": "Attolia and Sounis are countries near the Mede Empire.",
        "FOL": "Country(attolia) \u2227 Nearby(medeempire, attolia) \u2227 Country(sounis) \u2227 Nearby(medeempire, sounis)"
    },
    {
        "NL": "Thick as Thieves was sold both as a hardcover and an e-book.",
        "FOL": "SoldAs(thickastheives, hardcover) \u2227 SoldAs(thickastheives, softcover)"
    },
    {
        "NL": "WeTab is a MeeGo-based tablet computer.",
        "FOL": "\u2200x (WeTab(x) \u2192 MeeGoBased(x) \u2227 TabletComputer(x))"
    },
    {
        "NL": "There is a WeTab product.",
        "FOL": "\u2203x (WeTab(x))"
    },
    {
        "NL": "WeTab was announced by Neofonie.",
        "FOL": "\u2200x (WeTab(x) \u2192 Announce(neofonie, x))"
    },
    {
        "NL": "Neofonie is a German producer.",
        "FOL": "German(neofonie) \u2227 Producer(neofonie)"
    },
    {
        "NL": "Germans speak English or German.",
        "FOL": "\u2200x (German(x) \u2192 Speak(x, english) \u2228 Speak(x, german))"
    },
    {
        "NL": "Some employees working in business analysis are good at math. ",
        "FOL": "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))"
    },
    {
        "NL": "All employees working in business analysis are working in this company. ",
        "FOL": "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))"
    },
    {
        "NL": "No employees working in this company are from China. ",
        "FOL": "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))"
    },
    {
        "NL": "All employees working in software engineering are from China. ",
        "FOL": "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))"
    },
    {
        "NL": "James is working in software engineering. ",
        "FOL": "SoftwareEngineering(james)"
    },
    {
        "NL": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.",
        "FOL": "Party(strawberry) \u2228 Party(orange) \u2228 Party(blueberry) \u2228 Party(grape) \u2228 Party(cherry) "
    },
    {
        "NL": "All fruits are provided in the same weight at the beginning of the party.",
        "FOL": "\u2200x (Party(x) \u2192 SameWeight(x))"
    },
    {
        "NL": "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.",
        "FOL": "\u2200x (LowestAmount(x) \u2192 MostPopular(x)) "
    },
    {
        "NL": "At the end of the party, strawberries had the lowest remaining weight.",
        "FOL": "LowestAmount(strawberries)"
    },
    {
        "NL": "At the end of the party, the amount of leftover blueberries was lower than that of cherries.",
        "FOL": "Lower(blueberry, cherry)"
    },
    {
        "NL": "Benjamin only ate oranges and grapes at the party.",
        "FOL": "Eat(orange, benjamin) \u2227 Eat(grape, benjamin) \u2227 \u00acEat(blueberry, benjamin) \u2227 \u00acEat(cherry, benjamin) \u2227 \u00acEat(strawberry, benjamin)"
    },
    {
        "NL": "All students who attend in person have registered for the conference. ",
        "FOL": "\u2200x (Attend(x) \u2192 Registered(x))"
    },
    {
        "NL": "Students either attend the conference in person or remotely. ",
        "FOL": "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))"
    },
    {
        "NL": "No students from China attend the conference remotely. ",
        "FOL": "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))"
    },
    {
        "NL": "James attends the conference but he does not attend the conference remotely.",
        "FOL": "Attend(james) \u2227 \u00acRemotely(james)"
    },
    {
        "NL": "Jack attends the conference and he is a student from China.",
        "FOL": "China(jack) \u2227 Attend(jack)"
    },
    {
        "NL": "David Ha'ivri is a political strategist. ",
        "FOL": "PoliticalStrategist(davidhaivri)"
    },
    {
        "NL": "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ",
        "FOL": "\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(x, y) \u2227 Israeli(y) \u2192 IsraeliCitizen(x))"
    },
    {
        "NL": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ",
        "FOL": "\u2203x (EmigratedTo(davidhaivri, america) \u2227 BornInIsrael(davidhaivri) \u2227 ParentOf(davidhaivri, x) \u2227 Israeli(x))"
    },
    {
        "NL": "Several Zionist leaders have been elected to the Shomron Regional Municipal council. ",
        "FOL": "\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronmunicipalcouncil))"
    },
    {
        "NL": "David Ha'ivri is a Zionist leader. ",
        "FOL": "ZionstLeader(davidhaivri)"
    },
    {
        "NL": "Mary has the flu.",
        "FOL": "Have(mary, flu)"
    },
    {
        "NL": "Flu and influenza are the same disease.",
        "FOL": "\u2200x (Have(x, flu) \u2194 Have(x, influenza))"
    },
    {
        "NL": "Susan doesn't have influenza.",
        "FOL": "\u00acHave(susan, influenza)"
    },
    {
        "NL": "James Cocks was a British lawyer.",
        "FOL": "British(james) \u2227 Lawyer(james)"
    },
    {
        "NL": "James Cocks was a Whig politician who sat in the House of Commons.",
        "FOL": "Whig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)"
    },
    {
        "NL": "A British is a European.",
        "FOL": "\u2200x (British(x) \u2192 European(x))"
    },
    {
        "NL": "Any lawyer is familiar with laws.",
        "FOL": "\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))"
    },
    {
        "NL": "Some Whigs speak French.",
        "FOL": "\u2203x (Whig(x) \u2227 SpeakFrench(x))"
    },
    {
        "NL": "Beasts of Prey is either a fantasy novel or a science fiction novel.",
        "FOL": "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)"
    },
    {
        "NL": "Science fiction novels are not about mythological creatures",
        "FOL": "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))"
    },
    {
        "NL": "Beasts of Prey Is about a creature known as the Shetani.",
        "FOL": "About(beastsofprey, shetani) \u2227 Creature(shetani)"
    },
    {
        "NL": "Shetanis are mythological.",
        "FOL": "Mythological(shetani)"
    },
    {
        "NL": "Odell is an English surname originating in Odell, Bedfordshire.",
        "FOL": "\u2200x (Odell(x) \u2192 Surname(x))"
    },
    {
        "NL": "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.",
        "FOL": "\u2203x (Odell(x) \u2227 SpelledODell(x))"
    },
    {
        "NL": "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.",
        "FOL": "Odell(amyOdell) \u2227 NotablePeople(amyOdell) \u2227 Odell(jackOdell) \u2227 NotablePeople(jackOdell) \u2227 Odell(matsOdell) \u2227 NotablePeople(matsOdell)"
    },
    {
        "NL": "Amy Odell is a British singer-songwriter.",
        "FOL": "British(amyOdell) \u2227 Singer(amyOdell) \u2227 SongWriter(amyOdell)"
    },
    {
        "NL": "Jack Odell is an English toy inventor.",
        "FOL": "English(jackOdell) \u2227 ToyInvertor(jackOdell)"
    },
    {
        "NL": "If you go somewhere by train, you will not lose time.",
        "FOL": "\u2200x (Train(x) \u2192 \u00acLoseTime(x))"
    },
    {
        "NL": "If you go somewhere by car and meet traffic jam, you will lose time.",
        "FOL": "\u2200x ((Car(x) \u2227 MeetJam(x)) \u2192 LoseTime(x))"
    },
    {
        "NL": "If you lose time, you will be late for work.",
        "FOL": "\u2200x (LoseTime(x) \u2194 LateForWork(x))"
    },
    {
        "NL": "Mary can get from New Haven to New York City either by train or car.",
        "FOL": "Train(mary) \u2295 Car(mary)"
    },
    {
        "NL": "Mary is late for work.",
        "FOL": "LateForWork(mary)"
    },
    {
        "NL": "If a person is hungry, the person is uncomfortable.",
        "FOL": "\u2200x (Hungry(x) \u2192 Uncomfortable(x))"
    },
    {
        "NL": "If a person is uncomfortable, the person is unhappy.",
        "FOL": "\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))"
    },
    {
        "NL": "Tipped employees do not get a guaranteed minimum wage.",
        "FOL": "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))"
    },
    {
        "NL": "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
        "FOL": "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))"
    },
    {
        "NL": "All lawyers are white-collar workers.",
        "FOL": "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))"
    },
    {
        "NL": "Every advocate is a lawyer.",
        "FOL": "\u2200x (Advocate(x) \u2192 Lawyer(x))"
    },
    {
        "NL": "Mary is not a lawyer or a tipped employee.",
        "FOL": "\u00acLawyer(mary) \u2295 Tipped(mary)"
    },
    {
        "NL": "Asa Hoffmann was born in New York City.",
        "FOL": "BornIn(asaHoffmann, newyorkcity)"
    },
    {
        "NL": "Asa Hoffman lives in Manhattan.",
        "FOL": "LivesIn(asaHoffmann, manhattan)"
    },
    {
        "NL": "Asa Hoffman is a chess player.",
        "FOL": "IsChessPlayer(asaHoffmann)"
    },
    {
        "NL": "Some chess players are grandmasters.",
        "FOL": "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))"
    },
    {
        "NL": "People born and living in New York City are New Yorkers.",
        "FOL": "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))"
    },
    {
        "NL": "People liviing in Manhattan live in New York City.",
        "FOL": "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))"
    },
    {
        "NL": "Some of those who apply for a Schengen Visa get it.",
        "FOL": "\u2203x (ApplyVisa(x) \u2192 GetVisa(x))"
    },
    {
        "NL": "To apply for a Schengen Visa, you need to provide financial guarantees.",
        "FOL": "\u2200x (ApplyVisa(x) \u2192 FinancialGuarantees(x))"
    },
    {
        "NL": "If you need to provide financial guarantees, you must request documents from the bank.",
        "FOL": "\u2200x (FinancialGuarantees(x) \u2192 RequestDocuments(x))"
    },
    {
        "NL": "Do not close your bank account if you request documents from the bank.",
        "FOL": "\u2200x (RequestDocuments(x) \u2192 \u00acCloseBankAccount(x))"
    },
    {
        "NL": "Philip closed his bank account.",
        "FOL": "CloseBankAccount(philip)"
    },
    {
        "NL": "Some fears lead to anxiety.",
        "FOL": "\u2203x (Fear(x) \u2227 Anxiety(x))"
    },
    {
        "NL": "Some anxiety leads to terror.",
        "FOL": "\u2203x (Anxiety(x) \u2227 Terror(x))"
    },
    {
        "NL": "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.",
        "FOL": "\u2200x (GreatLake(x) \u2192 Superior(x) \u2228 Michigan(x) \u2228 Huron(x) \u2228 Erie(x) \u2228 Ontario(x))"
    },
    {
        "NL": "Some major settlements of Lake Erie are in NY, PA, OH, and MI.",
        "FOL": "\u2203x \u2200y (Erie(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, ny) \u2228 In(x, pa) \u2228 In(x, oh) \u2228 In(x, mi))"
    },
    {
        "NL": "NY, PA, OH, MI are states in the US.",
        "FOL": "State(ny, us) \u2227 State(pa, us) \u2227 State(oh, us) \u2227 State(mi, us)"
    },
    {
        "NL": "ON is a state of Canada.",
        "FOL": "State(on, canada)"
    },
    {
        "NL": "There is a major settlement of Lake Huron in ON. ",
        "FOL": "\u2203x \u2200y (Huron(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, on))"
    },
    {
        "NL": "All states are in their country.",
        "FOL": "\u2200x \u2200y (State(x, y) \u2192 In(x, y))"
    },
    {
        "NL": "The US is in North America.",
        "FOL": "In(us, northamerica)"
    },
    {
        "NL": "The Great Lakes began to form at the end of the Last Glacial Period.",
        "FOL": "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastglacialperiod))"
    },
    {
        "NL": "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.",
        "FOL": "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))"
    },
    {
        "NL": "Naive cynicism was proposed by Justin Kruger and a colleague.",
        "FOL": "Proposed(justinKruger, naiveCynicism) \u2227 Proposed(colleagueOfJustinKruger, naiveCynicism) "
    },
    {
        "NL": "Thomas Gilovich is a colleague of Justin Kruger. ",
        "FOL": "Colleague(thomasGilovich, justinKruger)"
    },
    {
        "NL": "Naive cynicism is a philosophy of mind.",
        "FOL": "PhilosophyOfMind(naiveCynicism)"
    },
    {
        "NL": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
        "FOL": "TuringAwarded(donaldKnuth) \u2227 TuringAwarded(marvinMinsky) \u2227 TuringAwarded(richardHamming) \u2227 TuringAwarded(johnMccarthy)"
    },
    {
        "NL": "Donald Knuth made major contributions to the analysis of algorithms.",
        "FOL": "ContributedTo(donaldKnuth, algorithms)"
    },
    {
        "NL": "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.",
        "FOL": "ContributedTo(marvinMinsky, ai)"
    },
    {
        "NL": "Richard Hamming did research on numerical methods.",
        "FOL": "ContributedTo(richardHamming, numericalMethods)"
    },
    {
        "NL": "John McCarthy had a central role in creating and shaping the field of artificial inteligence. ",
        "FOL": "ContributedTo(johnMccarthy, ai)"
    },
    {
        "NL": "No easy Leetcode problems have an AC rate lower than 20 percent. ",
        "FOL": "\u2200x (Easy(x) \u2192 \u00acLowerAC(x))"
    },
    {
        "NL": "All Leetcode problems recommended to novices are easy.                                                                                                       ",
        "FOL": "\u2200x (Recommended(x) \u2192 Easy(x))"
    },
    {
        "NL": "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ",
        "FOL": "\u2200x (LowerAC(x) \u2295 Starred(x))"
    },
    {
        "NL": "All hard Leetcode problems are starred by more than 1 thousand users. ",
        "FOL": "\u2200x (Hard(x) \u2192 Starred(x))"
    },
    {
        "NL": "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ",
        "FOL": "\u2200x (PublishedAfter2022(x) \u2192 \u00acStarred(x))"
    },
    {
        "NL": "2Sum is not recommended to novices and hard. ",
        "FOL": "\u00ac(Recommended(twosum) \u2227 Hard(twosum))"
    },
    {
        "NL": "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ",
        "FOL": "\u00ac(Starred(foursum) \u2295 PublishedAfter2022(foursum))"
    },
    {
        "NL": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.",
        "FOL": "Song(showyourlove) \u2227 RecordedBy(showyourlove, btob4u) \u2227 SouthKorean(btob4u) \u2227 BoyBand(btob4u)"
    },
    {
        "NL": "The lead single of the extended play Inside is Show Your Love.",
        "FOL": "ExtendedPlay(inside) \u2227 LeadSingle(showyourlove) \u2227 LeadSingleOf(showyourlove, inside)"
    },
    {
        "NL": "Show Your Love contains a hopeful message.",
        "FOL": "Contains(showyourlove, hopefulmessage)"
    },
    {
        "NL": "BtoB 4u member Hyunsik wrote Show Your Love.",
        "FOL": "Member(hyunsik, btob4u) \u2227 Wrote(hyunsik, showyourlove)"
    },
    {
        "NL": "There is a music video for Show Your Love.",
        "FOL": "HasMusicVideo(showyourlove)"
    },
    {
        "NL": "All tables are round.",
        "FOL": "\u2200x (Table(x) \u2192 Round(x))"
    },
    {
        "NL": "Some furniture are tables.",
        "FOL": "\u2203x (Furniture(x) \u2227 Table(x))"
    },
    {
        "NL": "All juvenile delinquents are maladjusted individuals.",
        "FOL": "\u2200x (JuvenileDelinquent(x) \u2192 MaladjustedIndividual(x))"
    },
    {
        "NL": "Some juvenile delinquents are products of broken homes.",
        "FOL": "\u2203x (JuvenileDelinquent(x)  \u2227 ProductOfBrokenHome(x))"
    },
    {
        "NL": "Either brain reading or brain decoding. ",
        "FOL": "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) "
    },
    {
        "NL": "All brain decoding is extracting information from BOLD signals.",
        "FOL": "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))"
    },
    {
        "NL": "No extracting information from BOLD signals is without statistical pattern analysis. ",
        "FOL": "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))"
    },
    {
        "NL": "Writing a novel is without statistical pattern analysis.",
        "FOL": "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) "
    },
    {
        "NL": "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.",
        "FOL": "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)"
    },
    {
        "NL": "If you have room for dessert, you have room for broccoli.",
        "FOL": "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))"
    },
    {
        "NL": "Everyone at Luis's dinner party has room for dessert, including Luis.",
        "FOL": "\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))"
    },
    {
        "NL": "Mauricia does not have room for broccoli.",
        "FOL": "\u00acRoomFor(mauricia, broccoli)"
    },
    {
        "NL": "Luis's dinner party is the first ever dinner party that Allison has attended.",
        "FOL": "FirstDinnerParty(allison, luisparty) \u2227 AtLuisParty(allison)"
    },
    {
        "NL": "Gustave has room for both broccoli and asparagus.",
        "FOL": "RoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)"
    },
    {
        "NL": "Broccoli and asparagus are both vegetables.",
        "FOL": "Vegetable(broccoli) \u2227 Vegetable(asparagus)"
    },
    {
        "NL": "Imagine Dragons is an American pop rock band.",
        "FOL": "American(imagineDragon) \u2227 RockBand(imagineDragon)"
    },
    {
        "NL": "The lead singer of Imagine Dragons is Dan.",
        "FOL": "LeadSinger(imagineDragon, dan)"
    },
    {
        "NL": "Dan is also a songwriter.",
        "FOL": "SongWriter(dan)"
    },
    {
        "NL": "All lead singers are singers.",
        "FOL": "\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))"
    },
    {
        "NL": "All singers are musicians.",
        "FOL": "\u2200x (Singer(x) \u2192 Musician(x))"
    },
    {
        "NL": "Demons is one of the most popular singles of Imagine Dragons.",
        "FOL": "PopularSingle(imagineDragon, demons)"
    },
    {
        "NL": "Some singles of Imagine Dragons have been on Billboard Hot 100.",
        "FOL": "\u2203x (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x))"
    },
    {
        "NL": "All bread is food.",
        "FOL": "\u2200x (Bread(x) \u2192 Food(x))"
    },
    {
        "NL": "Some sandwiches are bread.",
        "FOL": "\u2203x (Sandwich(x) \u2227 Bread(x))"
    },
    {
        "NL": "All food is edible. ",
        "FOL": "\u2200x (Food(x) \u2192 Edible(x))"
    },
    {
        "NL": "No edible things are poisonous.",
        "FOL": "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))"
    },
    {
        "NL": "Deodorant is poisonous.",
        "FOL": "Poisonous(deodorant)"
    },
    {
        "NL": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
        "FOL": "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)"
    },
    {
        "NL": "Many apartment rents cover the cost of water and electricity.",
        "FOL": "\u2203x (Cover(x, water) \u2227 Cover(x, electricity))"
    },
    {
        "NL": "Susan lives in an apartment where the rent covers all utilities.",
        "FOL": "\u2200x (Cover(susan, x))"
    },
    {
        "NL": "The rent of the apartment where Ava lives does not cover any utility expenses.",
        "FOL": "\u2200x (\u00acCover(ava, x))"
    },
    {
        "NL": "Noah lives in an apartment where the rent does not cover heating.",
        "FOL": "\u00acCover(noah, heating)"
    },
    {
        "NL": "All clothes are products. ",
        "FOL": "\u2200x (Clothes(x) \u2192 Product(x))"
    },
    {
        "NL": "No products are perfect. ",
        "FOL": "\u2200x (Product(x) \u2192 \u00acPerfect(x))"
    },
    {
        "NL": "All dresses are clothes.",
        "FOL": "\u2200x (Dress(x) \u2192 Clothes(x))"
    },
    {
        "NL": "All skirts are dresses. ",
        "FOL": "\u2200x (Skirt(x) \u2192 Dress(x))"
    },
    {
        "NL": "If Nike is clothes, then Nike is perfect and a dress.",
        "FOL": "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)"
    },
    {
        "NL": "All pets are animals.",
        "FOL": "\u2200x (Pet(x) \u2192 Animal(x))"
    },
    {
        "NL": "Pets can be either a dog or a cat.",
        "FOL": "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))"
    },
    {
        "NL": "If a person has a pet, they care for that pet. ",
        "FOL": "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))"
    },
    {
        "NL": "Dogs and Cats can be naughty. ",
        "FOL": "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))"
    },
    {
        "NL": "Pets who are naughty are not liked as much. ",
        "FOL": "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))"
    },
    {
        "NL": "Charlie has a naughty pet dog named Leo. ",
        "FOL": "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)"
    },
    {
        "NL": "Surprises are either fun or dreadful.",
        "FOL": "\u2200x (Surprise(x) \u2192 (Fun(x) \u2295 Dreadful(x)))"
    },
    {
        "NL": "All scares are surprises.",
        "FOL": "\u2200x (Scare(x) \u2192 Surprise(x))"
    },
    {
        "NL": "All books written by Cixin Liu have sold more than 1 million copies. ",
        "FOL": "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))"
    },
    {
        "NL": "Some books that have won the Hugo Award were written by Cixin Liu.",
        "FOL": "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))"
    },
    {
        "NL": "All books about the future are influenced by Isaac Asimov.",
        "FOL": "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))"
    },
    {
        "NL": "The book the Three Body Problem has sold more than 1 million copies.",
        "FOL": "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)"
    },
    {
        "NL": "The Three Body Problem is about the future.",
        "FOL": "AboutFuture(threebodyproblem)"
    },
    {
        "NL": "Some students who major in computer science get up early. ",
        "FOL": "\u2203x (ComputerScience(x) \u2227 GetUpEarly(x))"
    },
    {
        "NL": "If a student gets up early, then he/she will study in the morning. ",
        "FOL": "\u2200x (GetUpEarly(x) \u2192 StudyMorning(x))"
    },
    {
        "NL": "All students studying in the morning are good at time management. ",
        "FOL": "\u2200x (StudyMorning(x) \u2192 GoodAtTimeManagement(x))"
    },
    {
        "NL": "All students good at time management are popular among students. ",
        "FOL": "\u2200x (GoodAtTimeManagement(x) \u2192 Popular(x))"
    },
    {
        "NL": "James is not popular among students. ",
        "FOL": "\u00acPopular(james)"
    },
    {
        "NL": "There is no dog on the roof.",
        "FOL": "\u00ac(\u2203x (Dog(x) \u2227 OnRoof(x)))"
    },
    {
        "NL": "If there is a dog on the roof something went wrong.",
        "FOL": "\u2200x \u2203y ((Dog(x) \u2227 OnRoof(x)) \u2192 WentWrong(y))"
    },
    {
        "NL": "Elephantopus is a genus of perennial plants in the daisy family.",
        "FOL": "\u2200x (Elephantopus(x) \u2192 Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily))"
    },
    {
        "NL": "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
        "FOL": "\u2200x (Elephantopus(x) \u2192 WidespreadOver(x, africa) \u2227 WidespreadOver(x, southernasia) \u2227 WidespreadOver(x, australia) \u2227 WidespreadOver(x, americas))"
    },
    {
        "NL": "Several species of Elephantopus are native to the southeastern United States.",
        "FOL": "\u2203x (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates))"
    },
    {
        "NL": "Elephantopus scaber is a traditional medicine.",
        "FOL": "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))"
    },
    {
        "NL": "All Yale dormitories are located on York Street. ",
        "FOL": "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))"
    },
    {
        "NL": "All buildings managed by Yale Housing are dormitories. ",
        "FOL": "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))"
    },
    {
        "NL": "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "FOL": "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))"
    },
    {
        "NL": "No buildings open to students are established after 1800. ",
        "FOL": "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))"
    },
    {
        "NL": "All buildings located on York Street are open to students. ",
        "FOL": "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))"
    },
    {
        "NL": "Harkness is either a building operated by Yale Housing staff or located on York Street. ",
        "FOL": "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)"
    },
    {
        "NL": "There are no mansion houses in an urban area.",
        "FOL": "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))"
    },
    {
        "NL": "All skyscrapers reside in urban areas.",
        "FOL": "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))"
    },
    {
        "NL": "Every creepy haunted house is in a mansion house.",
        "FOL": "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))"
    },
    {
        "NL": "Every terrifying Halloween scare comes from a creepy haunted house.",
        "FOL": "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))"
    },
    {
        "NL": "The Scream is a creepy haunted house or a terrifying Halloween scare.",
        "FOL": "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)"
    },
    {
        "NL": "Phuoc Binh national park is a national park in Vietnam. ",
        "FOL": "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)"
    },
    {
        "NL": "Any national park in Vietnam is classified as a nature reserve. ",
        "FOL": "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 NatureReserve(x))"
    },
    {
        "NL": "There is a national park in Vietnam classified as a UNESCO World Heritage Site.",
        "FOL": "\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))"
    },
    {
        "NL": "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ",
        "FOL": "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 Mangedby(x, ministryofAgriculture) \u2228 Mangedby(x, peoplesCommittee))"
    },
    {
        "NL": "Phuoc Binh is not managed by the Ministry of Agriculture.",
        "FOL": "\u00acMangedby(phuocBinh, ministryofAgriculture)"
    },
    {
        "NL": "Greyhound racing is a competitive sport where spectators bet on greyhounds.",
        "FOL": "\u2200x \u2203y (GreyhoundRacing(x) \u2192 CompetitiveSport(x) \u2227 Greyhound(y) \u2227 SpectatorsBetOn(x, y))"
    },
    {
        "NL": "Coursing is a part of Greyhound racing.",
        "FOL": "\u2200x (GreyhoundRacing(x) \u2194 Coursing(x))"
    },
    {
        "NL": "Some competitive sports where spectators bet on things are banned.",
        "FOL": "\u2203x \u2203y (CompetitiveSport(x) \u2227 SpectaorsBetOn(x, y) \u2227 Banned(x))"
    },
    {
        "NL": "Coursing involves spectators betting on a hare being pursued by greyhounds.",
        "FOL": "\u2200x \u2203y \u2203z (Coursing(x) \u2192 Hare(y) \u2227 SpectatorsBetOn(x, y) \u2227 GreyHound(z) \u2227 Pursue(z, y))"
    },
    {
        "NL": "Hares are small game.",
        "FOL": "\u2200x (Hare(x) \u2192 SmallGame(x))"
    },
    {
        "NL": "If a competitive sport involves spectators betting on small game, then it is banned.",
        "FOL": "\u2200x \u2203y (CompetitiveSport(x) \u2227 SmallGame(y) \u2227 SpectatorsBetOn(x, y) \u2192 Banned(x))"
    },
    {
        "NL": "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.",
        "FOL": "\u2200x (SoccerPlayer(x) \u2227 TwoYellow(x) \u2192 Eject(x))"
    },
    {
        "NL": "If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.",
        "FOL": "\u2200x (SoccerPlayer(x) \u2227 OneRed(x) \u2192 Eject(x))   "
    },
    {
        "NL": "Henry is a soccer player.",
        "FOL": "SoccerPlayer(henry)"
    },
    {
        "NL": "In one game, Henry first receives one yellow card, then he receives one red card.",
        "FOL": "\u00acTwoYellow(henry) \u2227 OneRed(henry)"
    },
    {
        "NL": "All trees are plants. ",
        "FOL": "\u2200x (Tree(x) \u2192 Plant(x))"
    },
    {
        "NL": "Some living things are trees.",
        "FOL": "\u2203x (Living(x) \u2227 Tree(x))"
    },
    {
        "NL": "Dagfinn is a given name.",
        "FOL": "\u2200x (Dagfinn(x) \u2192 GivenName(x))"
    },
    {
        "NL": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ",
        "FOL": "Dagfinn(dagfinnAarskog) \u2227 NotablePeople(dagfinnAarskog) \u2227 Dagfinn(dagfinnBakke) \u2227 NotablePeople(dagfinnBakke) \u2227 Dagfinn(dagfinnDahl) \u2227 NotablePeople(dagfinnDahl)"
    },
    {
        "NL": "Dagfinn Aarskog is a Norwegian physician.",
        "FOL": "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)"
    },
    {
        "NL": "Dagfinn Dahl is a Norwegian barrister.",
        "FOL": "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)"
    },
    {
        "NL": "If entertainment is interesting, it will be popular.",
        "FOL": "\u2200x ((Entertainment(x) \u2227 Interesting(x)) \u2192 Popular(x))"
    },
    {
        "NL": "All popular things are well-known.",
        "FOL": "\u2200x (Popular(x) \u2192 WellKnown(x))"
    },
    {
        "NL": "It is not true that some giant language models do not have good performance. ",
        "FOL": "\u00ac(\u2203x (LanguageModel(x) \u2227 Giant(x) \u2227 \u00acGoodPerformance(x)))"
    },
    {
        "NL": "All language models with good performance are used by some researchers.",
        "FOL": "\u2200x ((LanguageModel(x) \u2227 GoodPerformance(x)) \u2192 UsedBySomeResearchers(x))"
    },
    {
        "NL": "If a language model is used by some researchers, it is popular. ",
        "FOL": "\u2200x (UsedBySomeResearchers(x) \u2192 Popular(x))"
    },
    {
        "NL": "BERT is a giant language model. ",
        "FOL": "LanguageModel(bert) \u2227 Giant(bert) "
    },
    {
        "NL": "St Johnstone is a Scottish team.",
        "FOL": "Scottish(johnstone)"
    },
    {
        "NL": "St Johnstone is part of the Scottish Premiership.",
        "FOL": "PartOf(johnstone, scottishpremiership)"
    },
    {
        "NL": "If a team is part of the league, it has joined the league.",
        "FOL": "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))"
    },
    {
        "NL": "St Johnstone and Minsk are different teams.",
        "FOL": "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)"
    },
    {
        "NL": "For two different teams, either one team wins or the other team wins.",
        "FOL": "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))"
    },
    {
        "NL": "Minsk won against St Johnstone.",
        "FOL": "WonGame(minsk, johnstone)"
    },
    {
        "NL": "No Boeing-737 plane is equipped with more than 300 seats. ",
        "FOL": "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))"
    },
    {
        "NL": "All planes in Delta are of type Boeing-737. ",
        "FOL": "\u2200x (Delta(x) \u2192 Boeing737(x))"
    },
    {
        "NL": "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ",
        "FOL": "\u2200x (Seats300(x) \u2228 Passengers100(x))"
    },
    {
        "NL": "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ",
        "FOL": "\u2200x (Passengers100(x) \u2192 ShortDistance(x))"
    },
    {
        "NL": "All planes with a capacity of 100 passengers are produced before 2010. ",
        "FOL": "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))"
    },
    {
        "NL": "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "FOL": "Boeing737(jake32) \u2295 Delta(jake32) "
    },
    {
        "NL": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ",
        "FOL": "Boeing737(t10) \u2295 Delta(t10)"
    },
    {
        "NL": "The SAT test is wholly owned and developed by the College Board.",
        "FOL": "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)"
    },
    {
        "NL": "The SAT test is intended to assess student's readiness for college.",
        "FOL": "Test(sat, readiness)"
    },
    {
        "NL": "The SAT was originally designed not to be aligned with high school curricula. ",
        "FOL": "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) "
    },
    {
        "NL": "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ",
        "FOL": "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) "
    },
    {
        "NL": "Rafa Nadal was born in Mallorca.",
        "FOL": "BornIn(rafaNadal, mallorca)"
    },
    {
        "NL": "Rafa Nadal is a professional tennis player.",
        "FOL": "ProfessionalTennisPlayer(rafaNadal)"
    },
    {
        "NL": "Nadal's win ratio is higher than 80%.",
        "FOL": "HighWinRatio(rafaNadal)"
    },
    {
        "NL": "All players in the Big 3 are professionals who have a high win ratio.",
        "FOL": "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))"
    },
    {
        "NL": "No cookie is healthy.",
        "FOL": "\u2200x (Cookie(x) \u2192 \u00acHealthy(x))"
    },
    {
        "NL": "All oreos are cookies.",
        "FOL": "\u2200x (Oreo(x) \u2192 Cookie(x))"
    },
    {
        "NL": "No animals are plants. ",
        "FOL": "\u2200x (Animal(x) \u2192 \u00acPlant(x))"
    },
    {
        "NL": "All humans are animals.",
        "FOL": "\u2200x (Human(x) \u2192 Animal(x))"
    },
    {
        "NL": "All pupils are human.",
        "FOL": "\u2200x (Pupil(x) \u2192 Human(x))"
    },
    {
        "NL": "If Jack is a human or a flower, then Jack is a human and a flower.",
        "FOL": "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)"
    },
    {
        "NL": "No shoes are food. ",
        "FOL": "\u2200x (Shoes(x) \u2192 \u00acFood(x))"
    },
    {
        "NL": "All slippers are shoes.",
        "FOL": "\u2200x (Slipper(x) \u2192 Shoes(x))"
    },
    {
        "NL": "A thing is either food or clothes.",
        "FOL": "\u2200x (Food(x) \u2295 Clothes(x))"
    },
    {
        "NL": "No wearable things are airtight.",
        "FOL": "\u2200x (Wearable(x) \u2192 \u00acAirTight(x))"
    },
    {
        "NL": "All clothes are wearable. ",
        "FOL": "\u2200x (Clothes(x) \u2192 Wearable(x))"
    },
    {
        "NL": "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.",
        "FOL": "\u00ac(AirTight(watch) \u2227 Clothes(watch)) \u2192 (AirTight(watch) \u2227 Clothes(watch)) \u2295 (\u00acAirTight(watch) \u2227 \u00acClothes(watch))"
    },
    {
        "NL": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.",
        "FOL": "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))"
    },
    {
        "NL": "Carlos Reyes trains for an Olympic sport.",
        "FOL": "DoesOlympicSport(carlosReyes)"
    },
    {
        "NL": "Carlos Reyes went to the Olympics.",
        "FOL": "GoesToOlympicGames(carlosReyes)"
    },
    {
        "NL": "Carlos Reyes is a welterweight.",
        "FOL": "IsWelterWeight(carlosReyes)"
    },
    {
        "NL": "Heavy weights are not welterweights.",
        "FOL": "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))"
    },
    {
        "NL": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "FOL": "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))"
    },
    {
        "NL": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "FOL": "\u2200x (Ambitious(x) \u2192 MoveOut(x))"
    },
    {
        "NL": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "FOL": "\u2200x (Fans(x) \u2192 Decor(x))"
    },
    {
        "NL": "All young teenage girls who attend college are big fans of pop bands and singers.",
        "FOL": "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))"
    },
    {
        "NL": "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.",
        "FOL": "Ambitious(sam) \u2192 Fans(sam)"
    },
    {
        "NL": "A student who loves shrieking will be punished.",
        "FOL": "\u2200x (Student(x) \u2227 Shriek(x) \u2192 Punished(x))"
    },
    {
        "NL": "If a person swears, then he is a student.",
        "FOL": "\u2200x (Swear(x) \u2192 Student(x))"
    },
    {
        "NL": "If someone is a teacher, then Bob will talk to him.",
        "FOL": "\u2200x (Teacher(x) \u2192 Talk(bob, x))"
    },
    {
        "NL": "All gentlemen are in a suit.",
        "FOL": "\u2200x (Gentleman(x) \u2192 Suit(x))"
    },
    {
        "NL": "All teachers are men.",
        "FOL": "\u2200x (Teacher(x) \u2192 Man(x))"
    },
    {
        "NL": "There is a teacher.",
        "FOL": "\u2203x (Teacher(x))"
    },
    {
        "NL": "If someone is not a gentlemen, then he is not nice.",
        "FOL": "\u2200x (\u00acGentleman(x) \u2192 \u00acNice(x))"
    },
    {
        "NL": "Willy is nice.",
        "FOL": "Nice(willy)"
    },
    {
        "NL": "Bob loves shrieking and swearing.",
        "FOL": "Shriek(bob) \u2227 Swear(bob)"
    },
    {
        "NL": "Quincy McDuffie is an American professional wide receiver in Canadian Football.",
        "FOL": "American(quincymcduffie) \u2227 Professional(quincymcduffie) \u2227 WideReciever(quincymcduffie) \u2227 In(quincymcduffie, canadianfootball)"
    },
    {
        "NL": "People who can catch balls are good wide receivers. ",
        "FOL": "\u2200x \u2203y (CanCatch(x, y) \u2227 Ball(y) \u2192 Good(x, widereciever))"
    },
    {
        "NL": "Quincy McDuffie can catch many footballs easily.",
        "FOL": "\u2203x (Football(x) \u2227 CanCatch(quincymcduffie, x))"
    },
    {
        "NL": "Good wide receivers play professionally.",
        "FOL": "\u2200x (Good(x, widereciever) \u2192 Professional(x))"
    },
    {
        "NL": "Good wide receivers can catch with both their left and right hand.",
        "FOL": "\u2200x (Good(x, widereciever) \u2192 CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand))"
    },
    {
        "NL": "All footballs are balls.",
        "FOL": "\u2200x (Football(x) \u2192 Ball(x))"
    },
    {
        "NL": "Boves is a railway station located in France. ",
        "FOL": "RailwayStation(boves) \u2227 Locate(boves, france)"
    },
    {
        "NL": "The preceding station of Boves is Longueau.",
        "FOL": "Precede(boves, longueau)"
    },
    {
        "NL": "The preceding station of Dommartin is Boves.",
        "FOL": "Precede(dommartin, boves)"
    },
    {
        "NL": "France is a European country.",
        "FOL": "Locate(france, europe)"
    },
    {
        "NL": "Dommartin is situated on the Paris\u2013Lille railway. ",
        "FOL": "Situate(dommartin, pairsLille)"
    },
    {
        "NL": "Any two contiguous stations are on the same railway.",
        "FOL": "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))"
    },
    {
        "NL": "Boves is served by regional TER Hauts-de-France trains.",
        "FOL": "Serve(hautsDeFrance, boves)"
    },
    {
        "NL": "If A is located in B and B is located in C, then A is located in C.",
        "FOL": "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))"
    },
    {
        "NL": "If A precedes B and B preceds C, than A preceds C.",
        "FOL": "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))"
    },
    {
        "NL": "Edwin Smith was a New Zealand Rower from Auckland.",
        "FOL": "From(edwinsmith, newzealand) \u2227 Rower(edwinsmith) \u2227 From(edwinsmith, auckland)"
    },
    {
        "NL": "Edwin Smith was also known as Ted Smith.",
        "FOL": "KnownAs(edwinsmith, tedsmith)"
    },
    {
        "NL": "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.",
        "FOL": "WentTo(edwinsmith, roseroadprimaryschool) \u2227 LocatedIn(roseroadprimaryschool, greylynn)"
    },
    {
        "NL": "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.",
        "FOL": "Sergeant(edwinsmith) \u2227 ServedWith(edwinsmith, newzealand24thbattalion) \u2227 ServedIn(edwinsmith, italy) \u2227 ServedIn(edwinsmith, egypt)"
    },
    {
        "NL": "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.",
        "FOL": "Buisness(broadwaysheetmetals) \u2227 Ran(edwinsmith, broadwaysheetmetals) \u2227 Owned(edwinsmith, broadwaysheetmetals) \u2227 SheetmetalWorker(edwinsmith)"
    },
    {
        "NL": "A werewolf is a human that can turn into a wolf.",
        "FOL": "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))"
    },
    {
        "NL": "A werewolf has been scratched or bitten by another werewolf.",
        "FOL": "\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))"
    },
    {
        "NL": "If someone has been scratched or bitten, they have been attacked.",
        "FOL": "\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)"
    },
    {
        "NL": "UFC Fight Night was a mixed martial arts event and was held in Sweden.",
        "FOL": "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 Sweden(uFCFightNight)"
    },
    {
        "NL": "At UFC Fight Night, Sadollah was scheduled to fight Musoke.",
        "FOL": "Event(uFCFightNight) \u2192 ScheduledToFight(sadollah, musoke)"
    },
    {
        "NL": "Sadollah fought Akiyama at UFC Fight Night.",
        "FOL": "Event(uFCFightNight) \u2192 Fight(sadollah, akiyama)"
    },
    {
        "NL": "Musoke fought Yakovlev at UFC Fight Night.",
        "FOL": "Event(uFCFightNight) \u2192 Fight(musoke, yakovlev)"
    },
    {
        "NL": "Jung was injured at UFC Fight Night.",
        "FOL": "Event(uFCFightNight) \u2192 Injured(jung)"
    },
    {
        "NL": "Injured people did not fight at UFC Fight Night.",
        "FOL": "\u2200x (Injured(x) \u2192 \u00acFightInUFC(x))"
    },
    {
        "NL": "All drinks are edible. ",
        "FOL": "\u2200x (Drink(x) \u2192 Edible(x))"
    },
    {
        "NL": "All juices are drinks. ",
        "FOL": "\u2200x (Juice(x) \u2192 Drink(x))"
    },
    {
        "NL": "All orange juice is a juice. ",
        "FOL": "\u2200x (OrangeJuice(x) \u2192 Juice(x))"
    },
    {
        "NL": "A juice is either an orange juice or an apple juice.",
        "FOL": "\u2200x (OrangeJuice(x) \u2228 AppleJuice(x))"
    },
    {
        "NL": "All apple juice is sweet.",
        "FOL": "\u2200x (AppleJuice(x) \u2192 Sweet(x))"
    },
    {
        "NL": "If coke is apple juice, then coke is a drink.",
        "FOL": "AppleJuice(coke) \u2192 Drink(coke)"
    },
    {
        "NL": "If coke is not apple juice, then coke is not edible.",
        "FOL": "\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)"
    },
    {
        "NL": "Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.",
        "FOL": "TalentedPoet(lorca) \u2227 SupportPopulists(lorca)"
    },
    {
        "NL": "The Spanish Nationalists opposed anyone who supported the Popular Front",
        "FOL": "\u2200x (SupportPopulists(x) \u2192 Opposed(nationalists, x))"
    },
    {
        "NL": "Talented poets are popular.",
        "FOL": "\u2200x (TalentedPoet(x) \u2192 Popular(x))"
    },
    {
        "NL": "Spanish Nationalists killed anyone who they opposed and were popular.",
        "FOL": "\u2200x (Opposed(nationalists, x) \u2227 Popular(x) \u2192 Killed(nationalists, x))"
    },
    {
        "NL": "Daniel supported the Popular Front but was not popular.",
        "FOL": "SupportPopulists(daniel) \u2227 \u00acPopular(daniel)"
    },
    {
        "NL": "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "FOL": "\u2200x (Kombucha(x) \u2228 CocaCola(x))"
    },
    {
        "NL": "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "FOL": "\u2200x (CocaCola(x) \u2192 BusyParents(x))"
    },
    {
        "NL": "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "FOL": "\u2200x (CocaCola(x) \u2192 Dentist(x))"
    },
    {
        "NL": "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.",
        "FOL": "\u2200x (BusyParents(x) \u2192 Erratic(x))"
    },
    {
        "NL": "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "FOL": "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))"
    },
    {
        "NL": "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ",
        "FOL": "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))"
    },
    {
        "NL": "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "FOL": "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))"
    },
    {
        "NL": "Some customers go to cinemas every week. ",
        "FOL": "\u2203x (CinemaEveryWeek(x))"
    },
    {
        "NL": "Customers who prefer TV series will not watch TV series in cinemas.",
        "FOL": "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))"
    },
    {
        "NL": "James subscribes to AMC A List.",
        "FOL": "SubscribedTo(james, amcalist)"
    },
    {
        "NL": "Peter prefers TV series.",
        "FOL": "Prefer(peter, tvseries)"
    },
    {
        "NL": "Bulbophyllum attenuatum is in the genus bulbophyllum.",
        "FOL": "InGenus(bulbophyllumattenuatum, bulbophyllum)"
    },
    {
        "NL": "All bulbophyllum are orchids.",
        "FOL": "\u2200x (InGenus(x, bulbophyllum) \u2192 Orchid(x))"
    },
    {
        "NL": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.",
        "FOL": "FederalDistrictOfRussia(central) \u2228 FederalDistrictOfRussia(northwestern) \u2228 FederalDistrictOfRussia(southern) \u2228 FederalDistrictOfRussia(northcaucasian) \u2228 FederalDistrictOfRussia(volga) \u2228 FederalDistrictOfRussia(ural) \u2228 FederalDistrictOfRussia(siberian) \u2228 FederalDistrictOfRussia(fareastern)"
    },
    {
        "NL": "The Central federal district has the largest population among all federal districts in Russia.",
        "FOL": "FederalDistrictOfRussia(central) \u2227 LargestPopulationIn(central) "
    },
    {
        "NL": "Moscow is the administrative center of the Central federal district.",
        "FOL": "AdministrativeCenterOf(moscow, central)"
    },
    {
        "NL": "Yekaterinburg is the administrative center of the Ural federal district.",
        "FOL": "AdministrativeCenterOf(yekaterinburg, ural)"
    },
    {
        "NL": "Vladivostok is the administrative center of the Far Eastern federal district.",
        "FOL": "AdministrativeCenterOf(vladivostok, fareastern)"
    },
    {
        "NL": "The Far Eastern federal district has the largest area among all federal districts in Russia.",
        "FOL": "FederalDistrictOfRussia(fareastern) \u2227 LargestAreaIn(fareastern)"
    },
    {
        "NL": "Some federal districts of Russia were established in 2000.",
        "FOL": "\u2203x (FederalDistrictOfRussia(x) \u2192 EstablishedIn(x, 2000))"
    },
    {
        "NL": "All cancers are malignant tumors.",
        "FOL": "\u2200x (Cancer(x) \u2192 MalignantTumor(x))"
    },
    {
        "NL": "No malignant tumor can be treated at home.",
        "FOL": "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))"
    },
    {
        "NL": "All colorectal cancer is cancer.",
        "FOL": "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))"
    },
    {
        "NL": "Having a cold can be treated at home.",
        "FOL": "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))"
    },
    {
        "NL": "Breast cancer is neither having a cold nor a malignant tumor (exclusive).",
        "FOL": "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))"
    },
    {
        "NL": "I should not worry about things outside of my control.",
        "FOL": "\u2200x (OutsideControl(x) \u2192 \u00acShouldWorry(x))"
    },
    {
        "NL": "Traffic is outside of my control.",
        "FOL": "\u2200x (Traffic(x) \u2192 OutsideControl(x))"
    },
    {
        "NL": "Roversi is an Italian surname.",
        "FOL": "\u2200x (UseAsSurname(x, roversi) \u2192 UseItalianSurname(x))"
    },
    {
        "NL": "Alba Roversi uses Roversi as a surname.",
        "FOL": "UseAsSurname(alba, roversi)"
    },
    {
        "NL": "Paolo Roversi uses Roversi as a surname.",
        "FOL": "UseAsSurname(paolo, roversi)"
    },
    {
        "NL": "Roberto Roversi uses Roversi as a surname.",
        "FOL": "UseAsSurname(roberto, roversi)"
    },
    {
        "NL": "Paolo Roversi is a photographer.",
        "FOL": "Photographer(paolo)"
    },
    {
        "NL": "A photographer is a professional or an amateur.",
        "FOL": "\u2200x (Photographer(x) \u2192 Professional(x) \u2228 Amateur(x))"
    },
    {
        "NL": "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "FOL": "British-IraqiArchitect(zahaHadid)"
    },
    {
        "NL": "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.",
        "FOL": "BornIn(zahaHadid, y1950)"
    },
    {
        "NL": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "FOL": "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)"
    },
    {
        "NL": "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ",
        "FOL": "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)"
    },
    {
        "NL": "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ",
        "FOL": "\u2200x (InvasiveNeuroimagingTechnique(x) \u2228 NoninvasiveNeuroimagingTechnique(x)) "
    },
    {
        "NL": "All noninvasive neuroimaging techniques provide a spatial resolution of brains.",
        "FOL": " \u2200x (NoninvasiveNeuroimagingTechnique(x) \u2192 ProvidesSpatialResolutionOfBrains(x)) "
    },
    {
        "NL": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
        "FOL": " \u2200x (ProvidesSpatialResolutionOfBrains(x) \u2192 MeasurementOfBrainActivity(x)) "
    },
    {
        "NL": "All measurements of brain activity are used by neuroscience researchers.",
        "FOL": " \u2200x (MeasurementOfBrainActivity(x) \u2192 UsedByNeuroscienceResearchers(x))"
    },
    {
        "NL": "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.",
        "FOL": " MeasurementOfBrainActivity(fMRI) \u2295 NoninvasiveNeuroimagingTechnique(fMRI)"
    },
    {
        "NL": "Either present their work at the conference or provide a tutorial session at the conference. ",
        "FOL": "\u2200x ( Present(x) \u2228 Tutorial(x))"
    },
    {
        "NL": "All who present their work at the conference will attend in person. ",
        "FOL": "\u2200x (Present(x) \u2192 InPerson(x))"
    },
    {
        "NL": "All those providing a tutorial session at the conference are invited to join the club. ",
        "FOL": "\u2200x (Tutorial(x) \u2192 Invited(x))"
    },
    {
        "NL": "All who attend the conference in person are provided with souvenirs. ",
        "FOL": "\u2200x (InPerson(x) \u2192 Souvenirs(x))"
    },
    {
        "NL": "All invited to join the club are provided with delicious meals. ",
        "FOL": "\u2200x (Invited(x) \u2192 Meals(x))"
    },
    {
        "NL": "All provided with delicious meals are happy to communicate with each other during the dinner. ",
        "FOL": "\u2200x (Meals(x) \u2192 HappyCommunicate(x))"
    },
    {
        "NL": "All provided with delicious meals are invited to take a photo with the audience. ",
        "FOL": "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))"
    },
    {
        "NL": "James does not attend the conference in person and is not provided with souvenirs.",
        "FOL": "\u00ac(InPerson(james) \u2227 Souvenirs(james))"
    },
    {
        "NL": "The USS Salem is a heavy cruiser built for the United States navy.",
        "FOL": "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)"
    },
    {
        "NL": "The last heavy cruiser to enter service was the USS Salem.",
        "FOL": "LastHeavyCruiserToEnterService(usssalem)"
    },
    {
        "NL": "The USS Salem is a museum ship.",
        "FOL": "MuseumShip(usssalem)"
    },
    {
        "NL": "Museum ships are open to the public.",
        "FOL": "\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))"
    },
    {
        "NL": "The USS Salem served in the Atlantic and Mediterranean.",
        "FOL": "ServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)"
    },
    {
        "NL": "TS Leda was a good passenger and cargo vessel.",
        "FOL": "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))"
    },
    {
        "NL": "TS Leda was the first Norweigian vessel that was built with stabilizers.",
        "FOL": "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))"
    },
    {
        "NL": "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
        "FOL": "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))"
    },
    {
        "NL": " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
        "FOL": "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))"
    },
    {
        "NL": "Some ships that are quiet and good at sea have powerful steam turbine engines.",
        "FOL": "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))"
    },
    {
        "NL": "Rosa was born in Santiago. ",
        "FOL": "Born(rosa, santiago)"
    },
    {
        "NL": "Santiago is the capital and largest city of Chile.",
        "FOL": "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)"
    },
    {
        "NL": "Rosa is the daughter of a Catalan building contractor, Jose.",
        "FOL": "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)"
    },
    {
        "NL": "Jose has a Chilean wife, Carmen.",
        "FOL": "Wife(jose, carmen) \u2227 Chilean(carmen)"
    },
    {
        "NL": "A building contractor is responsible for the day-to-day oversight of a construction site. ",
        "FOL": "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))"
    },
    {
        "NL": "Tyga is a rapper.",
        "FOL": "IsRapper(tyga)"
    },
    {
        "NL": "Rappers release rap albums.",
        "FOL": "ReleasedAlbum(tyga, wellDone3)"
    },
    {
        "NL": "Tyga released the Well Done 3 album.",
        "FOL": "\u2200x \u2200y (IsRapper(x) \u2227 ReleasedAlbum(x, y) \u2192 IsRapAlbum(y))"
    },
    {
        "NL": "Rappers are not opera singers.",
        "FOL": "\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))"
    },
    {
        "NL": "Deborah Wallace is a Scottish born actress, playwright and producer.",
        "FOL": "BornIn(deborahwallace, scotland) \u2227 Actress(deborahwallace) \u2227 Playwright(deborahwallace) \u2227 Producer(deborahwallace)"
    },
    {
        "NL": "Psyche is a play based on the life of James Miranda Barry.",
        "FOL": "Play(psyche) \u2227 BasedOn(psyche, lifeofjamesmirandabarry)"
    },
    {
        "NL": "Homesick, Psyche and The Void are plays from Deborah Wallace.",
        "FOL": "Play(homesick) \u2227 From(homesick, deborahwallace) \u2227 Play(psyche) \u2227 From(psyche, deborahwallace) \u2227 Play(thevoid) \u2227 From(thevoid, deborahwallace)"
    },
    {
        "NL": "Deborah Wallace co-produced Gasland.",
        "FOL": "Co-Produced(deborahwallace, gasland)"
    },
    {
        "NL": "If an animal needs a large territory, then it travels far.",
        "FOL": "\u2200x (NeedsLargeTerritory(x) \u2192 TravelFar(x))"
    },
    {
        "NL": "Everything that eats a lot needs a large territory.",
        "FOL": "\u2200x (EatsALot(x) \u2192 NeedsLargeTerritory(x))"
    },
    {
        "NL": "If something is a big animal, then it will eat a lot.",
        "FOL": "\u2200x (BigAnimal(x) \u2192 EatsALot(x))"
    },
    {
        "NL": "All bears are big animals.",
        "FOL": "\u2200x (Bear(x) \u2192 BigAnimal(x))"
    },
    {
        "NL": "Larry is a big animal.",
        "FOL": "BigAnimal(larry)"
    },
    {
        "NL": "No criminal is kind. ",
        "FOL": "\u2200x (Criminal(x) \u2192 \u00acKind(x))"
    },
    {
        "NL": "All person who breaks the law is a criminals.",
        "FOL": "\u2200x (BreakLaw(x) \u2192 Criminal(x))"
    },
    {
        "NL": "People are either kind or evil.",
        "FOL": "\u2200x (Kind(x) \u2295 Evil(x))"
    },
    {
        "NL": "If someone is evil, then they are ugly.",
        "FOL": "\u2200x (Evil(x) \u2192 Ugly(x))"
    },
    {
        "NL": "If someone is evil, then they are cold-blood.",
        "FOL": "\u2200x (Evil(x) \u2192 ColdBlood(x))"
    },
    {
        "NL": "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.",
        "FOL": "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)"
    },
    {
        "NL": "Phoneix's music is classified under the indie pop genre.",
        "FOL": "IndiePop(phoenix)"
    },
    {
        "NL": "Phoenix is a band from France.",
        "FOL": "Band(phoenix) \u2227 France(phoenix)"
    },
    {
        "NL": "French bands write songs in French or in English.",
        "FOL": "\u2200x \u2200y (Band(x) \u2227 France(x) \u2227 Make(x, y) \u2192 FrenchSong(y) \u2295 EnglishSong(y))"
    },
    {
        "NL": "Aside from indie pop, pop rock and synth-pop are two other genres of music.",
        "FOL": "\u2200x (IndiePop(x) \u2192 \u00acPopRock(x) \u2227 \u00acSynthPop(x))"
    },
    {
        "NL": "Phoneix has no songs in French.",
        "FOL": "\u2200x (Make(phoenix, x) \u2192 \u00acFrenchSong(x))"
    },
    {
        "NL": "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "FOL": "\u2200x (TalentShows(x) \u2192 Engaged(x))"
    },
    {
        "NL": "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "FOL": "\u2200x (TalentShows(x) \u2228 Inactive(x))"
    },
    {
        "NL": "If people chaperone high school dances, then they are not students who attend the school.",
        "FOL": "\u2200x (Chaperone(x) \u2192 \u00acStudents(x))"
    },
    {
        "NL": "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "FOL": "\u2200x (Inactive(x) \u2192 Chaperone(x))"
    },
    {
        "NL": "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "FOL": "\u2200x (AcademicCareer(x) \u2192 Students(x))"
    },
    {
        "NL": "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ",
        "FOL": "(Engaged(bonnie) \u2227 Students(bonnie)) \u2295 (\u00acEngaged(bonnie) \u2227 \u00acStudents(bonnie))"
    },
    {
        "NL": "Bonnie performs in school talent shows often.",
        "FOL": "Engaged(bonnie)"
    },
    {
        "NL": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
        "FOL": "AcademicCareer(bonnie) \u2295 Chaperone(bonnie) \u2192 AcademicCareer(bonnie) \u2295 Inactive(bonnie)"
    },
    {
        "NL": "All employees who schedule a meeting with their customers will appear in the company today. ",
        "FOL": "\u2200x (Meeting(x) \u2192 AppearInCompany(x))"
    },
    {
        "NL": "Everyone who has lunch in the company schedules meetings with their customers. ",
        "FOL": "\u2200x (LunchInCompany(x) \u2192 Meetings(x))"
    },
    {
        "NL": "Employees will either have lunch in the company or have lunch at home.",
        "FOL": "\u2200x (LunchInCompany(x) \u2228 LunchAtHome(x))"
    },
    {
        "NL": "If an employee has lunch at home, then he/she is working remotely from home.",
        "FOL": "\u2200x (LunchAtHome(x) \u2192 WorkRemotelyFromHome(x))"
    },
    {
        "NL": "All employees who are in other countries work remotely from home. ",
        "FOL": "\u2200x (InOtherCountries(x) \u2192 WorkRemotelyFromHome(x))"
    },
    {
        "NL": "No managers work remotely from home. ",
        "FOL": "\u2200x (Manager(x) \u2192 \u00acWorkRemotelyFromHome(x))"
    },
    {
        "NL": "James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
        "FOL": "Manager(james) \u2295 AppearInCompany(james)"
    },
    {
        "NL": "James has lunch in the company.",
        "FOL": "LunchInCompany(james)"
    },
    {
        "NL": "James does not have lunch in the company.",
        "FOL": "\u00acLunchInCompany(james)"
    },
    {
        "NL": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
        "FOL": "(Manager(james) \u2295 InOtherCountries(james)) \u2192 (LunchAtHome(james) \u2295 WorkRemotelyFromHome(james))"
    },
    {
        "NL": "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "FOL": "\u2203x (OccurMonkeypoxVirus(x) \u2227 GetMonkeypox(x))"
    },
    {
        "NL": "Monkeypox virus can occur in certain animals, including humans.",
        "FOL": "\u2203x (Animal(x) \u2227 OccurMonkeypoxVirus(x))"
    },
    {
        "NL": "Humans are mammals.",
        "FOL": "\u2200x (Human(x) \u2192 Mammal(x))"
    },
    {
        "NL": "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "FOL": "\u2203x (GetMonkeypox(x) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))"
    },
    {
        "NL": "People feel tired when they get a glu.",
        "FOL": "\u2200x (Human(x) \u2227 Flu(x) \u2192 Tired(x))"
    },
    {
        "NL": "There is an animal.",
        "FOL": "\u2203x (Animal(x))"
    },
    {
        "NL": "No one gets flu.",
        "FOL": "\u2200x (Human(x) \u2192 \u00acFlu(x))"
    },
    {
        "NL": "Symptons of Monkeypox include coughing.",
        "FOL": "\u2203x (GetMonkeypox(x) \u2227 Coughing(x))"
    },
    {
        "NL": "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "FOL": "\u2200x (WildTurkey(x) \u2192 (Eastern(x) \u2228 Osceola(x) \u2228 Goulds(x) \u2228 Merriams(x) \u2228 Riogrande(x) \u2228 Ocellated(x)))"
    },
    {
        "NL": "Tom is not an Eastern wild turkey.",
        "FOL": "\u00ac(WildTurkey(tom) \u2227 Eastern(tom))"
    },
    {
        "NL": "Tom is not an Osceola wild turkey.",
        "FOL": "\u00ac(WildTurkey(tom) \u2227 Osceola(tom))"
    },
    {
        "NL": "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "FOL": "WildTurkey(tom) \u2192 \u00ac(Goulds(tom) \u2228 Merriams(tom) \u2228 Riogrande(tom))"
    },
    {
        "NL": "Tom is a wild turkey.",
        "FOL": "WildTurkey(tom)"
    },
    {
        "NL": "Tom is an Ocellated wild turkey.",
        "FOL": "Ocellated(tom)"
    },
    {
        "NL": "Tom is an Eastern wild turkey.",
        "FOL": "Eastern(tom)"
    },
    {
        "NL": "Joey is a wild turkey.",
        "FOL": "WildTurkey(joey)"
    },
    {
        "NL": "A Japanese game company created the game the Legend of Zelda.",
        "FOL": "\u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Game(thelegendofzelda) \u2227 Created(x, thelegendofzelda))"
    },
    {
        "NL": "All games in the Top 10 list are made by Japanese game companies.",
        "FOL": "\u2200x \u2200y (Game(x) \u2227 InTop10(x) \u2227 Created(x, y) \u2192 Japanese(y))"
    },
    {
        "NL": "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "FOL": "\u2200x (Game(x) \u2227 SellsMoreThan(x, onemillioncopies) \u2192 Top10(x))"
    },
    {
        "NL": "The Legend of Zelda sold more than one million copies.",
        "FOL": "SellsMoreThan(thelegendofzelda, onemillioncopies)"
    },
    {
        "NL": "The Legend of Zelda is in the Top 10 list.",
        "FOL": "Top10(thelegendofzelda)"
    },
    {
        "NL": "FIFA 22 is made by a Japanese video game company.",
        "FOL": "\u2200x (Created(fifa22, x) \u2192 Japanese(x) \u2227 VideoGameCompany(x))"
    },
    {
        "NL": "The Legend of Zelda is not in the Top 10 list.",
        "FOL": "\u00acTop10(thelegendofzelda)"
    },
    {
        "NL": "All squares have four sides.",
        "FOL": "\u2200x (Square(x) \u2192 FourSides(x))"
    },
    {
        "NL": "All four-sided things are shapes. ",
        "FOL": "\u2200x (FourSides(x) \u2192 IsShape(x))"
    },
    {
        "NL": "All squares are shapes.",
        "FOL": "\u2200x (Square(x) \u2192 IsShape(x))"
    },
    {
        "NL": "All rabbits are cute. ",
        "FOL": "\u2200x (Rabbit(x) \u2192 Cute(x))"
    },
    {
        "NL": "Some turtles exist. ",
        "FOL": "\u2203x (Turtle(x))"
    },
    {
        "NL": "An animal is either a rabbit or a squirrel.",
        "FOL": "\u2200x (Rabbit(x) \u2228 Squirrel(x))"
    },
    {
        "NL": "If something is skittish, then it is not still.",
        "FOL": "\u2200x (Skittish(x) \u2192 \u00acStill(x))"
    },
    {
        "NL": "All squirrels are skittish.",
        "FOL": "\u2200x (Squirrel(x) \u2192 Skittish(x))"
    },
    {
        "NL": "Rock is still.",
        "FOL": "Still(rock)"
    },
    {
        "NL": "Rock is a turtle.",
        "FOL": "Turtle(rock)"
    },
    {
        "NL": "Rock is not a turtle.",
        "FOL": "\u00acTurtle(rock)"
    },
    {
        "NL": "Rock is a turtle or cute.",
        "FOL": "Turtle(rock) \u2228 Cute(rock)"
    },
    {
        "NL": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
        "FOL": "\u00ac(Turtle(rock) \u2227 Squirrel(rock)) \u2192 Cute(rock) \u2295 Skittish(rock)"
    },
    {
        "NL": "If Rock is cute and still, then Rock is a turtle and skittish.",
        "FOL": "Cute(rock) \u2227 Still(rock) \u2192 Turtle(rock) \u2227 Skittish(rock)"
    },
    {
        "NL": "\"Stranger Things\" is a popular Netflix show.",
        "FOL": "NetflixShow(strangerThings) \u2227 Popular(strangerThings)"
    },
    {
        "NL": "If a Netflix show is popular, Karen will binge-watch it.",
        "FOL": "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))"
    },
    {
        "NL": "If and only if Karen binge-watches a Netflix show, she will download it.",
        "FOL": "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))"
    },
    {
        "NL": "Karen does not download \"Black Mirror\".",
        "FOL": "\u00acDownload(karen, blackMirror)"
    },
    {
        "NL": "\"Black Mirror\" is a Netflix show.",
        "FOL": "NetflixShow(blackMirror)"
    },
    {
        "NL": "If Karen binge-watches a Netflix show, she will share it to Lisa.",
        "FOL": "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 Share(x, lisa))"
    },
    {
        "NL": "Karen will share \"Stranger Things\" to Lisa.",
        "FOL": "Share(strangerThings, lisa)"
    },
    {
        "NL": "\"Black Mirror\" is popular.",
        "FOL": "Popular(blackMirror)"
    },
    {
        "NL": "Karen will share \"Black Mirror\" to Lisa.",
        "FOL": "Share(blackMirror, lisa)"
    },
    {
        "NL": "Beijing is the capital of the People's Republic of China. ",
        "FOL": "CapitalOf(beijing, prx)"
    },
    {
        "NL": "Beijing is the world's most populous national capital city.",
        "FOL": "MostPopulousNationalCapitalCity(beijing)"
    },
    {
        "NL": "Beijing is located in Northern China.",
        "FOL": "InNorthernChina(beijing)"
    },
    {
        "NL": "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "FOL": "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, summer2008paralympicgames)"
    },
    {
        "NL": "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "FOL": "Hosted(beijing, summerolympic) \u2227 Hosted(beijing, winterolympic) \u2227 Hosted(beijing, summerparalympicgames)  \u2227 Hosted(beijing, winterparalympicgames)"
    },
    {
        "NL": "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
        "FOL": "\u2203x (BeijingUniversity(x) \u2227 ConsistentlyRankAmongTheBest(x))"
    },
    {
        "NL": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
        "FOL": "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, winterolympic)"
    },
    {
        "NL": "Beijing is located in southern China.",
        "FOL": "InSouthernChina(beijing)"
    },
    {
        "NL": "Beijing is the second largest Chinese city by urban population.",
        "FOL": "SecondLargestChineseCity(beijing)"
    },
    {
        "NL": "All aliens are extraterrestrial.",
        "FOL": "\u2200x (Alien(x) \u2192 Extraterrestrial(x))"
    },
    {
        "NL": "If someone is from Mars, then they are aliens.",
        "FOL": "\u2200x (FromMars(x) \u2192 Alien(x))"
    },
    {
        "NL": "No extraterrestrial is human.",
        "FOL": "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))"
    },
    {
        "NL": "Everyone from Earth is a human.",
        "FOL": "\u2200x (FromEarth(x) \u2192 Human(x))"
    },
    {
        "NL": "Marvin cannot be from Earth and from Mars.",
        "FOL": "\u00acFromEarth(marvin) \u2227 \u00acFromMars(marvin)"
    },
    {
        "NL": "If Marvin is not from Earth, then Marvin is an extraterrestrial.",
        "FOL": "\u00acFromEarth(marvin) \u2192 Extraterrestrial(marvin)"
    },
    {
        "NL": "Marvin is an alien.",
        "FOL": "Alien(marvin)"
    },
    {
        "NL": "Marvin is neither a human nor from Mars.",
        "FOL": "\u00acHuman(marvin) \u2227 \u00acFromMars(marvin)"
    },
    {
        "NL": "If Marvin is not from Mars, then Marvin is a human.",
        "FOL": "\u00acFromMars(marvin) \u2192 Human(marvin)"
    },
    {
        "NL": "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "FOL": "\u2200x (GrandSlamChampion(x) \u2295 OscarNominatedActor(x))"
    },
    {
        "NL": "All people who are Grand Slam champions are professional tennis players.",
        "FOL": "\u2200x (GrandSlamChampion(x) \u2192 ProfessionalTennisPlayer(x))"
    },
    {
        "NL": "All Oscar-nominated actors are celebrities.",
        "FOL": "\u2200x (OscarNominatedActor(x) \u2192 Celebrity(x))"
    },
    {
        "NL": "All professional tennis players are athletes.",
        "FOL": "\u2200x (ProfessionalTennisPlayer(x) \u2192 Athlete(x))"
    },
    {
        "NL": "If a person is a celebrity then they are well paid.",
        "FOL": "\u2200x (Celebrity(x) \u2192 WellPaid(x))"
    },
    {
        "NL": "If a person is an athlete then they are famous.",
        "FOL": "\u2200x (Athlete(x) \u2192 Famous(x))"
    },
    {
        "NL": "All well-paid people live in tax havens.",
        "FOL": "\u2200x (WellPaid(x) \u2192 LivesInTaxHaven(x))"
    },
    {
        "NL": "If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
        "FOL": "Famous(djokovic) \u2227 Athlete(djokovic) \u2192 LivesInTaxHaven(djokovic)"
    },
    {
        "NL": "Djokovic is a Grand Slam champion.",
        "FOL": "GrandSlamChampion(djokovic)"
    },
    {
        "NL": "Djokovic lives in a tax haven.",
        "FOL": "LivesInTaxHaven(djokovic)"
    },
    {
        "NL": "Djokovic does not live in a tax haven.",
        "FOL": "\u00acLivesInTaxHaven(djokovic)"
    },
    {
        "NL": "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "FOL": "ProfessionalWrestlingStable(diamondmine) \u2227 FormedIn(diamondmine, wwe)"
    },
    {
        "NL": "Roderick Strong leads Diamond Mine.",
        "FOL": "Leads(roderickstrong, diamondmine)"
    },
    {
        "NL": "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "FOL": "Includes(diamondmine, creedbrothers) \u2227 Includes(diamondmine, ivynile)"
    },
    {
        "NL": "Imperium has a feud with Diamond Mine.",
        "FOL": "HasFeud(imperium, diamondmine)"
    },
    {
        "NL": "Roderick strong leads a professional wrestling stable.",
        "FOL": "\u2203x (Leads(roderickstrong, x) \u2227 ProfessionalWrestlingStable(x))"
    },
    {
        "NL": "Roderick strong leads the Creed Brothers.",
        "FOL": "Leads(roderickstrong, creedbrothers)"
    },
    {
        "NL": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
        "FOL": "\u2200x (ProfessionalWrestlingStable(x) \u2227 Includes(x, ivynile) \u2192 \u00acHasFeud(imperium, x))"
    },
    {
        "NL": "Symphony No. 9 is a music piece.",
        "FOL": "MusicPiece(symphony9)"
    },
    {
        "NL": "Composers write music pieces.",
        "FOL": "\u2200x \u2200y ((MusicPiece(x) \u2227 Writtenby(x, y)) \u2192 Composer(y))"
    },
    {
        "NL": "Beethoven wrote Symphony No. 9.",
        "FOL": "Writtenby(symphony9, beethoven)"
    },
    {
        "NL": "Vienna Music Society premiered Symphony No. 9.",
        "FOL": "Premiered(viennamusicsociety, symphony9)"
    },
    {
        "NL": "Vienna Music Society is an orchestra.",
        "FOL": "Orchestra(viennamusicsociety)"
    },
    {
        "NL": "Beethoven leads the Vienna Music Society.",
        "FOL": "Lead(beethoven, viennamusicsociety)"
    },
    {
        "NL": "Orchestras are led by conductors.",
        "FOL": "\u2200x \u2200y ((Orchestra(x) \u2227 Lead(y, x)) \u2192 Conductor(y))"
    },
    {
        "NL": "Beethoven is a composer.",
        "FOL": "Composer(beethoven)"
    },
    {
        "NL": "Some orchestras premiered music pieces.",
        "FOL": "\u2203x \u2203y (Orchestra(x) \u2227 MusicPiece(y) \u2227 Premiered(x, y))"
    },
    {
        "NL": "Beethoven is not a conductor.",
        "FOL": "\u00acConductor(beethoven)"
    },
    {
        "NL": "All of Zaha Hadid's design styles are timeless.",
        "FOL": "\u2200x (ZahaHadidDesignStyle(x) \u2192 Timeless(x))"
    },
    {
        "NL": "No mass product design is timeless.",
        "FOL": "\u2200x (MassProductDesign(x) \u2192 \u00acTimeless(x))"
    },
    {
        "NL": "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "FOL": "\u2200x (ZahaHadidDesignStyle(x) \u2228 KellyWearstlerDesignStyle(x)) "
    },
    {
        "NL": "All of Kelly Wearstler's design styles are evocative.",
        "FOL": "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Evocative(x))"
    },
    {
        "NL": "All of Kelly Wearstler's design styles are dreamy.",
        "FOL": "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Dreamy(x))"
    },
    {
        "NL": "If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
        "FOL": "Timeless(aDesignByMax) \u2192 MassProductDesign(aDesignByMax) \u2227 Evocative(aDesignByMax)"
    },
    {
        "NL": "A design by Max is a mass product design.",
        "FOL": "MassProductDesign(aDesignByMax)"
    },
    {
        "NL": "A design by Max is evocative and dreamy.",
        "FOL": "Evocative(aDesignByMax) \u2227 Dreamy(aDesignByMax)"
    },
    {
        "NL": "A design by Max is either evocative or dreamy.",
        "FOL": "Evocative(aDesignByMax) \u2295 Dreamy(aDesignByMax)"
    },
    {
        "NL": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "FOL": "\u2200x (RankedHighlyByWomenTennisAssociation(x) \u2192 AmongMostActivePlayersInMajorTennis(x))"
    },
    {
        "NL": "Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.",
        "FOL": "\u2200x (LostToIga\u015awi\u0105tek(x) \u2192 RankedHighlyByWomenTennisAssociation(x))"
    },
    {
        "NL": "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
        "FOL": "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToIga\u015awi\u0105tek(x)) "
    },
    {
        "NL": "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "FOL": "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2228 MaleTennisPlayersAtRolandGarros2022(x)) "
    },
    {
        "NL": "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "FOL": "\u2200x (MaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToRafaelNadal(x))"
    },
    {
        "NL": "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
        "FOL": "RankedHighlyByWomenTennisAssociation(cocoGauff) \u2228 LostToRafaelNadal(cocoGauff) \u2192 \u00acMaleTennisPlayersAtRolandGarros2022(cocoGauff)"
    },
    {
        "NL": "Coco Gauff is among the most active players in major tennis.",
        "FOL": "AmongMostActivePlayersInMajorTennis(cocoGauff)"
    },
    {
        "NL": "Coco Gauff has lost to Rafael Nadal.",
        "FOL": "LostToRafaelNadal(cocoGauff)"
    },
    {
        "NL": "Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.",
        "FOL": "\u00acLostToIga\u015awi\u0105tek(cocoGauff) \u2228 \u00acAmongMostActivePlayersInMajorTennis(cocoGauff)"
    },
    {
        "NL": "Some pets are not mammals.",
        "FOL": "\u2203x (Pet(x) \u2227 \u00acMammal(x))"
    },
    {
        "NL": "No pets are cats.",
        "FOL": "\u2200x (Pet(x) \u2192 \u00acCat(x))"
    },
    {
        "NL": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "FOL": "Season(spring) \u2228 Season(summer) \u2228 Season(fall) \u2228 Season(winter)"
    },
    {
        "NL": "All students who want to have a long vacation love summer the most.",
        "FOL": "\u2200x (WantlongVacation(x) \u2192 Love(x, summer))"
    },
    {
        "NL": "Emma's favorite season is summer.",
        "FOL": "Love(emma, summer)"
    },
    {
        "NL": "Mia's favorite season is not the same as Emma's. ",
        "FOL": "\u00acLove(mia, emma)"
    },
    {
        "NL": "James wants to have a long vacation.",
        "FOL": "WantlongVacation(james)"
    },
    {
        "NL": "James's favorite season is summer.",
        "FOL": "Love(james, summer)"
    },
    {
        "NL": "James's favorite season is fall.",
        "FOL": "Love(james, fall)"
    },
    {
        "NL": "Mia's favorite season is spring.",
        "FOL": "Love(mia, spring)"
    },
    {
        "NL": "No digital media are analog.",
        "FOL": "\u2200x (Digital(x) \u2192 \u00acAnalog(x))"
    },
    {
        "NL": "Every printed text is analog.",
        "FOL": "\u2200x (PrintedText(x) \u2192 Analog(x))"
    },
    {
        "NL": "All streaming services are digital.",
        "FOL": "\u2200x (StreamingService(x) \u2192 Digital(x))"
    },
    {
        "NL": "If an object is a hardcover book then it is printed text.",
        "FOL": "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))"
    },
    {
        "NL": "If 1984 is a streaming service, then 1984 is a hardcover book.",
        "FOL": "StreamingService(y1984) \u2192 HardcoverBook(y1984)"
    },
    {
        "NL": "1984 is printed text.",
        "FOL": "PrintedText(y1984)"
    },
    {
        "NL": "1984 is a streaming service.",
        "FOL": "StreamingService(y1984)"
    },
    {
        "NL": "1984 is not a streaming service.",
        "FOL": "\u00acStreamingService(y1984)"
    },
    {
        "NL": "All Romance languages are Indo-European languages.",
        "FOL": "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))"
    },
    {
        "NL": "The Romance languages are a language family.",
        "FOL": "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, romancefamily))"
    },
    {
        "NL": "All languages within a language family are related to each other.",
        "FOL": "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))"
    },
    {
        "NL": "French and Spanish are both Romance languages.",
        "FOL": "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)"
    },
    {
        "NL": "German is related to Spanish.",
        "FOL": "Related(german, spanish)"
    },
    {
        "NL": "Basque is not related to any other language.",
        "FOL": "\u2200x (\u00acRelated(basque, x))"
    },
    {
        "NL": "Basque is a Romance language.",
        "FOL": "RomanceLanguage(basque)"
    },
    {
        "NL": "German is a Romance language.",
        "FOL": "RomanceLanguage(german)"
    },
    {
        "NL": "French is an Indo-European language.",
        "FOL": "IndoEuropeanLanguage(french)"
    },
    {
        "NL": "Robert Lewandowski is a striker.",
        "FOL": "IsStriker(robertLewandowski)"
    },
    {
        "NL": "[BG] Strikers are soccer players.",
        "FOL": "\u2200x (IsStriker(x) \u2192 IsSoccerPlayer(x))"
    },
    {
        "NL": "Robert Lewandowski left Bayern Munchen.",
        "FOL": "LeftTeam(robertLewandowski, bayernMunchen)"
    },
    {
        "NL": "[BG] If a player left a team they no longer play for that team.",
        "FOL": "\u2200x \u2200y (LeftTeam(x, y) \u2192 \u00acPlaysForTeam(x, y))"
    },
    {
        "NL": "Robert Lewandowski is a soccer player.",
        "FOL": "IsSoccerPlayer(robertLewandowski)"
    },
    {
        "NL": "Robert Lewandowski plays for Bayern Munchen.",
        "FOL": "PlaysForTeam(robertLewandowski, bayernMunchen)"
    },
    {
        "NL": "Robert Lewandowski is a star.",
        "FOL": "IsSoccerStar(robertLewandowski)"
    },
    {
        "NL": "Billings is a city in Montana.",
        "FOL": "CityIn(billings, montana)"
    },
    {
        "NL": "Montana includes the cities of Butte, Helena, and Missoula.",
        "FOL": "CityIn(butte, montana) \u2227 CityIn(helena, montana) \u2227 CityIn(missoula, montana)"
    },
    {
        "NL": "White Sulphur Springs and Butte are cities in the same state.",
        "FOL": "\u2203x (CityIn(whitesulphursprings, x) \u2227 CityIn(butte, x))"
    },
    {
        "NL": "The city of Pierre is not in Montana.",
        "FOL": "\u00acCityIn(pierre, montana)"
    },
    {
        "NL": "Any city in Butte is not in Pierre.",
        "FOL": "\u2200x (CityIn(butte, x) \u2192 \u00acCityIn(pierre, x))"
    },
    {
        "NL": "Butte and Pierre are in the same state.",
        "FOL": "\u2203x (CityIn(butte, x) \u2227 CityIn(pierre, x))"
    },
    {
        "NL": "Pierre and Bismarck are in the same state.",
        "FOL": "\u2203x (CityIn(pierre, x) \u2227 CityIn(bismarck, x))"
    },
    {
        "NL": "Montana is home to the city of Missoula.",
        "FOL": "CityIn(missoula, montana)"
    },
    {
        "NL": "International students in US have either an F1 visa or a J1 visa.",
        "FOL": "\u2200x (InternationalStudent(x) \u2192 F1(x) \u2295 J1(x))"
    },
    {
        "NL": "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "FOL": "\u2200x (InternationalStudent(x) \u2227 F1(x) \u2227 WantWorkInUS(x) \u2192 Apply(x, cpt) \u2228 Apply(x, opt))"
    },
    {
        "NL": "Mike is an international student.",
        "FOL": "InternationalStudent(mike)"
    },
    {
        "NL": "Mike needs to apply for CPT if he wants to work in the US.",
        "FOL": "WantWorkInUS(mike) \u2192 Apply(mike, cpt)"
    },
    {
        "NL": "Mike has an F1 visa.",
        "FOL": "F1(mike)"
    },
    {
        "NL": "Mike has a J1 visa.",
        "FOL": "J1(mike)"
    },
    {
        "NL": "All cows are bovines.",
        "FOL": "\u2200x (Cow(x) \u2192 Bovine(x))"
    },
    {
        "NL": "Some pets are cows.",
        "FOL": "\u2203x (Pet(x) \u2227 Cow(x))"
    },
    {
        "NL": "If something is a bovine, then it is domesticated.",
        "FOL": "\u2200x (Bovine(x) \u2192 Domesticated(x))"
    },
    {
        "NL": "No domesticated animals are alligators.",
        "FOL": "\u2200x (Domesticated(x) \u2192 \u00acAligator(x))"
    },
    {
        "NL": "Ted is an aligator.",
        "FOL": "Aligator(ted)"
    },
    {
        "NL": "Ted is a pet.",
        "FOL": "Pet(ted)"
    },
    {
        "NL": "Ted is a pet and a cow.",
        "FOL": "Pet(ted) \u2227 Cow(ted)"
    },
    {
        "NL": "If Ted is a cow, then Ted is not a pet.",
        "FOL": "Cow(ted) \u2192 \u00acPet(ted)"
    },
    {
        "NL": "Yale University is a private Ivy League research university.",
        "FOL": "PrivateIvyLeagueResearchUniversity(yale)"
    },
    {
        "NL": "Yale University moved to New Haven in 1716.",
        "FOL": "MovedTo(yale, newhaven) \u2227 MovedIn(yale, y1716)"
    },
    {
        "NL": "Yale university's endowment was valued at $42.3 billion.",
        "FOL": "ValuedAt(yalesendowment, y42.3billion)"
    },
    {
        "NL": "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "FOL": "\u2203x (OrganizedInto(yale, x) \u2227 ConstituentCollegesandSchools(x) \u2227 ((ResidentialCollege(x) \u2295 GraduateSchool(x)) \u2295 ProfessionalSchool(x)))"
    },
    {
        "NL": "A private Ivy League research university moved to New Haven.",
        "FOL": "\u2203x (PrivateIvyLeagueResearchUniversity(x) \u2227 MovedTo(x, newhaven))"
    },
    {
        "NL": "Yale University has the largest university endowment of any educational institution.",
        "FOL": "LargestUniversityEndowmentOf(yale, anyeducationalinstitution)"
    },
    {
        "NL": "Pierson College is a residential college at Yale.",
        "FOL": "ResidentialCollege(piersoncollege) \u2227 AtYale(piersoncollege)"
    },
    {
        "NL": "Badults is a British Sitcom series, starring members of Pappy's.",
        "FOL": "\u2203x (MemberOf(x, pappys) \u2227 BritishSitcom(badults) \u2227 Series(badults) \u2227 Starring(badults, x))"
    },
    {
        "NL": "Badults piloted in July 2013 on BBC Three.",
        "FOL": "PilotedIn(badults, july2013) \u2227 PilotedOn(badults, bbcthree)"
    },
    {
        "NL": "The Working title \"The Secret Dude Society\" was used for Badults.",
        "FOL": "WorkingTitle(thesecretdudesociety, badults)"
    },
    {
        "NL": "Andrew Collins was the script editor for Badults",
        "FOL": "ScriptEditor(andrewcollins) \u2227 ScriptEditorFor(andrewcollins, badults)"
    },
    {
        "NL": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
        "FOL": "\u2203x (ScriptEditorFor(andrewcollins, x) \u2227 Series(x) \u2227 WorkingTitle(thesecretdudesociety, x))"
    },
    {
        "NL": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
        "FOL": "\u2200x \u2200y (MemberOf(x, pappys) \u2227 Starring(y, x) \u2192 \u00ac(PilotedOn(y, bbctwo) \u2228 PilotedOn(y, bbcthree)))"
    },
    {
        "NL": "All growth companies\u2019 stocks are volatile.",
        "FOL": "\u2200x (GrowthCompanies\u2019Stocks(x) \u2192 PriceVolatile(x))"
    },
    {
        "NL": "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "FOL": " \u2200x (PriceVolatile(x) \u2192 \u00acSuitableForRetirementRund(x)) "
    },
    {
        "NL": "Some companies\u2019 stocks are growth companies\u2019 stocks.",
        "FOL": " \u2203x (Companies\u2019Stocks(x) \u2227 GrowthCompanies\u2019Stocks(x))"
    },
    {
        "NL": "All mature companies\u2019 stocks are suitable for a retirement fund.",
        "FOL": " \u2200x (MatureCompanies\u2019Stocks(x) \u2192 SuitableForRetirementRund(x))"
    },
    {
        "NL": "KO is a mature company\u2019s stock.",
        "FOL": " MatureCompanies\u2019Stocks(kO)"
    },
    {
        "NL": "KO is a company stock.",
        "FOL": "Companies\u2019Stocks(kO)"
    },
    {
        "NL": "KO is a company stock and a growth company\u2019s stock.",
        "FOL": "Companies\u2019Stocks(kO) \u2227 GrowthCompanies\u2019Stocks(kO)"
    },
    {
        "NL": "If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.",
        "FOL": "GrowthCompanies\u2019Stocks(kO) \u2228 PriceVolatile(kO) \u2192 \u00acCompanies\u2019Stocks(kO) \u2228 \u00acPriceVolatile(kO)"
    },
    {
        "NL": "All vehicle registration plates in Istanbul begin with the number 34.",
        "FOL": "\u2200x (Vehicleregistrationplate(x, istanbul) \u2192 Beginwith(x, number34))"
    },
    {
        "NL": "Plates that do not begin with the number 34 are not from Istanbul. ",
        "FOL": "\u2200x (\u00acBeginwith(x, number34) \u2192 \u00acFromIstanbul(x))"
    },
    {
        "NL": "Joe's vehicle registration plate is from Istanbul. ",
        "FOL": "Vehicleregistrationplate(joe, istanbul)"
    },
    {
        "NL": "Tom's license plate begins with the number 35. ",
        "FOL": "Beginwith(tom, number35)"
    },
    {
        "NL": "[BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
        "FOL": "\u2200x (Beginwith(x, number35) \u2192 \u00acBeginwith(x, number34))"
    },
    {
        "NL": "Joe's license plate begins with the number 34.",
        "FOL": "Beginwith(joe, number34)"
    },
    {
        "NL": "Tom's license plate is from Istanbul.",
        "FOL": "Vehicleregistrationplate(tom, istanbul)"
    },
    {
        "NL": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "FOL": "\u2200x (StudentJobs(x) \u2192 Tuition(x))"
    },
    {
        "NL": "If people order takeout frequently in college, then they work in student jobs on campus.",
        "FOL": "\u2200x (Takeout(x) \u2192 StudentJobs(x))"
    },
    {
        "NL": "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "FOL": "\u2200x (Takeout(x) \u2228 DiningHall(x))"
    },
    {
        "NL": "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "FOL": "\u2200x (DiningHall(x) \u2192 NotPicky(x))"
    },
    {
        "NL": "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "FOL": "\u2200x (DiningHall(x) \u2192 Eating(x))"
    },
    {
        "NL": "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
        "FOL": "StudentJobs(mary) \u2227 Tuition(mary) \u2192 \u00ac(NotPicky(mary) \u2228 Tuition(mary))"
    },
    {
        "NL": "Mary needs to earn money to help pay for her college tuition.",
        "FOL": "Tuition(mary)"
    },
    {
        "NL": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "FOL": "NotPicky(mary) \u2227 Eating(mary)"
    },
    {
        "NL": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "FOL": "NotPicky(mary) \u2295 Eating(mary)"
    },
    {
        "NL": "No bakery is spicy.",
        "FOL": "\u2200x (Bakery(x) \u2192 \u00acSpicy(x))"
    },
    {
        "NL": "All cupcakes are bakeries.",
        "FOL": "\u2200x (Cupcakes(x) \u2192 Bakery(x))"
    },
    {
        "NL": "All hotpots are spicy.",
        "FOL": "\u2200x (Hotpot(x) \u2192 Spicy(x))"
    },
    {
        "NL": "All products of Baked by Melissa are cupcakes.",
        "FOL": "\u2200x (ProductsOfBakedByMelissa(x) \u2192 Cupcakes(x))"
    },
    {
        "NL": "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
        "FOL": "Spicy(driedThaiChilies) \u2228 Bakery(driedThaiChilies) \u2192 Hotpot(driedThaiChilies) \u2228 Spicy(driedThaiChilies)"
    },
    {
        "NL": "Dried Thai chilies are a product of Baked by Melissa.",
        "FOL": "ProductsOfBakedByMelissa(driedThaiChilies)"
    },
    {
        "NL": "Dried Thai chilies are not a product of Baked by Melissa.",
        "FOL": "\u00acProductsOfBakedByMelissa(driedThaiChilies)"
    },
    {
        "NL": "Dried Thai chilies are a hotpot.",
        "FOL": "Hotpot(driedThaiChilies)"
    },
    {
        "NL": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
        "FOL": "\u00acProductsOfBakedByMelissa(driedThaiChilies) \u2227 \u00acBakery(driedThaiChilies)"
    },
    {
        "NL": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
        "FOL": "Cupcake(driedThaiChilies) \u2227 ProductsOfBakedByMelissa(driedThaiChilies)"
    },
    {
        "NL": "If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.",
        "FOL": "\u2200x (YelpRecommendation(x) \u2192 \u00acNegativeReview(x))"
    },
    {
        "NL": "All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.",
        "FOL": "\u2200x (RatingGreaterThan9(x) \u2192 YelpRecommendation(x))"
    },
    {
        "NL": "Some restaurants that do not provide take-out service receive many negative reviews.",
        "FOL": "\u2203x (NoTakeOutService(x) \u2227 NegativeReview(x))"
    },
    {
        "NL": "All restaurants that are popular among local residents have ratings greater than 9.",
        "FOL": "\u2200x (PopularAmongLocalResidents(x) \u2192 RatingGreaterThan9(x))"
    },
    {
        "NL": "Subway has a rating greater than 9 or is popular among local residents.",
        "FOL": "RatingGreaterThan9(subway) \u2295 PopularAmongLocalResidents(subway)"
    },
    {
        "NL": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
        "FOL": "NoTakeOutService(subway)"
    },
    {
        "NL": "Subway provides take-out service and does not receive many negative reviews.",
        "FOL": "\u00ac(NoTakeOutService(subway) \u2227 NegativeReview(subway))"
    },
    {
        "NL": "Subway does not provide take-out service.",
        "FOL": "\u00ac(NoTakeOutService(subway) \u2227 NegativeReview(subway)) \u2192 PopularAmongLocalResidents(subway) \u2227 NoTakeOutService(subway)"
    },
    {
        "NL": "[BG] Books contain tons of knowledge.",
        "FOL": "\u2200x (Book(x) \u2192 Knowledge(x))"
    },
    {
        "NL": "[BG] When a person reads a book, that person gains knowledge. ",
        "FOL": "\u2200x \u2200y (ReadBook(x, y) \u2192 GainKnowledge(x))"
    },
    {
        "NL": "[BG] If a person gains knowledge, they become smarter.",
        "FOL": "\u2200x (GainKnowledge(x) \u2192 Smarter(x))"
    },
    {
        "NL": "Harry read the book \u201cWalden\u201d by Henry Thoreau.",
        "FOL": "ReadBook(harry, walden) \u2227 Book(walden)"
    },
    {
        "NL": "Walden contains knowledge.",
        "FOL": "Knowledge(walden)"
    },
    {
        "NL": "Harry is smarter than before.",
        "FOL": "Smarter(harry)"
    },
    {
        "NL": "A person who is smarter has gained knowledge.",
        "FOL": "\u2200x (Smarter(x) \u2192 GainKnowledge(x))"
    },
    {
        "NL": "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "FOL": "\u2200x (NLP(x) \u2192 NLG(x) \u2295 NLU(x))"
    },
    {
        "NL": "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "FOL": "\u2200x (NLP(x) \u2227 OutputSequence(x) \u2192 NLG(x))"
    },
    {
        "NL": "Machine translation is a natural language processing task.",
        "FOL": "NLP(machineTranslation)"
    },
    {
        "NL": "The output of machine translation is a text sequence.",
        "FOL": "OutputSequence(machineTranslation)"
    },
    {
        "NL": "Machine translation is a language generation task.",
        "FOL": "NLG(machineTranslation)"
    },
    {
        "NL": "Machine translation is a language understanding task.",
        "FOL": "NLU(machineTranslation)"
    },
    {
        "NL": "Pets are allowed in some managed buildings.",
        "FOL": "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))"
    },
    {
        "NL": "[BG] A deposit is required to rent an apartment in a managed building.",
        "FOL": "\u2200x (ManagedBuilding(x) \u2192 RequireDeposit(x))"
    },
    {
        "NL": "The security deposit can be either equal to one month's rent or more.",
        "FOL": "\u2200x (Rent2000(x) \u2194 \u00acDepositNoMoreThan1500(x))"
    },
    {
        "NL": "Fluffy is Tom's cat.",
        "FOL": "\u2200x (Rent2000(x) \u2194 DepositNoLessThan2000(x))"
    },
    {
        "NL": "Cats are pets.",
        "FOL": "Cat(fluffy)"
    },
    {
        "NL": "The Olive Garden is a managed building.",
        "FOL": "\u2200x (Cat(x) \u2192 Pet(x))"
    },
    {
        "NL": "The monthly rent at the Olive Garden is $2000.",
        "FOL": "ManagedBuilding(oliveGarden)"
    },
    {
        "NL": "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "FOL": "Rent2000(oliveGarden)"
    },
    {
        "NL": "2000$ is more than $1500.",
        "FOL": "\u2200x (TomRent(x) \u2194 (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 DepositNoMoreThan1500(x)))"
    },
    {
        "NL": "Tom will rent an apartment in The Olive Garden.",
        "FOL": "TomRent(oliveGarden)"
    },
    {
        "NL": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
        "FOL": "AllowPet(oliveGarden)"
    },
    {
        "NL": "The security deposit at the Olive Garden is either $2000 or more.",
        "FOL": "DepositNoLessThan2000(oliveGarden)"
    },
    {
        "NL": "If animals are loved by tourists, then they are Max's favorite animals. ",
        "FOL": "\u2200x (AnimalsLovedByTourists(x) \u2192 MaxFavoriteAnimals(x))"
    },
    {
        "NL": "All animals from Australia are loved by tourists. ",
        "FOL": " \u2200x (AnimalsFromAustralia(x) \u2192 AnimalsLovedByTourists(x))"
    },
    {
        "NL": "All quokka are animals from Australia. ",
        "FOL": " \u2200x (Quokka(x) \u2192 AnimalsFromAustralia(x))"
    },
    {
        "NL": "All of Max's favorite animals are very fluffy.",
        "FOL": " \u2200x (MaxFavoriteAnimals(x) \u2192 VeryFluffy(x)) "
    },
    {
        "NL": "All of Max's favorite animals love to sleep. ",
        "FOL": " \u2200x (MaxFavoriteAnimals(x) \u2192 LoveToSleep(x))"
    },
    {
        "NL": "If a koala is very fluffy, then the koala is not a quokka.",
        "FOL": " VeryFluffy(koala) \u2192 \u00acQuokka(koala)"
    },
    {
        "NL": "Koalas love to sleep.",
        "FOL": "LoveToSleep(koala)"
    },
    {
        "NL": "Koalas love to sleep and are quokka.",
        "FOL": "LoveToSleep(koala) \u2227 Quokka(koala)"
    },
    {
        "NL": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
        "FOL": "Quokka(koala) \u2192 LoveToSleep(koala) \u2295 VeryFluffy(koala)"
    },
    {
        "NL": "A man is either kind or evil.",
        "FOL": "\u2200x (Kind(x) \u2295 Evil(x))"
    },
    {
        "NL": "No ugly person is handsome.",
        "FOL": "\u2200x (Ugly(x) \u2192 \u00acHandsome(x))"
    },
    {
        "NL": "All evil people are ugly.",
        "FOL": "\u2200x (Evil(x) \u2192 Ugly(x))"
    },
    {
        "NL": "All gentlemen are handsome.",
        "FOL": "\u2200x (Gentleman(x) \u2192 Handsome(x))"
    },
    {
        "NL": "All CEOs are gentlemen.",
        "FOL": "\u2200x (CEO(x) \u2192 Gentleman(x))"
    },
    {
        "NL": "Harry is a gentleman.",
        "FOL": "Gentleman(harry)"
    },
    {
        "NL": "Harry is a CEO.",
        "FOL": "CEO(harry)"
    },
    {
        "NL": "Harry is kind or a CEO.",
        "FOL": "Kind(harry) \u2228 CEO(harry)"
    },
    {
        "NL": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
        "FOL": "(Evil(harry) \u2227 Ugly(harry)) \u2295 (\u00acEvil(harry) \u2227 \u00acUgly(harry)) \u2192 \u00acKind(harry) \u2227 \u00acCEO(harry)"
    },
    {
        "NL": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "FOL": "\u2200x (TwinTriplet(x) \u2192 Playing(x))"
    },
    {
        "NL": "If people have siblings who are the same age, then they are twins or triplets.",
        "FOL": "\u2200x (SameAge(x) \u2192 TwinTriplet(x))"
    },
    {
        "NL": "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "FOL": "\u2200x (Complain(x) \u2192 SameAge(x))"
    },
    {
        "NL": "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "FOL": "\u2200x (NotHome(x) \u2192 \u00acStrongBonds(x))"
    },
    {
        "NL": "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "FOL": "\u2200x (Playing(x) \u2192 NotHome(x))"
    },
    {
        "NL": "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ",
        "FOL": "(TwinTriplet(luke) \u2227 StrongBonds(luke)) \u2295 (\u00acTwinTriplet(luke) \u2227 \u00acStrongBonds(luke))"
    },
    {
        "NL": "Luke spends a lot of time hanging out and playing with his siblings.",
        "FOL": "Playing(luke)"
    },
    {
        "NL": "Luke complains often about annoying siblings.",
        "FOL": "Complain(luke)"
    },
    {
        "NL": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
        "FOL": "\u00ac(TwinTriplet(luke) \u2228 Complain(luke))"
    },
    {
        "NL": "It costs US $205 to take the GRE test.",
        "FOL": "Cost205(gre)"
    },
    {
        "NL": "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "FOL": "\u2200x (Hardship(x) \u2192 FinancialAid(x))"
    },
    {
        "NL": "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "FOL": "\u2200x (SingleParent(x) \u2228 FewResources(x) \u2192 Hardship(x))"
    },
    {
        "NL": "Tom lives in a single-parent family.",
        "FOL": "SingleParent(tom)"
    },
    {
        "NL": "His dad has been out of work for more than a year.",
        "FOL": "FewResources(tom)"
    },
    {
        "NL": "Tom can apply for financial aid from ETS to take the GRE test.",
        "FOL": "FinancialAid(tom)"
    },
    {
        "NL": "It cost below US $300 to take the GRE test.",
        "FOL": "CostBelow300(gre)"
    },
    {
        "NL": "There is no financial aid available for the GRE test.",
        "FOL": "\u00ac(\u2203x (FinancialAid(x)))"
    },
    {
        "NL": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "FOL": "\u2200x (Spill(x) \u2192 \u00acTidy(x))"
    },
    {
        "NL": "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "FOL": "\u2200x (Foodie(x) \u2192 Spill(x))"
    },
    {
        "NL": "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "FOL": "\u2200x (OnlyChild(x) \u2192 Tidy(x))"
    },
    {
        "NL": "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "FOL": "\u2200x (BusyParents(x) \u2192 OnlyChild(x))"
    },
    {
        "NL": "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "FOL": "\u2200x (HighIncome(x) \u2192 BusyParents(x))"
    },
    {
        "NL": "Peter tidies his space consistently and enjoys the process of cleaning.",
        "FOL": "Tidy(peter)"
    },
    {
        "NL": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
        "FOL": "Foodie(peter) \u2228 HighIncome(peter)"
    },
    {
        "NL": "All fir trees are evergreens.",
        "FOL": "\u2200x (FirTree(x) \u2192 Evergreen(x))"
    },
    {
        "NL": "Some objects of worship are fir trees.",
        "FOL": "\u2203x (ObjectOfWorship(x) \u2227 FirTree(x))"
    },
    {
        "NL": "Some evergreens are not objects of worship.",
        "FOL": "\u2203x (Evergreen(x) \u2227 \u00acObjectOfWorship(x))"
    },
    {
        "NL": "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "FOL": "MountainRange(picurismountains) \u2227 In(picurismountains, newmexico) \u2228 In(picurismountains, texas)"
    },
    {
        "NL": "Juan de Onate visited the Picuris Mountains.",
        "FOL": "Visited(juandeonate, picurismountains)"
    },
    {
        "NL": "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "FOL": "In(hardingpegmatitemine, picurismountains) \u2227 Mine(hardingpegmatitemine) \u2227 Donated(hardingpegmatitemine)"
    },
    {
        "NL": "There are no mountain ranges in texas that have mines which have been donated.",
        "FOL": "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))"
    },
    {
        "NL": "Juan de Onate visited a mountain range in New Mexico.",
        "FOL": "\u2203x (Visited(juandeonate, x) \u2227 MountainRange(x) \u2227 In(x, newmexico))"
    },
    {
        "NL": "Juan de Onate visited a mountain range in Texas.",
        "FOL": "\u2203x (Visited(juandeonate, x) \u2227 MountainRange(x) \u2227 In(x, texas))"
    },
    {
        "NL": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
        "FOL": "\u2200x (MountainRange(x) \u2227 In(hardingpegmatitemine, x) \u2192 \u00acIn(x, newmexico))"
    },
    {
        "NL": "If a man is taller than another man, the taller one can block the other's shooting.",
        "FOL": "\u2200x \u2200y (IsMan(x) \u2227 IsMan(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))"
    },
    {
        "NL": "Michael is a man who is taller than everyone else in his class.",
        "FOL": "\u2200x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2192 Taller(michael, x))"
    },
    {
        "NL": "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "FOL": "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))"
    },
    {
        "NL": "Peter is a man who is taller than Michael.",
        "FOL": "IsMan(peter) \u2227 Taller(peter, michael)"
    },
    {
        "NL": "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "FOL": "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))"
    },
    {
        "NL": "Michael cannot block Windy's shooting.",
        "FOL": "\u00acCanBlock(michael, windy)"
    },
    {
        "NL": "Every shooter who can jump when shooting is a great shooter.",
        "FOL": "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))"
    },
    {
        "NL": "Peter is shorter than a man in Michael's class.",
        "FOL": "\u2203x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2227 \u00acTaller(peter, x))"
    },
    {
        "NL": "Windy is a great shooter.",
        "FOL": "GreatShooter(windy)"
    },
    {
        "NL": "Peter can block Windy's shooting.",
        "FOL": "CanBlock(peter, windy)"
    },
    {
        "NL": "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "FOL": "Cove(barutin) \u2227 NameAfter(barutin, settlement) \u2227 Locate(settlement, bulgaria)"
    },
    {
        "NL": "Barutin Cove is on the southwest coast of Snow Island.",
        "FOL": "Locate(barutin, snow)"
    },
    {
        "NL": "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "FOL": "Locate(snow, shetland) \u2227 Locate(greenwich, shetland) \u2227 Locate(deception, shetland)"
    },
    {
        "NL": "The South Shetland Islands are considered part of Antarctica.",
        "FOL": "Locate(shetland, antarctica)"
    },
    {
        "NL": "Barutin is named after all islands in Antarctica.",
        "FOL": "\u2200x (Locate(x, antarctica) \u2192 NameAfter(barutin, x))"
    },
    {
        "NL": "There is at least one cove in Antarctica named after a place in Bulgaria.",
        "FOL": "\u2203x \u2203y (Cove(x) \u2227 NameAfter(x, y) \u2227 Locate(y, bulgaria))"
    },
    {
        "NL": "Barutin is not located in Antarctica.",
        "FOL": "\u00acLocate(barutin, antarctica)"
    },
    {
        "NL": "Some affection is love.",
        "FOL": "\u2203x (Affection(x) \u2227 Love(x))"
    },
    {
        "NL": "Some love is positive.",
        "FOL": "\u2203x (Love(x) \u2227 Positive(x))"
    },
    {
        "NL": "Some affection is positive.",
        "FOL": "\u2203x (Affection(x) \u2227 Positive(x))"
    },
    {
        "NL": "If something can transport multiple passengers, then they are not empty.",
        "FOL": "\u2200x (TransportMultiplePassengers(x) \u2192 \u00acEmpty(x))"
    },
    {
        "NL": "All airlines can transport multiple passengers.",
        "FOL": "\u2200x (Airline(x) \u2192 TransportMultiplePassengers(x))"
    },
    {
        "NL": "All planes are empty.",
        "FOL": "\u2200x (Plane(x) \u2192 Empty(x))"
    },
    {
        "NL": "All Boeing 707s are planes.",
        "FOL": "\u2200x (Boeing707(x) \u2192 Plane(x))"
    },
    {
        "NL": "If Greyhound is not an airline, then there are no Greyhound planes.",
        "FOL": "\u00acAirline(greyhound) \u2192 \u00ac(Airline(greyhound) \u2228 Plane(greyhound))"
    },
    {
        "NL": "Greyhound is an airline.",
        "FOL": "Airline(greyhound)"
    },
    {
        "NL": "A Greyhound is a Boeing 707.",
        "FOL": "Boeing707(greyhound)"
    },
    {
        "NL": "A Greyhound is not a Boeing 707.",
        "FOL": "\u00acBoeing707(greyhound)"
    },
    {
        "NL": "All mammals are animals.",
        "FOL": "\u2200x  (Mammal (x)\u2192  Animal (x))"
    },
    {
        "NL": "All monkeys are mammals. ",
        "FOL": "\u2200x  (Monkey (x)\u2192  Mammal (x))"
    },
    {
        "NL": "An animal is either a monkey or a bird.",
        "FOL": "\u2200x ( Monkey (x) \u2228  Bird (x))"
    },
    {
        "NL": "All birds fly.",
        "FOL": "\u2200x  (Bird (x)\u2192  Fly (x))"
    },
    {
        "NL": "If something can fly, then it has wings.",
        "FOL": "\u2200x  (Fly (x)\u2192  HaveWings (x))"
    },
    {
        "NL": "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
        "FOL": "\u00ac Fly (rock) \u2227 \u00ac Bird (rock) \u2192 \u00ac Fly (rock) \u2227 \u00ac Breathe (rock) "
    },
    {
        "NL": "Rock is a monkey.",
        "FOL": "Monkey(rock)"
    },
    {
        "NL": "Rock has wings.",
        "FOL": "HaveWings(rock)"
    },
    {
        "NL": "Rock does not have wings.",
        "FOL": "\u00ac HaveWings(rock)"
    },
    {
        "NL": "All people who have a wedding are people who have at least one child.",
        "FOL": "\u2200x (Wedding(x) \u2192 Child(x))"
    },
    {
        "NL": "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "FOL": "\u2200x (Paris(x) \u2192 Wedding(x))"
    },
    {
        "NL": "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "FOL": "\u2200x (July(x) \u2192 Paris(x))"
    },
    {
        "NL": "Some weddings in July are well-attended.",
        "FOL": "\u2203x (July(x) \u2227 WellAttended(x))"
    },
    {
        "NL": "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "FOL": "Child(john) \u2192 \u00ac(Paris(john) \u2227 Wedding(john))"
    },
    {
        "NL": "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
        "FOL": "WellAttended(john) \u2192 July(john) \u2295 Paris(john)"
    },
    {
        "NL": "John has a wedding that is well-attended.",
        "FOL": "WellAttended(john)"
    },
    {
        "NL": "John does not have a wedding that is well-attended.",
        "FOL": "\u00acWellAttended(john)"
    },
    {
        "NL": "John has at least one child.",
        "FOL": "Child(john)"
    },
    {
        "NL": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
        "FOL": "\u00ac(WellAttended(john) \u2228 July(john))"
    },
    {
        "NL": "[BG] Some mammals have teeth.",
        "FOL": "\u2203x (Mammal(x) \u2227 Have(x, teeth))"
    },
    {
        "NL": "Platypus have no teeth.",
        "FOL": "\u00acHave(platypus, teeth)"
    },
    {
        "NL": "Platypus are mammals. ",
        "FOL": "Mammal(platypus)"
    },
    {
        "NL": "Humans have teeth.",
        "FOL": "Have(humans, teeth)"
    },
    {
        "NL": "Platypus are mammals with no teeth.",
        "FOL": "Mammal(platypus) \u2227 \u00acHave(platypus, teeth)"
    },
    {
        "NL": "Platypus are reptiles.",
        "FOL": "Reptile(platypus)"
    },
    {
        "NL": "Plungers suck.",
        "FOL": "\u2200x (Plunger(x) \u2192 Suck(x))"
    },
    {
        "NL": "Vacuums suck.",
        "FOL": "\u2200x (Vacuum(x) \u2192 Suck(x))"
    },
    {
        "NL": "Vampires suck.",
        "FOL": "\u2200x (Vampire(x) \u2192 Suck(x))"
    },
    {
        "NL": "Space is a vacuum.",
        "FOL": "Vacuum(space)"
    },
    {
        "NL": "A duster is a household appliance that doesn't suck.",
        "FOL": "HouseHoldApp(duster) \u2227 \u00ac Suck(duster)"
    },
    {
        "NL": "Space sucks.",
        "FOL": "Suck(space)"
    },
    {
        "NL": "Space is a vampire.",
        "FOL": "Vampire(space)"
    },
    {
        "NL": "If something is a household appliance, it sucks.",
        "FOL": "\u2200x (HouseHoldApp(x) \u2192 Suck(x))"
    },
    {
        "NL": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "FOL": "MLAlgorithm(supervisedLearning) \u2228 MLAlgorithm(unsupervisedLearning) \u2228 MLAlgorithm(reinforcementLearning)"
    },
    {
        "NL": "Unsupervised learning doesn't require labelled data.",
        "FOL": "\u00acRequireLabelledData(unsupervisedLearning)"
    },
    {
        "NL": "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "FOL": "TrainTextSumModel(supervisedLearning) \u2228 TrainTextSumModel(unsupervisedLearning) \u2228 TrainTextSumModel(reinforcementLearning)"
    },
    {
        "NL": "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "FOL": "\u00acTrainTextSumModel(reinforcementLearning)"
    },
    {
        "NL": "The Machine Learning algorithm for training text summarization model requires labelled data.",
        "FOL": "\u2200x ((MLAlgorithm(x) \u2227 TrainTextSumModel(x)) \u2192 RequireLabelledData(x))"
    },
    {
        "NL": "Supervised learning is used to train the state-of-the-art text summarization model.",
        "FOL": "TrainTextSumModel(supervisedLearning)"
    },
    {
        "NL": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
        "FOL": "TrainTextSumModel(unsupervisedLearning)"
    },
    {
        "NL": "If a cartoon character is funny, then it is popular.",
        "FOL": "\u2200x (Funny(x) \u2192 Popular(x))"
    },
    {
        "NL": "If a cartoon character is ugly, then it is not popular.",
        "FOL": "\u2200x (Ugly(x) \u2192 \u00acPopular(x))"
    },
    {
        "NL": "If a cartoon character is loved by children, then it is funny.",
        "FOL": "\u2200x (Love(children, x) \u2192 Funny(x))"
    },
    {
        "NL": "If a cartoon character is from The Simpsons, then it is loved by children.",
        "FOL": "\u2200x (Simpsons(x) \u2192 Love(children, x))"
    },
    {
        "NL": "If a cartoon character is yellow, then it is from The Simpsons.",
        "FOL": "\u2200x (Yellow(x) \u2192 Simpsons(x))"
    },
    {
        "NL": "Ben is either from The Simpsons or funny.",
        "FOL": "Simpsons(ben) \u2295 Funny(ben)"
    },
    {
        "NL": "Ben is loved by children.",
        "FOL": "Love(children, ben)"
    },
    {
        "NL": "Ben is ugly or yellow.",
        "FOL": "Ugly(ben) \u2228 Yellow(ben)"
    },
    {
        "NL": "Ben is either yellow and ugly or neither yellow nor ugly.",
        "FOL": "(Yellow(ben) \u2227 Ugly(ben)) \u2295 (\u00acYellow(ben) \u2227 \u00acUgly(ben))"
    },
    {
        "NL": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "FOL": "\u2200x \u2200y (BreedingBack(x, y) \u2192 ArtificiallySelect(x))"
    },
    {
        "NL": "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "FOL": "\u2203x \u2203y (HeckCattle(x) \u2227 Aurochs(y) \u2227 BreedingBack(x, y))"
    },
    {
        "NL": "[BG] Heck cattle are animals.",
        "FOL": "\u2200x (HeckCattle(x) \u2192 Animal(x))"
    },
    {
        "NL": "[BG] Aurochs are animals.",
        "FOL": "\u2200x (Aurochs(x) \u2192 Animal(x))"
    },
    {
        "NL": "Some animals to be bred-back resemble animals that are extinct.",
        "FOL": "\u2203x \u2203y (Animal(x) \u2227 Animal(y) \u2227 BreedingBack(x, y) \u2227 Extinct(y))"
    },
    {
        "NL": "Some Heck cattle are artificially selected.",
        "FOL": "\u2203x (HeckCattle(x) \u2227 ArtificiallySelect(x))"
    },
    {
        "NL": "Aurochs are extinct.",
        "FOL": "\u2200x (Aurochs(x) \u2192 Extinct(x))"
    },
    {
        "NL": "All students are humans. ",
        "FOL": "\u2200x (Student(x) \u2192 Human(x))"
    },
    {
        "NL": "If someone studies, then they are a student.",
        "FOL": "\u2200x (Study(x) \u2192 Student(x))"
    },
    {
        "NL": "A person either studys or teaches.",
        "FOL": "\u2200x (Study(x) \u2228 Teach(x))"
    },
    {
        "NL": "No young person teaches.",
        "FOL": "\u2200x (Young(x) \u2192 \u00acTeach(x))"
    },
    {
        "NL": "Jerry neither teaches nor is a manager.",
        "FOL": "\u00acTeach(jerry) \u2227 \u00acManager(jerry)"
    },
    {
        "NL": "Rose is young or a student.",
        "FOL": "Young(rose) \u2228 Student(rose)"
    },
    {
        "NL": "Jerry is young.",
        "FOL": "Young(jerry)"
    },
    {
        "NL": "Jerry is not young.",
        "FOL": "\u00acYoung(jerry)"
    },
    {
        "NL": "Rose is a human or a manager.",
        "FOL": "Human(rose) \u2228 Manager(rose)"
    },
    {
        "NL": "Rose is a human or Jerry is a manager.",
        "FOL": "Human(rose) \u2228 Manager(jerry)"
    },
    {
        "NL": "It is not true that Rose is a student and Jerry is a human.",
        "FOL": "\u00ac(Student(rose) \u2227 Human(jerry))"
    },
    {
        "NL": "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "FOL": "PublishingHouse(newvesselpress) \u2227 SpecializesIn(newvessel, translatingforeignliteratureintoenglish)"
    },
    {
        "NL": "All of New Vessel Press's published books are in English.",
        "FOL": "\u2200x (Book(x) \u2227 PublishedBy(x, newvesselpress) \u2192 In(x, english))"
    },
    {
        "NL": "Neapolitan Chronicles is a book published by New Vessel Press.",
        "FOL": "Book(neapolitanchronicles) \u2227 PublishedBy(neapolitanchronicles, newvesselpress)"
    },
    {
        "NL": "Neapolitan Chronicles was translated from Italian.",
        "FOL": "TranslatedFrom(neapolitanchronicles, italian)"
    },
    {
        "NL": "Palace of Flies is a book published by New Vessel Press.",
        "FOL": "Book(palaceofflies) \u2227 PublishedBy(palaceofflies, newvesselpress)"
    },
    {
        "NL": "Neapolitan Chronicles is an English book.",
        "FOL": "Book(neapolitanchronicles) \u2227 In(neapolitanchronicles, english)"
    },
    {
        "NL": "Harry Potter was published by New Vessel Press.",
        "FOL": "PublishedBy(harrrypotter, newvesselpress)"
    },
    {
        "NL": "Palace of Flies was translated from Italian.",
        "FOL": "TranslatedFrom(palaceofflies, italian)"
    },
    {
        "NL": "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "FOL": "\u2200x (Desktop(x) \u2192 WorkHome(x))"
    },
    {
        "NL": "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "FOL": "\u2200x (HomeOffice(x) \u2192 Desktop(x))"
    },
    {
        "NL": "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "FOL": "\u2200x (WorkHome(x) \u2192 Tidying(x))"
    },
    {
        "NL": "All people who work regularly and often at home visit the office supply store regularly.",
        "FOL": "\u2200x (WorkHome(x) \u2192 OfficeStore(x))"
    },
    {
        "NL": "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "FOL": "\u2200x (Tidying(x) \u2192 \u00acLate(x))"
    },
    {
        "NL": "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ",
        "FOL": "(Late(remy) \u2227 Tidying(remy)) \u2295 (\u00acLate(remy) \u2227 \u00acTidying(remy))"
    },
    {
        "NL": "Remy visits the office supply store regularly.",
        "FOL": "OfficeStore(remy)"
    },
    {
        "NL": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
        "FOL": "HomeOffice(remy) \u2227 OfficeStore(remy)"
    },
    {
        "NL": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
        "FOL": "Late(remy) \u2228 OfficeStore(remy) \u2192 \u00ac(Tidying(remy) \u2228 HomeOffice(remy))"
    },
    {
        "NL": "All humans are mortal.",
        "FOL": "\u2200x (Human(x) \u2192 Mortal(x))"
    },
    {
        "NL": "All Greeks are humans.",
        "FOL": "\u2200x (Greek(x) \u2192 Human(x))"
    },
    {
        "NL": "Some Greeks are mortal.",
        "FOL": "\u2203x (Greek(x) \u2227 Mortal(x))"
    },
    {
        "NL": "No students who work in the library are from the computer science department. ",
        "FOL": "\u2200x (WorkLibrary(x) \u2192 \u00acComputerScience(x))"
    },
    {
        "NL": "All students who have part-time jobs offered by the university are students who work in the library. ",
        "FOL": "\u2200x (PartTime(x) \u2192 WorkLibrary(x))"
    },
    {
        "NL": "All students who take the database course are from the computer science department. ",
        "FOL": "\u2200x (Database(x) \u2192 ComputerScience(x))"
    },
    {
        "NL": "All students instructed by professor David are taking the database course. ",
        "FOL": "\u2200x (ProfessorDavid(x) \u2192 Database(x))"
    },
    {
        "NL": "All students working in the lab are instructed by professor David. ",
        "FOL": "\u2200x (WorkInLab(x) \u2192 ProfessorDavid(x))"
    },
    {
        "NL": "James is a student working in the lab. ",
        "FOL": "WorkInLab(james)"
    },
    {
        "NL": "Jack neither has a part-time job offered by the university nor works in the lab. ",
        "FOL": "\u00acPartTime(jack) \u2227 \u00acWorkInLab(jack)"
    },
    {
        "NL": "James has a part-time job offered by the university.",
        "FOL": "PartTime(james)"
    },
    {
        "NL": "James does not have a part-time job offered by the university.",
        "FOL": "\u00acPartTime(james)"
    },
    {
        "NL": "James either takes the database course or has a part-time job offered by the university.",
        "FOL": "Database(james) \u2295 PartTime(james)"
    },
    {
        "NL": "Jack takes the database course.",
        "FOL": "Database(jack)"
    },
    {
        "NL": "If George likes music, he wants to compose.",
        "FOL": "LikesMusic(george) \u2192 WantsToCompose(george)"
    },
    {
        "NL": "If George has access to a program, he can compose.",
        "FOL": "AccesstoProgram(george) \u2192 CanCompose(george)"
    },
    {
        "NL": "If George can compose and wants to compose, he will compose.",
        "FOL": "(WantsToCompose(george) \u2227 CanCompose(george)) \u2192 WillCompose(george)"
    },
    {
        "NL": "If George likes music and has access to a program, he will compose.",
        "FOL": "(LikesMusic(george) \u2227 AccesstoProgram(george)) \u2192 WillCompose(george)"
    },
    {
        "NL": "If George will not compose, George can not compose.",
        "FOL": "\u00acWantsToCompose(george) \u2192 \u00acWillCompose(george)"
    },
    {
        "NL": "A hawk never lands. ",
        "FOL": "\u2200x (Hawk(x) \u2192 \u00acLands(x))"
    },
    {
        "NL": "Some birds are hawks.",
        "FOL": "\u2203x (Bird(x) \u2227 Hawk(x))"
    },
    {
        "NL": "All birds land",
        "FOL": "\u2200x (Bird(x) \u2192 Lands(x))"
    },
    {
        "NL": "On some Mondays at 8 pm, roses are given out on TV.",
        "FOL": "\u2203x (Mondayat8(x) \u2227 RoseGivenOutOnTv(x))"
    },
    {
        "NL": "Every rose given out on TV is on the Bachelor.",
        "FOL": "\u2200x (RoseGivenOutOnTv(x) \u2192 OnBachelor(x))"
    },
    {
        "NL": "Everything on the Bachelor portrays the lives of real people.",
        "FOL": "\u2200x (OnBachelor(x) \u2192 PortrayLiveOfRealPeople(x))"
    },
    {
        "NL": "All shows portraying the lives of real people are reality TV shows.",
        "FOL": "\u2200x (PortrayLiveOfRealPeople(x) \u2192 RealityTVShow(x))"
    },
    {
        "NL": "Breaking Bad is not a reality TV show.",
        "FOL": "\u00acRealityTVShow(breakingbad)"
    },
    {
        "NL": "Breaking Bad is on Monday at 8 pm.",
        "FOL": "Mondayat8(breakingbad)"
    },
    {
        "NL": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
        "FOL": "Mondayat8(breakingbad) \u2227 RoseGivenOutOnTv(breakingbad)"
    },
    {
        "NL": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
        "FOL": "RoseGivenOutOnTv(breakingbad) \u2192 Mondayat8(breakingbad)"
    },
    {
        "NL": "Heinrich Scmidt was a Nazi German politician. ",
        "FOL": "From(heinrichScmidt, naziGermany) \u2227 Politician(heinrichScmidt)"
    },
    {
        "NL": "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
        "FOL": "Member(heinrichScmidt, prussianStateParliament) \u2227 Member(heinrichScmidt, naziReichstag)"
    },
    {
        "NL": "Heinrich Schmidt was either German or Russian.",
        "FOL": "From(heinrichScmidt, naziGermany) \u2228 From(heinrichScmidt, russia)"
    },
    {
        "NL": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
        "FOL": "\u2203x (From(x, naziGermany) \u2227 Politician(x) \u2227 Member(x, prussianStateParliament) \u2227 Member(x, naziReichstag))"
    },
    {
        "NL": "No politicans are part of the Nazi Reichstag.",
        "FOL": "\u2200x (Politician(x) \u2192 \u00acMember(x, naziReichstag))"
    },
    {
        "NL": "If something is a deadly disease, then its survival rate is low. ",
        "FOL": "\u2200x (DeadlyDiseases(x) \u2192 SurvivalRateIsLow(x))"
    },
    {
        "NL": "All severe cancers are deadly diseases.",
        "FOL": "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))"
    },
    {
        "NL": "Bile duct cancer is a severe cancer. ",
        "FOL": "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))"
    },
    {
        "NL": "All Cholangiocarcinoma is bile duct cancer.",
        "FOL": "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))"
    },
    {
        "NL": "No one with mild flu has a low survival rate.",
        "FOL": "\u2200x (MildFlu(x) \u2192 \u00acSurvivalRateIsLow(x)) "
    },
    {
        "NL": "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
        "FOL": "BileDuctCancer(colorectalCancer) \u2228 SurvivalRateIsLow(colorectalCancer) \u2192 \u00acBileDuctCancer(colorectalCancer)"
    },
    {
        "NL": "Colorectal cancer is a severe cancer",
        "FOL": "SevereCancer(colorectalCancer)"
    },
    {
        "NL": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
        "FOL": "BileDuctCancer(colorectalCancer) \u2228 Cholangiocarcinoma(colorectalCancer) \u2192 BileDuctCancer(colorectalCancer) \u2227 MildFlu(colorectalCancer)"
    },
    {
        "NL": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
        "FOL": "\u00acMildFlu(colorectalCancer) \u2228 \u00acCholangiocarcinoma(colorectalCancer) \u2192 BileDuctCancer(colorectalCancer) \u2228 Cholangiocarcinoma(colorectalCancer)"
    },
    {
        "NL": "All people who eat salads regularly are very conscious about their health and eating habits.",
        "FOL": "\u2200x (Salad(x) \u2192 HealthyHabits(x))"
    },
    {
        "NL": "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "FOL": "\u2200x (HealthyChildhood(x) \u2192 Salad(x))"
    },
    {
        "NL": "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "FOL": "\u2200x (Nutritional(x) \u2192 HealthyChildhood(x))"
    },
    {
        "NL": "If people have good relationships with their parents, then they do not eat salads regularly.",
        "FOL": "\u2200x (GoodRelationship(x) \u2192 \u00acHealthyHabits(x))"
    },
    {
        "NL": "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "FOL": "\u2200x (Gym(x) \u2192 Nutritional(x))"
    },
    {
        "NL": "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
        "FOL": "(HealthyChildhood(taylor) \u2227 GoodRelationship(taylor)) \u2228 \u00acHealthyChildhood(taylor) \u2227 \u00acGoodRelationship(marcy)"
    },
    {
        "NL": "Taylor eats salads regularly.",
        "FOL": "Salad(taylor)"
    },
    {
        "NL": "Taylor visits the gym at least once a day.",
        "FOL": "Gym(taylor)"
    },
    {
        "NL": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
        "FOL": "\u00ac(HealthyChildhood(taylor) \u2228 Gym(taylor))"
    },
    {
        "NL": "[BG] The Olympic games is a sporting event. ",
        "FOL": "SportingEvent(olympics)"
    },
    {
        "NL": "The last Olympic games was in Tokyo.",
        "FOL": "LastOlympics(tokyo)"
    },
    {
        "NL": "The United States won the most medals in Tokyo. ",
        "FOL": "MostMedals(unitedStates, tokyo)"
    },
    {
        "NL": "The world championships is a sporting event.",
        "FOL": "SportingEvent(champs)"
    },
    {
        "NL": "The last Olympic games were not in Tokyo.",
        "FOL": "\u00acLastOlympics(tokyo)"
    },
    {
        "NL": "The United States won the most medals in the last Olympic games.",
        "FOL": "\u2203x (LastOlympics(x) \u2227 MostMedals(unitedStates, x))"
    },
    {
        "NL": "All horses have hooves.",
        "FOL": "\u2200x (Horse(x) \u2192 Hooves(x))"
    },
    {
        "NL": "No humans have hooves.",
        "FOL": "\u2200x (Human(x) \u2192 \u00acHooves(x))"
    },
    {
        "NL": "Some humans are horses.",
        "FOL": "\u2203x (Human(x) \u2227 Horse(x))"
    },
    {
        "NL": "Susan flies to LGA airport.",
        "FOL": "FlyTo(susan, lga)"
    },
    {
        "NL": "The departure and arrival can not be the same airport.",
        "FOL": "\u2200x \u2200y (FlyFrom(x, y) \u2295 FlyTo(x, y))"
    },
    {
        "NL": "John flies from LGA airport.",
        "FOL": "FlyFrom(john, lga)"
    },
    {
        "NL": "Susan flies from LGA airport.",
        "FOL": "FlyFrom(susan, lga)"
    },
    {
        "NL": "John flies to LGA airport.",
        "FOL": "FlyTo(john, lga)"
    },
    {
        "NL": "No one nice to animals is mean to animals.",
        "FOL": "\u2200x (Nice(x) \u2192 \u00acMean(x))"
    },
    {
        "NL": "Some grumpy people are mean to animals.",
        "FOL": "\u2203x (Grumpy(x) \u2227 Mean(x))"
    },
    {
        "NL": "All animal lovers are nice to animals.",
        "FOL": "\u2200x (AnimalLover(x) \u2192 Nice(x))"
    },
    {
        "NL": "If someone owns a pet, then they love animals.",
        "FOL": "\u2200x (PetOwner(x) \u2192 AnimalLover(x))"
    },
    {
        "NL": "Tom is a pet owner.",
        "FOL": "PetOwner(tom)"
    },
    {
        "NL": "Tom is a grumpy person.",
        "FOL": "Grumpy(tom)"
    },
    {
        "NL": "Tom is not a grumpy person and mean to animals.",
        "FOL": "\u00ac(Grumpy(tom) \u2227 Mean(tom))"
    },
    {
        "NL": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
        "FOL": "\u00ac(Grumpy(tom) \u2227 Mean(tom)) \u2192 \u00ac(Grumpy(tom) \u2228 AnimalLover(tom))"
    },
    {
        "NL": "A podcast is not a novel.",
        "FOL": "\u2200x (IsPodcast(x) \u2192 \u00acIsNovel(x))"
    },
    {
        "NL": "[BG] If a person is born in American City, the person is American.",
        "FOL": "\u2200x \u2203y (BornIn(x, y) \u2227 IsCity(y) \u2227 IsAmerican(y) \u2192 IsAmerican(x))"
    },
    {
        "NL": "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "FOL": "\u2200x \u2200y (IsNovel(x) \u2227 WrittenBy(x, y) \u2192 WritesNovel(y))"
    },
    {
        "NL": "Dani Shapiro is an American writer.",
        "FOL": "IsAmerican(dani_Shapiro) \u2227 IsWriter(dani_Shapiro)"
    },
    {
        "NL": "Family History is written by Dani Shapiro.",
        "FOL": "WrittenBy(family_History, dani_Shapiro)"
    },
    {
        "NL": "Family History is a novel written in 2003.",
        "FOL": "IsNovel(family_History) \u2227 WrittenIn(family_History, y2003)"
    },
    {
        "NL": "Dani Shapiro created a podcast called Family Secrets.",
        "FOL": "IsPodcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)"
    },
    {
        "NL": "[BG] Boston is an American city.",
        "FOL": "IsCity(boston) \u2227 IsAmerican(boston)"
    },
    {
        "NL": "Dani Shapiro is a novel writer.",
        "FOL": "WritesNovel(dani_Shapiro)"
    },
    {
        "NL": "Family Secrets is a novel.",
        "FOL": "IsNovel(family_Secrets)"
    },
    {
        "NL": "Dani Shapiro was born in Boston.",
        "FOL": "BornIn(dani_Shapiro, boston)"
    },
    {
        "NL": "Some basketball players are not American.",
        "FOL": "\u2203x (BasketballPlayer(x) \u2227 \u00acAmerican(x))"
    },
    {
        "NL": "All basketball players are tall.",
        "FOL": "\u2200x (BasketballPlayer(x) \u2192 Tall(x))"
    },
    {
        "NL": "If someone is tall, they wear large shoes.",
        "FOL": "\u2200x (Tall(x) \u2192 WearLargeShoes(x))"
    },
    {
        "NL": "If someone wears large shoes, they wear large-sized clothes.",
        "FOL": "\u2200x (WearLargeShoes(x) \u2192 WearLargeClothes(x))"
    },
    {
        "NL": "Yuri does not wear large-size clothes.",
        "FOL": "\u00acWearLargeClothes(yuri)"
    },
    {
        "NL": "Yuri is an American.",
        "FOL": "American(yuri)"
    },
    {
        "NL": "Yuri is not an American basketball player.",
        "FOL": "\u00ac(American(yuri) \u2227 BasketballPlayer(yuri))"
    },
    {
        "NL": "Yuri is an American basketball player.",
        "FOL": "American(yuri) \u2227 BasketballPlayer(yuri)"
    },
    {
        "NL": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
        "FOL": "\u00acWearLargeShoes(yuri) \u2192 (American(yuri) \u2227 BasketballPlayer(yuri))"
    },
    {
        "NL": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
        "FOL": "\u00ac(American(yuri) \u2227 BasketballPlayer(yuri)) \u2192 BasketballPlayer(yuri)"
    },
    {
        "NL": "Events are either happy or sad.",
        "FOL": "\u2200x (Event(x) \u2192 Happy(x) \u2295 Sad(x))"
    },
    {
        "NL": "At least one event is happy. ",
        "FOL": "\u2203x (Event(x) \u2227 Happy(x)) "
    },
    {
        "NL": "All events are sad.",
        "FOL": "\u2200x (Event(x) \u2192 Sad(x))"
    },
    {
        "NL": "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "FOL": "Winner(maurier, steinhauer)"
    },
    {
        "NL": "Steinhauer participated in the 1992 du Maurier Classic.",
        "FOL": "Participate(maurier, steinhauer)"
    },
    {
        "NL": "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "FOL": "\u2203x (LeaderBoard(maurier, x) \u2227 SixWayTie(x) \u2227 Belgium(x))"
    },
    {
        "NL": "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "FOL": "Belgium(descampe) \u2227 LeaderBoard(maurier, descampe)"
    },
    {
        "NL": "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
        "FOL": "\u2200x (LeaderBoard(maurier, x) \u2192 Participate(maurier, x))"
    },
    {
        "NL": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
        "FOL": "\u00acWinner(maurier, steinhauer)"
    },
    {
        "NL": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
        "FOL": "SixWayTie(descampe)"
    },
    {
        "NL": "If an animal barks, then Jane does not like it.",
        "FOL": "\u2200x (Bark(x) \u2192 \u00acLike(jane, x))"
    },
    {
        "NL": "All dogs are animals that bark.",
        "FOL": "\u2200x (Dog(x) \u2192 Bark(x))"
    },
    {
        "NL": "If an animal jumps, then Jane likes it.",
        "FOL": "\u2200x (Jump(x) \u2192 Like(jane, x))"
    },
    {
        "NL": "If an animal has legs, then it jumps.",
        "FOL": "\u2200x (HaveLegs(x) \u2192 Jump(x))"
    },
    {
        "NL": "If an animal is terricolous, then it has legs. ",
        "FOL": "\u2200x (Terricolous(x) \u2192 HaveLegs(x))"
    },
    {
        "NL": "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
        "FOL": "(\u00acJump(kiki) \u2227 \u00acHaveLegs(kiki)) \u2192 (Terricolous(kiki) \u2228 HaveLegs(kiki))"
    },
    {
        "NL": "KiKi is terricolous.",
        "FOL": "Terricolous(kiki)"
    },
    {
        "NL": "KiKi barks and is a dog.",
        "FOL": "Bark(kiki) \u2227 Dog(kiki)"
    },
    {
        "NL": "KiKi neither barks nor is a dog.",
        "FOL": "\u00acBark(kiki) \u2227 \u00acDog(kiki)"
    },
    {
        "NL": "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "FOL": "BornIn(ailtonsilva, y1995) \u2227 CommonlyKnownAs(ailtonsilva, ailton)"
    },
    {
        "NL": "Ailton is a football player who was loaned out to Braga.",
        "FOL": "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)"
    },
    {
        "NL": "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "FOL": "Brazilian(ailtonsilva) \u2227 Footballplayer(ailtonsilva) \u2227 PlaysFor(ailtonsilva, nautico)"
    },
    {
        "NL": "Nautico is a football club along with Braga.",
        "FOL": "FootballClub(nautico) \u2227 FootballClub(braga)"
    },
    {
        "NL": "Fluminense is a football club.",
        "FOL": "FootballClub(fluminense)"
    },
    {
        "NL": "No one playing for Nautico is Brazilian.",
        "FOL": "\u2200x (PlaysFor(x, nautico) \u2192 \u00acBrazilian(x))"
    },
    {
        "NL": "Ailton Silva foes not play for a football club.",
        "FOL": "\u2200x (FootballClub(x) \u2192 \u00acPlaysFor(ailtonsilva, x))"
    },
    {
        "NL": "Ailton was not loaned out to a football club.",
        "FOL": "\u2200x (FootballClub(x) \u2192 \u00acLoanedTo(ailton, x))"
    },
    {
        "NL": "Ailton Silva played for Fluminense.",
        "FOL": "PlaysFor(ailtonsilva, fluminense)"
    },
    {
        "NL": "Ailton Silva was loaned out to a football club.",
        "FOL": "\u2203x (FootballClub(x) \u2227 LoanedTo(ailtonsilva, x))"
    }
]