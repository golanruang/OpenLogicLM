[
    {
        "id": "0b08bdcd-956d-4db1-9f1d-8cdac84182b4",
        "type": "Arrangement",
        "context": "In a colony of five dolphins, marine biologists are observing their intelligence levels. Dolphins are known for their complex social structures and behaviors, suggesting varying degrees of intelligence. The scientists have ranked the dolphins on a scale of 1 to 5, where 1 indicates the least intelligent and 5 the most intelligent.",
        "nl_premises": "Dolphin Bella, known for her quick learning, is more intelligent than Dolphin Andy, who is still mastering basic skills. Dolphin Charlie is less intelligent than Dolphin Ella, suggesting that Ella has a more advanced understanding of the tasks presented. Dolphin Daisy sits in the middle of the group in terms of intelligence, showing a balanced mix of skills and learning potential. Dolphin Ella is not the least intelligent, indicating that she has surpassed at least one other dolphin in cognitive abilities. Finally, Dolphin Andy is less intelligent than Dolphin Daisy, suggesting Daisy's higher learning capacity in the colony's hierarchy.",
        "sym_premises": "dolphin_Bella > dolphin_Andy \ndolphin_Charlie < dolphin_Ella \ndolphin_Daisy == 3 \ndolphin_Ella != 1 \ndolphin_Andy < dolphin_Daisy",
        "nl_query": "Dolphin Ella is more intelligent than Dolphin Andy.",
        "sym_query": "dolphin_Ella > dolphin_Andy",
        "label": "True",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\ndolphin_Andy = Function('dolphin_Andy', IntSort())\ndolphin_Bella = Function('dolphin_Bella', IntSort())\ndolphin_Charlie = Function('dolphin_Charlie', IntSort())\ndolphin_Daisy = Function('dolphin_Daisy', IntSort())\ndolphin_Ella = Function('dolphin_Ella', IntSort())\n\nobjects = [dolphin_Andy(), dolphin_Bella(), dolphin_Charlie(), dolphin_Daisy(), dolphin_Ella()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 5)\n\nfor i, j in combinations(range(5), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(dolphin_Bella() > dolphin_Andy())\nconstraints.append(dolphin_Charlie() < dolphin_Ella())\nconstraints.append(dolphin_Daisy() == 3)\nconstraints.append(dolphin_Ella() != 1)\nconstraints.append(dolphin_Andy() < dolphin_Daisy())\nconclusion = dolphin_Ella() > dolphin_Andy()\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)"
    }
]