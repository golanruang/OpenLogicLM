[
    {
        "id": "08d03831-7aa6-4a83-aca0-c2fade21753b",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nIn a row, there are five plants: a rose, a tulip, a daisy, a sunflower, and a lily. The tulip is to the right of the lily. The daisy is to the left of the lily. The tulip is the second from the right. The sunflower is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nrose [IN] [1, 2, 3, 4, 5]\\ntulip [IN] [1, 2, 3, 4, 5]\\ndaisy [IN] [1, 2, 3, 4, 5]\\nsunflower [IN] [1, 2, 3, 4, 5]\\nlily [IN] [1, 2, 3, 4, 5]\\nConstraints:\\ntulip > lily ::: The tulip is to the right of the lily.\\ndaisy < lily ::: The daisy is to the left of the lily.\\ntulip == 4 ::: The tulip is the second from the right.\\nsunflower == 2 ::: The sunflower is the second from the left.\\nAllDifferentConstraint([rose, tulip, daisy, sunflower, lily]) ::: All plants have different values.\\nQuery:\\nA) rose == 2 ::: The rose is the second from the left.\\nB) tulip == 2 ::: The tulip is the second from the left.\\nC) daisy == 2 ::: The daisy is the second from the left.\\nD) sunflower == 2 ::: The sunflower is the second from the left.\\nE) lily == 2 ::: The lily is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "d31b5e67-a6df-477e-83b2-85e62789ba8f",
        "context": "In a line up of five animals at a pet show, there are a dog, a cat, a rabbit, a parrot, and a hamster. The cat is to the right of the hamster. The rabbit is to the left of the hamster. The cat is the second from the right. The parrot is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\ndog [IN] [1, 2, 3, 4, 5]\\ncat [IN] [1, 2, 3, 4, 5]\\nrabbit [IN] [1, 2, 3, 4, 5]\\nparrot [IN] [1, 2, 3, 4, 5]\\nhamster [IN] [1, 2, 3, 4, 5]\\nConstraints:\\ncat > hamster ::: The cat is to the right of the hamster.\\nrabbit < hamster ::: The rabbit is to the left of the hamster.\\ncat == 4 ::: The cat is the second from the right.\\nparrot == 2 ::: The parrot is the second from the left.\\nAllDifferentConstraint([dog, cat, rabbit, parrot, hamster]) ::: All animals have different values.\\nQuery:\\nA) dog == 2 ::: The dog is the second from the left.\\nB) cat == 2 ::: The cat is the second from the left.\\nC) rabbit == 2 ::: The rabbit is the second from the left.\\nD) parrot == 2 ::: The parrot is the second from the left.\\nE) hamster == 2 ::: The hamster is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "d2f10c96-7aa1-4f35-a9d2-76ba166222ce",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a shelf, there are five bottles of perfume: a bottle of Chanel, a bottle of Dior, a bottle of Gucci, a bottle of Prada, and a bottle of Armani. The Dior perfume is to the right of the Armani perfume. The Gucci perfume is to the left of the Armani perfume. The Dior perfume is the second from the right. The Prada perfume is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nChanel [IN] [1, 2, 3, 4, 5]\\nDior [IN] [1, 2, 3, 4, 5]\\nGucci [IN] [1, 2, 3, 4, 5]\\nPrada [IN] [1, 2, 3, 4, 5]\\nArmani [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nDior > Armani ::: The Dior perfume is to the right of the Armani perfume.\\nGucci < Armani ::: The Gucci perfume is to the left of the Armani perfume.\\nDior == 4 ::: The Dior perfume is the second from the right.\\nPrada == 2 ::: The Prada perfume is the second from the left.\\nAllDifferentConstraint([Chanel, Dior, Gucci, Prada, Armani]) ::: All perfumes have different values.\\nQuery:\\nA) Chanel == 2 ::: The Chanel perfume is the second from the left.\\nB) Dior == 2 ::: The Dior perfume is the second from the left.\\nC) Gucci == 2 ::: The Gucci perfume is the second from the left.\\nD) Prada == 2 ::: The Prada perfume is the second from the left.\\nE) Armani == 2 ::: The Armani perfume is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "26974bad-71ba-4d8f-bebe-1865ad173333",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a table, there are five fruits: an apple, a banana, a cherry, a durian, and an elderberry. The banana is to the right of the elderberry. The cherry is to the left of the elderberry. The banana is the second from the right. The durian is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\napple [IN] [1, 2, 3, 4, 5]\\nbanana [IN] [1, 2, 3, 4, 5]\\ncherry [IN] [1, 2, 3, 4, 5]\\ndurian [IN] [1, 2, 3, 4, 5]\\nelderberry [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nbanana > elderberry ::: The banana is to the right of the elderberry.\\ncherry < elderberry ::: The cherry is to the left of the elderberry.\\nbanana == 4 ::: The banana is the second from the right.\\ndurian == 2 ::: The durian is the second from the left.\\nAllDifferentConstraint([apple, banana, cherry, durian, elderberry]) ::: All fruits have different values.\\nQuery:\\nA) apple == 2 ::: The apple is the second from the left.\\nB) banana == 2 ::: The banana is the second from the left.\\nC) cherry == 2 ::: The cherry is the second from the left.\\nD) durian == 2 ::: The durian is the second from the left.\\nE) elderberry == 2 ::: The elderberry is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "2ddad977-e373-462b-a864-1f9170b6be55",
        "context": "On a kitchen counter, there are five items: a toaster, a blender, a microwave, a coffee maker, and a food processor. The blender is to the right of the food processor. The microwave is to the left of the food processor. The blender is the second from the right. The coffee maker is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\ntoaster [IN] [1, 2, 3, 4, 5]\\nblender [IN] [1, 2, 3, 4, 5]\\nmicrowave [IN] [1, 2, 3, 4, 5]\\ncoffee_maker [IN] [1, 2, 3, 4, 5]\\nfood_processor [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nblender > food_processor ::: The blender is to the right of the food processor.\\nmicrowave < food_processor ::: The microwave is to the left of the food processor.\\nblender == 4 ::: The blender is the second from the right.\\ncoffee_maker == 2 ::: The coffee maker is the second from the left.\\nAllDifferentConstraint([toaster, blender, microwave, coffee_maker, food_processor]) ::: All items have different values.\\nQuery:\\nA) toaster == 2 ::: The toaster is the second from the left.\\nB) blender == 2 ::: The blender is the second from the left.\\nC) microwave == 2 ::: The microwave is the second from the left.\\nD) coffee_maker == 2 ::: The coffee maker is the second from the left.\\nE) food_processor == 2 ::: The food processor is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "1ad4816e-59bd-4785-94b6-c4180d39d721",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a display table, there are five action figures: a Spiderman figure, a Batman figure, a Wonder Woman figure, a Hulk figure, and a Thor figure. The Batman figure is to the right of the Thor figure. The Wonder Woman figure is to the left of the Thor figure. The Batman figure is the second from the right. The Hulk figure is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nSpiderman_figure [IN] [1, 2, 3, 4, 5]\\nBatman_figure [IN] [1, 2, 3, 4, 5]\\nWonder_Woman_figure [IN] [1, 2, 3, 4, 5]\\nHulk_figure [IN] [1, 2, 3, 4, 5]\\nThor_figure [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nBatman_figure > Thor_figure ::: The Batman figure is to the right of the Thor figure.\\nWonder_Woman_figure < Thor_figure ::: The Wonder Woman figure is to the left of the Thor figure.\\nBatman_figure == 4 ::: The Batman figure is the second from the right.\\nHulk_figure == 2 ::: The Hulk figure is the second from the left.\\nAllDifferentConstraint([Spiderman_figure, Batman_figure, Wonder_Woman_figure, Hulk_figure, Thor_figure]) ::: All figures have different values.\\nQuery:\\nA) Spiderman_figure == 2 ::: The Spiderman figure is the second from the left.\\nB) Batman_figure == 2 ::: The Batman figure is the second from the left.\\nC) Wonder_Woman_figure == 2 ::: The Wonder Woman figure is the second from the left.\\nD) Hulk_figure == 2 ::: The Hulk figure is the second from the left.\\nE) Thor_figure == 2 ::: The Thor figure is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "68c37de9-fc30-439e-be27-4146d397e545",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a desk, there are five stationary items: a stapler, a pen, a notebook, a pair of scissors, and a paperweight. The pen is to the right of the paperweight. The notebook is to the left of the paperweight. The pen is the second from the right. The pair of scissors is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nstapler [IN] [1, 2, 3, 4, 5]\\npen [IN] [1, 2, 3, 4, 5]\\nnotebook [IN] [1, 2, 3, 4, 5]\\nscissors [IN] [1, 2, 3, 4, 5]\\npaperweight [IN] [1, 2, 3, 4, 5]\\nConstraints:\\npen > paperweight ::: The pen is to the right of the paperweight.\\nnotebook < paperweight ::: The notebook is to the left of the paperweight.\\npen == 4 ::: The pen is the second from the right.\\nscissors == 2 ::: The pair of scissors is the second from the left.\\nAllDifferentConstraint([stapler, pen, notebook, scissors, paperweight]) ::: All items have different values.\\nQuery:\\nA) stapler == 2 ::: The stapler is the second from the left.\\nB) pen == 2 ::: The pen is the second from the left.\\nC) notebook == 2 ::: The notebook is the second from the left.\\nD) scissors == 2 ::: The pair of scissors is the second from the left.\\nE) paperweight == 2 ::: The paperweight is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "34986c45-9c55-4be0-8521-48232ae158cf",
        "context": "In a row of eight paintings in an art gallery, there are: a Monet, a Van Gogh, a Picasso, a Rembrandt, a Dali, a Matisse, a Klimt, and a Warhol. The Van Gogh is to the right of the Warhol. The Picasso is to the left of the Klimt. The Rembrandt is to the right of the Dali. The Matisse is to the left of the Rembrandt. The Van Gogh is the third from the right. The Dali is the fifth from the left. The Warhol is the leftmost. The Monet is the rightmost.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n8: rightmost\\nVariables:\\nMonet [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nVan_Gogh [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nPicasso [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nRembrandt [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nDali [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nMatisse [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nKlimt [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nWarhol [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nConstraints:\\nVan_Gogh > Warhol ::: The Van Gogh is to the right of the Warhol.\\nPicasso < Klimt ::: The Picasso is to the left of the Klimt.\\nRembrandt > Dali ::: The Rembrandt is to the right of the Dali.\\nMatisse < Rembrandt ::: The Matisse is to the left of the Rembrandt.\\nVan_Gogh == 6 ::: The Van Gogh is the third from the right.\\nDali == 5 ::: The Dali is the fifth from the left.\\nWarhol == 1 ::: The Warhol is the leftmost.\\nMonet == 8 ::: The Monet is the rightmost.\\nAllDifferentConstraint([Monet, Van_Gogh, Picasso, Rembrandt, Dali, Matisse, Klimt, Warhol]) ::: All paintings have different values.\\nQuery:\\nA) Monet == 5 ::: The Monet is the fifth from the left.\\nB) Van_Gogh == 5 ::: The Van Gogh is the fifth from the left.\\nC) Picasso == 5 ::: The Picasso is the fifth from the left.\\nD) Rembrandt == 5 ::: The Rembrandt is the fifth from the left.\\nE) Dali == 5 ::: The Dali is the fifth from the left.\\n\\nLabel: E",
        "gpt_ans": "E",
        "ans": "",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 9):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5, position(i)==6, position(i)==7, position(i)==8))\n\ts.add(position(2) > position(8))\n\ts.add(position(3) < position(7))\n\ts.add(position(4) > position(5))\n\ts.add(position(6) < position(4))\n\ts.add(position(2) == 6)\n\ts.add(position(5) == 5)\n\ts.add(position(8) == 1)\n\ts.add(position(1) == 8)\n\tfor comb in combinations(range(1, 9), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "51be7d76-33fc-47f5-be4c-b76b04da1683",
        "context": "The following paragraphs each describe a set of eight objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a long table, there are eight desserts: a chocolate cake, a fruit tart, a lemon pie, a vanilla pudding, a strawberry cheesecake, a blueberry muffin, a pistachio ice cream, and a caramel flan. The fruit tart is to the right of the caramel flan. The lemon pie is to the left of the pistachio ice cream. The vanilla pudding is to the right of the strawberry cheesecake. The blueberry muffin is to the left of the vanilla pudding. The fruit tart is the third from the right. The strawberry cheesecake is the fifth from the left. The caramel flan is the leftmost. The chocolate cake is the rightmost.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n8: rightmost\\nVariables:\\nchocolate_cake [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nfruit_tart [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nlemon_pie [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nvanilla_pudding [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nstrawberry_cheesecake [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nblueberry_muffin [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\npistachio_ice_cream [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\ncaramel_flan [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nConstraints:\\nfruit_tart > caramel_flan ::: The fruit tart is to the right of the caramel flan.\\nlemon_pie < pistachio_ice_cream ::: The lemon pie is to the left of the pistachio ice cream.\\nvanilla_pudding > strawberry_cheesecake ::: The vanilla pudding is to the right of the strawberry cheesecake.\\nblueberry_muffin < vanilla_pudding ::: The blueberry muffin is to the left of the vanilla pudding.\\nfruit_tart == 6 ::: The fruit tart is the third from the right.\\nstrawberry_cheesecake == 5 ::: The strawberry cheesecake is the fifth from the left.\\ncaramel_flan == 1 ::: The caramel flan is the leftmost.\\nchocolate_cake == 8 ::: The chocolate cake is the rightmost.\\nAllDifferentConstraint([chocolate_cake, fruit_tart, lemon_pie, vanilla_pudding, strawberry_cheesecake, blueberry_muffin, pistachio_ice_cream, caramel_flan]) ::: All desserts have different values.\\nQuery:\\nA) chocolate_cake == 5 ::: The chocolate cake is the fifth from the left.\\nB) fruit_tart == 5 ::: The fruit tart is the fifth from the left.\\nC) lemon_pie == 5 ::: The lemon pie is the fifth from the left.\\nD) vanilla_pudding == 5 ::: The vanilla pudding is the fifth from the left.\\nE) strawberry_cheesecake == 5 ::: The strawberry cheesecake is the fifth from the left.\\n\\nLabel: E",
        "gpt_ans": "E",
        "ans": "",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 9):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5, position(i)==6, position(i)==7, position(i)==8))\n\ts.add(position(2) > position(8))\n\ts.add(position(3) < position(7))\n\ts.add(position(4) > position(5))\n\ts.add(position(6) < position(4))\n\ts.add(position(2) == 6)\n\ts.add(position(5) == 5)\n\ts.add(position(8) == 1)\n\ts.add(position(1) == 8)\n\tfor comb in combinations(range(1, 9), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "32d28244-cad7-4cc9-9977-0708b50d3a91",
        "context": "The following paragraphs each describe a set of eight objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nIn a museum, there are eight paintings: a Picasso, a Van Gogh, a Monet, a Rembrandt, a Da Vinci, a Matisse, a Renoir, and a Cezanne. The Van Gogh is more prominent than the Matisse. The Rembrandt is less prominent than the Picasso. The Da Vinci is more prominent than the Monet. The Renoir is the least prominent. The Cezanne is the most prominent. The Picasso is more prominent than the Rembrandt. The Rembrandt is more prominent than the Van Gogh. The Matisse is more prominent than the Monet. The Van Gogh is less prominent than the Da Vinci.",
        "raw_logic_program": "Domain:\\n1: least prominent\\n8: most prominent\\nVariables:\\nPicasso [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nVan_Gogh [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nMonet [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nRembrandt [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nDa_Vinci [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nMatisse [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nRenoir [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nCezanne [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nConstraints:\\nVan_Gogh > Matisse ::: The Van Gogh is more prominent than the Matisse.\\nRembrandt < Picasso ::: The Rembrandt is less prominent than the Picasso.\\nDa_Vinci > Monet ::: The Da Vinci is more prominent than the Monet.\\nRenoir == 1 ::: The Renoir is the least prominent.\\nCezanne == 8 ::: The Cezanne is the most prominent.\\nPicasso > Rembrandt ::: The Picasso is more prominent than the Rembrandt.\\nRembrandt > Van_Gogh ::: The Rembrandt is more prominent than the Van Gogh.\\nMatisse > Monet ::: The Matisse is more prominent than the Monet.\\nVan_Gogh < Da_Vinci ::: The Van Gogh is less prominent than the Da Vinci.\\nAllDifferentConstraint([Picasso, Van_Gogh, Monet, Rembrandt, Da_Vinci, Matisse, Renoir, Cezanne]) ::: All paintings have different values.\\nQuery:\\nA) Picasso == 4 ::: The Picasso is the fourth most prominent.\\nB) Van_Gogh == 4 ::: The Van Gogh is the fourth most prominent.\\nC) Monet == 4 ::: The Monet is the fourth most prominent.\\nD) Rembrandt == 4 ::: The Rembrandt is the fourth most prominent.\\nE) Da_Vinci == 4 ::: The Da Vinci is the fourth most prominent.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 9):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5, position(i)==6, position(i)==7, position(i)==8))\n\ts.add(position(2) > position(6))\n\ts.add(position(4) < position(1))\n\ts.add(position(5) > position(3))\n\ts.add(position(7) == 1)\n\ts.add(position(8) == 8)\n\ts.add(position(1) > position(4))\n\ts.add(position(4) > position(2))\n\ts.add(position(6) > position(3))\n\ts.add(position(2) < position(5))\n\tfor comb in combinations(range(1, 9), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "8990d4b3-34d6-4077-85c6-11e5cc15c799",
        "context": "In a company's hierarchy, there are eight positions: CEO, CTO, COO, CFO, HR Manager, Sales Manager, IT Manager, and Office Assistant. The CTO is more prominent than the IT Manager. The CFO is less prominent than the CEO. The HR Manager is more prominent than the COO. The Office Assistant is the least prominent. The CEO is the most prominent. The CEO is more prominent than the CFO. The CFO is more prominent than the CTO. The IT Manager is more prominent than the COO. The CTO is less prominent than the HR Manager.",
        "raw_logic_program": "Domain:\\n1: least prominent\\n8: most prominent\\nVariables:\\nCEO [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nCTO [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nCOO [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nCFO [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nHR_Manager [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nSales_Manager [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nIT_Manager [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nOffice_Assistant [IN] [1, 2, 3, 4, 5, 6, 7, 8]\\nConstraints:\\nCTO > IT_Manager ::: The CTO is more prominent than the IT Manager.\\nCFO < CEO ::: The CFO is less prominent than the CEO.\\nHR_Manager > COO ::: The HR Manager is more prominent than the COO.\\nOffice_Assistant == 1 ::: The Office Assistant is the least prominent.\\nCEO == 8 ::: The CEO is the most prominent.\\nCEO > CFO ::: The CEO is more prominent than the CFO.\\nCFO > CTO ::: The CFO is more prominent than the CTO.\\nIT_Manager > COO ::: The IT Manager is more prominent than the COO.\\nCTO < HR_Manager ::: The CTO is less prominent than the HR Manager.\\nAllDifferentConstraint([CEO, CTO, COO, CFO, HR_Manager, Sales_Manager, IT_Manager, Office_Assistant]) ::: All positions have different values.\\nQuery:\\nA) CEO == 4 ::: The CEO is the fourth most prominent.\\nB) CTO == 4 ::: The CTO is the fourth most prominent.\\nC) COO == 4 ::: The COO is the fourth most prominent.\\nD) CFO == 4 ::: The CFO is the fourth most prominent.\\nE) HR_Manager == 4 ::: The HR Manager is the fourth most prominent.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 9):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5, position(i)==6, position(i)==7, position(i)==8))\n\ts.add(position(2) > position(7))\n\ts.add(position(4) < position(1))\n\ts.add(position(5) > position(3))\n\ts.add(position(8) == 1)\n\ts.add(position(1) == 8)\n\ts.add(position(1) > position(4))\n\ts.add(position(4) > position(2))\n\ts.add(position(7) > position(3))\n\ts.add(position(2) < position(5))\n\tfor comb in combinations(range(1, 9), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "3edf77cc-628d-4a29-9b66-1e44f890acf9",
        "context": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nIn a group of three children, there are: Tom, Jerry, and Timmy. Tom is taller than Jerry. Timmy is shorter than Jerry. Tom is the tallest among them. Timmy is the shortest.",
        "raw_logic_program": "Domain:\\n1: shortest\\n3: tallest\\nVariables:\\nTom [IN] [1, 2, 3]\\nJerry [IN] [1, 2, 3]\\nTimmy [IN] [1, 2, 3]\\nConstraints:\\nTom > Jerry ::: Tom is taller than Jerry.\\nTimmy < Jerry ::: Timmy is shorter than Jerry.\\nTom == 3 ::: Tom is the tallest among them.\\nTimmy == 1 ::: Timmy is the shortest.\\nAllDifferentConstraint([Tom, Jerry, Timmy]) ::: All children have different values.\\nQuery:\\nA) Tom == 2 ::: Tom is the middle child in terms of height.\\nB) Jerry == 2 ::: Jerry is the middle child in terms of height.\\nC) Timmy == 2 ::: Timmy is the middle child in terms of height.\\nD) Tom == 1 ::: Tom is the shortest child.\\nE) Jerry == 1 ::: Jerry is the shortest child.\\n\\nLabel: B",
        "gpt_ans": "B",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 4):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3))\n\ts.add(position(1) > position(2))\n\ts.add(position(3) < position(2))\n\ts.add(position(1) == 3)\n\ts.add(position(3) == 1)\n\tfor comb in combinations(range(1, 4), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "41ca2a83-94f0-434c-a0c9-1335c22d531a",
        "context": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nIn a flower garden, there are three plants: a rose, a tulip, and a daisy. The rose is taller than the tulip. The daisy is shorter than the tulip. The rose is the tallest. The daisy is the shortest.",
        "raw_logic_program": "Domain:\\n1: shortest\\n3: tallest\\nVariables:\\nrose [IN] [1, 2, 3]\\ntulip [IN] [1, 2, 3]\\ndaisy [IN] [1, 2, 3]\\nConstraints:\\nrose > tulip ::: The rose is taller than the tulip.\\ndaisy < tulip ::: The daisy is shorter than the tulip.\\nrose == 3 ::: The rose is the tallest.\\ndaisy == 1 ::: The daisy is the shortest.\\nAllDifferentConstraint([rose, tulip, daisy]) ::: All plants have different values.\\nQuery:\\nA) rose == 2 ::: The rose is the second tallest.\\nB) tulip == 2 ::: The tulip is the second tallest.\\nC) daisy == 2 ::: The daisy is the second tallest.\\nD) rose == 1 ::: The rose is the shortest.\\nE) tulip == 1 ::: The tulip is the shortest.\\n\\nLabel: B",
        "gpt_ans": "B",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 4):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3))\n\ts.add(position(1) > position(2))\n\ts.add(position(3) < position(2))\n\ts.add(position(1) == 3)\n\ts.add(position(3) == 1)\n\tfor comb in combinations(range(1, 4), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "5007ec1c-aa06-4b04-9726-d769ee74a559",
        "context": "The following paragraphs each describe a set of six objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nIn a family, there are six siblings: John, Mike, Sam, Kate, Lisa, and Jack. John is older than Sam. Jack is younger than Kate. Lisa is older than Mike. Mike is younger than John. Sam is the youngest sibling. Kate is the second oldest sibling.",
        "raw_logic_program": "Domain:\\n1: youngest\\n6: oldest\\nVariables:\\nJohn [IN] [1, 2, 3, 4, 5, 6]\\nMike [IN] [1, 2, 3, 4, 5, 6]\\nSam [IN] [1, 2, 3, 4, 5, 6]\\nKate [IN] [1, 2, 3, 4, 5, 6]\\nLisa [IN] [1, 2, 3, 4, 5, 6]\\nJack [IN] [1, 2, 3, 4, 5, 6]\\nConstraints:\\nJohn > Sam ::: John is older than Sam.\\nJack < Kate ::: Jack is younger than Kate.\\nLisa > Mike ::: Lisa is older than Mike.\\nMike < John ::: Mike is younger than John.\\nSam == 1 ::: Sam is the youngest sibling.\\nKate == 5 ::: Kate is the second oldest sibling.\\nAllDifferentConstraint([John, Mike, Sam, Kate, Lisa, Jack]) ::: All siblings have different values.\\nQuery:\\nA) John == 5 ::: John is the second oldest sibling.\\nB) Mike == 5 ::: Mike is the second oldest sibling.\\nC) Sam == 5 ::: Sam is the second oldest sibling.\\nD) Kate == 5 ::: Kate is the second oldest sibling.\\nE) Lisa == 5 ::: Lisa is the second oldest sibling.\\nF) Jack == 5 ::: Jack is the second oldest sibling.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 7):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5, position(i)==6))\n\ts.add(position(1) > position(3))\n\ts.add(position(6) < position(4))\n\ts.add(position(5) > position(2))\n\ts.add(position(2) < position(1))\n\ts.add(position(3) == 1)\n\ts.add(position(4) == 5)\n\tfor comb in combinations(range(1, 7), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "ef0063f7-40ee-4435-b3fd-202506572f86",
        "context": "The following paragraphs each describe a set of six items arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nIn a vintage clothing store, there are six items: a fedora, a pair of bell-bottom jeans, a flapper dress, a waistcoat, a tie-dye shirt, and a poodle skirt. The fedora is older than the flapper dress. The poodle skirt is younger than the waistcoat. The tie-dye shirt is older than the bell-bottom jeans. The bell-bottom jeans are younger than the fedora. The flapper dress is the newest item. The waistcoat is the second oldest item.",
        "raw_logic_program": "Domain:\\n1: oldest\\n6: newest\\nVariables:\\nfedora [IN] [1, 2, 3, 4, 5, 6]\\nbell_bottom_jeans [IN] [1, 2, 3, 4, 5, 6]\\nflapper_dress [IN] [1, 2, 3, 4, 5, 6]\\nwaistcoat [IN] [1, 2, 3, 4, 5, 6]\\ntie_dye_shirt [IN] [1, 2, 3, 4, 5, 6]\\npoodle_skirt [IN] [1, 2, 3, 4, 5, 6]\\nConstraints:\\nfedora < flapper_dress ::: The fedora is older than the flapper dress.\\npoodle_skirt > waistcoat ::: The poodle skirt is younger than the waistcoat.\\ntie_dye_shirt < bell_bottom_jeans ::: The tie-dye shirt is older than the bell-bottom jeans.\\nbell_bottom_jeans > fedora ::: The bell-bottom jeans are younger than the fedora.\\nflapper_dress == 6 ::: The flapper dress is the newest item.\\nwaistcoat == 2 ::: The waistcoat is the second oldest item.\\nAllDifferentConstraint([fedora, bell_bottom_jeans, flapper_dress, waistcoat, tie_dye_shirt, poodle_skirt]) ::: All items have different values.\\nQuery:\\nA) fedora == 2 ::: The fedora is the second oldest item.\\nB) bell_bottom_jeans == 2 ::: The bell-bottom jeans are the second oldest item.\\nC) flapper_dress == 2 ::: The flapper dress is the second oldest item.\\nD) waistcoat == 2 ::: The waistcoat is the second oldest item.\\nE) tie_dye_shirt == 2 ::: The tie-dye shirt is the second oldest item.\\nF) poodle_skirt == 2 ::: The poodle skirt is the second oldest item.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 7):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5, position(i)==6))\n\ts.add(position(1) < position(3))\n\ts.add(position(6) > position(4))\n\ts.add(position(5) < position(2))\n\ts.add(position(2) > position(1))\n\ts.add(position(3) == 6)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 7), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    }
]