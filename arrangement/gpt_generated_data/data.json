[
    {
        "id": "08d03831-7aa6-4a83-aca0-c2fade21753b",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nIn a row, there are five plants: a rose, a tulip, a daisy, a sunflower, and a lily. The tulip is to the right of the lily. The daisy is to the left of the lily. The tulip is the second from the right. The sunflower is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nrose [IN] [1, 2, 3, 4, 5]\\ntulip [IN] [1, 2, 3, 4, 5]\\ndaisy [IN] [1, 2, 3, 4, 5]\\nsunflower [IN] [1, 2, 3, 4, 5]\\nlily [IN] [1, 2, 3, 4, 5]\\nConstraints:\\ntulip > lily ::: The tulip is to the right of the lily.\\ndaisy < lily ::: The daisy is to the left of the lily.\\ntulip == 4 ::: The tulip is the second from the right.\\nsunflower == 2 ::: The sunflower is the second from the left.\\nAllDifferentConstraint([rose, tulip, daisy, sunflower, lily]) ::: All plants have different values.\\nQuery:\\nA) rose == 2 ::: The rose is the second from the left.\\nB) tulip == 2 ::: The tulip is the second from the left.\\nC) daisy == 2 ::: The daisy is the second from the left.\\nD) sunflower == 2 ::: The sunflower is the second from the left.\\nE) lily == 2 ::: The lily is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "d31b5e67-a6df-477e-83b2-85e62789ba8f",
        "context": "In a line up of five animals at a pet show, there are a dog, a cat, a rabbit, a parrot, and a hamster. The cat is to the right of the hamster. The rabbit is to the left of the hamster. The cat is the second from the right. The parrot is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\ndog [IN] [1, 2, 3, 4, 5]\\ncat [IN] [1, 2, 3, 4, 5]\\nrabbit [IN] [1, 2, 3, 4, 5]\\nparrot [IN] [1, 2, 3, 4, 5]\\nhamster [IN] [1, 2, 3, 4, 5]\\nConstraints:\\ncat > hamster ::: The cat is to the right of the hamster.\\nrabbit < hamster ::: The rabbit is to the left of the hamster.\\ncat == 4 ::: The cat is the second from the right.\\nparrot == 2 ::: The parrot is the second from the left.\\nAllDifferentConstraint([dog, cat, rabbit, parrot, hamster]) ::: All animals have different values.\\nQuery:\\nA) dog == 2 ::: The dog is the second from the left.\\nB) cat == 2 ::: The cat is the second from the left.\\nC) rabbit == 2 ::: The rabbit is the second from the left.\\nD) parrot == 2 ::: The parrot is the second from the left.\\nE) hamster == 2 ::: The hamster is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "d2f10c96-7aa1-4f35-a9d2-76ba166222ce",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a shelf, there are five bottles of perfume: a bottle of Chanel, a bottle of Dior, a bottle of Gucci, a bottle of Prada, and a bottle of Armani. The Dior perfume is to the right of the Armani perfume. The Gucci perfume is to the left of the Armani perfume. The Dior perfume is the second from the right. The Prada perfume is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nChanel [IN] [1, 2, 3, 4, 5]\\nDior [IN] [1, 2, 3, 4, 5]\\nGucci [IN] [1, 2, 3, 4, 5]\\nPrada [IN] [1, 2, 3, 4, 5]\\nArmani [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nDior > Armani ::: The Dior perfume is to the right of the Armani perfume.\\nGucci < Armani ::: The Gucci perfume is to the left of the Armani perfume.\\nDior == 4 ::: The Dior perfume is the second from the right.\\nPrada == 2 ::: The Prada perfume is the second from the left.\\nAllDifferentConstraint([Chanel, Dior, Gucci, Prada, Armani]) ::: All perfumes have different values.\\nQuery:\\nA) Chanel == 2 ::: The Chanel perfume is the second from the left.\\nB) Dior == 2 ::: The Dior perfume is the second from the left.\\nC) Gucci == 2 ::: The Gucci perfume is the second from the left.\\nD) Prada == 2 ::: The Prada perfume is the second from the left.\\nE) Armani == 2 ::: The Armani perfume is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "26974bad-71ba-4d8f-bebe-1865ad173333",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a table, there are five fruits: an apple, a banana, a cherry, a durian, and an elderberry. The banana is to the right of the elderberry. The cherry is to the left of the elderberry. The banana is the second from the right. The durian is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\napple [IN] [1, 2, 3, 4, 5]\\nbanana [IN] [1, 2, 3, 4, 5]\\ncherry [IN] [1, 2, 3, 4, 5]\\ndurian [IN] [1, 2, 3, 4, 5]\\nelderberry [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nbanana > elderberry ::: The banana is to the right of the elderberry.\\ncherry < elderberry ::: The cherry is to the left of the elderberry.\\nbanana == 4 ::: The banana is the second from the right.\\ndurian == 2 ::: The durian is the second from the left.\\nAllDifferentConstraint([apple, banana, cherry, durian, elderberry]) ::: All fruits have different values.\\nQuery:\\nA) apple == 2 ::: The apple is the second from the left.\\nB) banana == 2 ::: The banana is the second from the left.\\nC) cherry == 2 ::: The cherry is the second from the left.\\nD) durian == 2 ::: The durian is the second from the left.\\nE) elderberry == 2 ::: The elderberry is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "2ddad977-e373-462b-a864-1f9170b6be55",
        "context": "On a kitchen counter, there are five items: a toaster, a blender, a microwave, a coffee maker, and a food processor. The blender is to the right of the food processor. The microwave is to the left of the food processor. The blender is the second from the right. The coffee maker is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\ntoaster [IN] [1, 2, 3, 4, 5]\\nblender [IN] [1, 2, 3, 4, 5]\\nmicrowave [IN] [1, 2, 3, 4, 5]\\ncoffee_maker [IN] [1, 2, 3, 4, 5]\\nfood_processor [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nblender > food_processor ::: The blender is to the right of the food processor.\\nmicrowave < food_processor ::: The microwave is to the left of the food processor.\\nblender == 4 ::: The blender is the second from the right.\\ncoffee_maker == 2 ::: The coffee maker is the second from the left.\\nAllDifferentConstraint([toaster, blender, microwave, coffee_maker, food_processor]) ::: All items have different values.\\nQuery:\\nA) toaster == 2 ::: The toaster is the second from the left.\\nB) blender == 2 ::: The blender is the second from the left.\\nC) microwave == 2 ::: The microwave is the second from the left.\\nD) coffee_maker == 2 ::: The coffee maker is the second from the left.\\nE) food_processor == 2 ::: The food processor is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "1ad4816e-59bd-4785-94b6-c4180d39d721",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a display table, there are five action figures: a Spiderman figure, a Batman figure, a Wonder Woman figure, a Hulk figure, and a Thor figure. The Batman figure is to the right of the Thor figure. The Wonder Woman figure is to the left of the Thor figure. The Batman figure is the second from the right. The Hulk figure is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nSpiderman_figure [IN] [1, 2, 3, 4, 5]\\nBatman_figure [IN] [1, 2, 3, 4, 5]\\nWonder_Woman_figure [IN] [1, 2, 3, 4, 5]\\nHulk_figure [IN] [1, 2, 3, 4, 5]\\nThor_figure [IN] [1, 2, 3, 4, 5]\\nConstraints:\\nBatman_figure > Thor_figure ::: The Batman figure is to the right of the Thor figure.\\nWonder_Woman_figure < Thor_figure ::: The Wonder Woman figure is to the left of the Thor figure.\\nBatman_figure == 4 ::: The Batman figure is the second from the right.\\nHulk_figure == 2 ::: The Hulk figure is the second from the left.\\nAllDifferentConstraint([Spiderman_figure, Batman_figure, Wonder_Woman_figure, Hulk_figure, Thor_figure]) ::: All figures have different values.\\nQuery:\\nA) Spiderman_figure == 2 ::: The Spiderman figure is the second from the left.\\nB) Batman_figure == 2 ::: The Batman figure is the second from the left.\\nC) Wonder_Woman_figure == 2 ::: The Wonder Woman figure is the second from the left.\\nD) Hulk_figure == 2 ::: The Hulk figure is the second from the left.\\nE) Thor_figure == 2 ::: The Thor figure is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    },
    {
        "id": "68c37de9-fc30-439e-be27-4146d397e545",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\\n\\nOn a desk, there are five stationary items: a stapler, a pen, a notebook, a pair of scissors, and a paperweight. The pen is to the right of the paperweight. The notebook is to the left of the paperweight. The pen is the second from the right. The pair of scissors is the second from the left.",
        "raw_logic_program": "Domain:\\n1: leftmost\\n5: rightmost\\nVariables:\\nstapler [IN] [1, 2, 3, 4, 5]\\npen [IN] [1, 2, 3, 4, 5]\\nnotebook [IN] [1, 2, 3, 4, 5]\\nscissors [IN] [1, 2, 3, 4, 5]\\npaperweight [IN] [1, 2, 3, 4, 5]\\nConstraints:\\npen > paperweight ::: The pen is to the right of the paperweight.\\nnotebook < paperweight ::: The notebook is to the left of the paperweight.\\npen == 4 ::: The pen is the second from the right.\\nscissors == 2 ::: The pair of scissors is the second from the left.\\nAllDifferentConstraint([stapler, pen, notebook, scissors, paperweight]) ::: All items have different values.\\nQuery:\\nA) stapler == 2 ::: The stapler is the second from the left.\\nB) pen == 2 ::: The pen is the second from the left.\\nC) notebook == 2 ::: The notebook is the second from the left.\\nD) scissors == 2 ::: The pair of scissors is the second from the left.\\nE) paperweight == 2 ::: The paperweight is the second from the left.\\n\\nLabel: D",
        "gpt_ans": "D",
        "ans": "B",
        "z3_program": "from z3 import *\nfrom itertools import combinations\ndef solve(constraint):\n\ts = Solver()\n\tposition = Function(\"pos\", IntSort(), IntSort())\n\tfor i in range(1, 6):\n\t\ts.add(Or(position(i)==1, position(i)==2, position(i)==3, position(i)==4, position(i)==5))\n\ts.add(position(2) > position(5))\n\ts.add(position(3) < position(5))\n\ts.add(position(2) == 4)\n\ts.add(position(4) == 2)\n\tfor comb in combinations(range(1, 6), 2):\n\t\ts.add(position(comb[0])!= position(comb[1]))\n\ts.add(constraint)\n\tif s.check() == z3.sat:\n\t\tprint(s.model())\n\t\treturn True\n\telse:\n\t\tprint(\"Solution does not exist.\")\n\t\treturn False"
    }
]