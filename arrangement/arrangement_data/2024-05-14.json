[
    {
        "id": "ecd1909a-a7bd-4e34-9bbe-909389fd2c5d",
        "type": "Arrangement",
        "context": "In a city stadium, seven basketball players from different teams are participating in a charity game. All players vary in height, ranging from the shortest to the tallest. The height of each player significantly impacts their playing strategy and position on the court. ",
        "nl_premises": "According to the team roster, the second player is shorter than the fifth, probably leading to a difference in their positions on the court. The sixth player is taller than the first, indicating they might play a more defensive position. The third player is shorter than the seventh, suggesting a potential advantage for the seventh player in rebounds. The fourth player is shorter than the sixth, likely affecting their match-up strategy. The first player is the third shortest, which might have them playing as a point guard, while the seventh player, being the third tallest, could be positioned as a power forward or center.",
        "sym_premises": "second_player < fifth_player \nsixth_player > first_player \nthird_player < seventh_player \nfourth_player < sixth_player \nfirst_player == 3 \nseventh_player == 5",
        "nl_query": "The fourth player is shorter than or equal to the second player. ",
        "sym_query": "fourth_player <= second_player",
        "label": "False",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\nfirst_player = Function('first_player', IntSort())\nsecond_player = Function('second_player', IntSort())\nthird_player = Function('third_player', IntSort())\nfourth_player = Function('fourth_player', IntSort())\nfifth_player = Function('fifth_player', IntSort())\nsixth_player = Function('sixth_player', IntSort())\nseventh_player = Function('seventh_player', IntSort())\n\nobjects = [first_player(), second_player(), third_player(), fourth_player(), fifth_player(), sixth_player(), seventh_player()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 7)\n\nfor i, j in combinations(range(7), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(second_player() < fifth_player())\nconstraints.append(sixth_player() > first_player())\nconstraints.append(third_player() < seventh_player())\nconstraints.append(fourth_player() < sixth_player())\nconstraints.append(first_player() == 3)\nconstraints.append(seventh_player() == 5)\nconclusion = fourth_player() <= second_player()\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)",
        "symbolic_formulation": 
    },
    {
        "id": "002b0ce5-ec1b-4437-b16f-e702f4b3a39a",
        "type": "Arrangement",
        "context": "In a botanical garden, six different species of flowers are arranged based on their height, from smallest to largest. These include three types of roses, two types of tulips, and a sunflower. Each species has a unique height, contributing to the garden's beauty and diversity.",
        "nl_premises": "The first flower species is smaller than the second, suggesting perhaps a rose smaller than a tulip. The second flower species is smaller than the third, likely another taller tulip. However, the third species is larger than the fourth, and the fourth species is larger than the fifth, indicating a descending order among perhaps the roses and the sunflower. Surprisingly, the sixth species, potentially another variation of rose, is smaller than the fifth but larger than the first. Though not the smallest, the second flower species is not the fourth largest, and while not the largest, the fifth species is not the second smallest.",
        "sym_premises": "first_flower < second_flower \nsecond_flower < third_flower \nthird_flower > fourth_flower \nfourth_flower > fifth_flower \nsixth_flower < fifth_flower \nsixth_flower > first_flower \nsecond_flower != 4 \nfifth_flower != 2",
        "nl_query": "The third flower species is larger than or equal to the fourth flower species.",
        "sym_query": "third_flower >= fourth_flower",
        "label": "True",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\nfirst_flower = Function('first_flower', IntSort())\nsecond_flower = Function('second_flower', IntSort())\nthird_flower = Function('third_flower', IntSort())\nfourth_flower = Function('fourth_flower', IntSort())\nfifth_flower = Function('fifth_flower', IntSort())\nsixth_flower = Function('sixth_flower', IntSort())\n\nobjects = [first_flower(), second_flower(), third_flower(), fourth_flower(), fifth_flower(), sixth_flower()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 6)\n\nfor i, j in combinations(range(6), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(first_flower() < second_flower())\nconstraints.append(second_flower() < third_flower())\nconstraints.append(third_flower() > fourth_flower())\nconstraints.append(fourth_flower() > fifth_flower())\nconstraints.append(sixth_flower() < fifth_flower())\nconstraints.append(sixth_flower() > first_flower())\nconstraints.append(second_flower() != 4)\nconstraints.append(fifth_flower() != 2)\nconclusion = third_flower() >= fourth_flower()\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)"
    }
]