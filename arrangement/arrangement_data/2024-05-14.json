[
    {
        "id": "45eb48c9-6f25-4073-b2d1-95dd508a98cc",
        "type": "Arrangement",
        "context": "In a comprehensive research study, scientists are analyzing seven different animal species native to a certain region. These animals vary greatly in their weight, from the lightest birds to the heaviest mammals. The weight of each animal has important implications for their survival strategies, diet, and role in the local ecosystem. ",
        "nl_premises": "The first animal is lighter than both the second and third species, indicating it might be a small bird or rodent. The fourth animal is heavier than the first, showing a significant size difference, perhaps a mid-sized mammal compared to a bird. The sixth animal is lighter than the seventh, suggesting a gradient in the size of these species. The fifth animal is heavier than the sixth, perhaps displaying a progression from smaller to larger mammals. However, the second animal is lighter than the fourth, hinting at a varied weight distribution among the species. Lastly, the third animal is the second heaviest, possibly a large predator, and the seventh animal is the third lightest, showing the wide range of weights in this ecosystem.",
        "sym_premises": "first_animal < second_animal \nfirst_animal < third_animal \nfourth_animal > first_animal \nsixth_animal < seventh_animal \nfifth_animal > sixth_animal \nsecond_animal < fourth_animal \nfifth_animal < third_animal \nthird_animal == 6 \nseventh_animal == 3",
        "nl_query": "The seventh animal is lighter than or equal to the second lightest animal. ",
        "sym_query": "seventh_animal <= 2",
        "label": "False",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\nfirst_animal = Function('first_animal', IntSort())\nsecond_animal = Function('second_animal', IntSort())\nthird_animal = Function('third_animal', IntSort())\nfourth_animal = Function('fourth_animal', IntSort())\nfifth_animal = Function('fifth_animal', IntSort())\nsixth_animal = Function('sixth_animal', IntSort())\nseventh_animal = Function('seventh_animal', IntSort())\n\nobjects = [first_animal(), second_animal(), third_animal(), fourth_animal(), fifth_animal(), sixth_animal(), seventh_animal()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 7)\n\nfor i, j in combinations(range(7), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(first_animal() < second_animal())\nconstraints.append(first_animal() < third_animal())\nconstraints.append(fourth_animal() > first_animal())\nconstraints.append(sixth_animal() < seventh_animal())\nconstraints.append(fifth_animal() > sixth_animal())\nconstraints.append(second_animal() < fourth_animal())\nconstraints.append(fifth_animal() < third_animal())\nconstraints.append(third_animal() == 6)\nconstraints.append(seventh_animal() == 3)\nconclusion = seventh_animal() <= 2\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)"
    },
    {
        "id": "43a9967b-62f0-4fad-a8ae-af266e8fb307",
        "type": "Arrangement",
        "context": "In a popular local chili cook-off, four entrants have submitted their unique chili recipes, each featuring different levels of spice. The chilies are ranked on a scale from 1 (least spicy) to 4 (most spicy). Spice judgement is crucial for the contest, with the crowd's preferences varying significantly.",
        "nl_premises": "The first chili entry is spicier than the second, suggesting a bolder flavor profile. In contrast, the third chili is less spicy than the fourth, indicating a more mild flavor. The second chili is ranked as the least spicy, appealing to the crowd members with a low tolerance for heat. Lastly, the fourth chili is ranked as the most spicy, a fiery concoction built to challenge even the most seasoned spice enthusiasts. This range of spice levels caters to different palate preferences, making the cook-off an exciting gastronomic event for everyone.",
        "sym_premises": "first_chili > second_chili \nthird_chili < fourth_chili \nsecond_chili == 1 \nfourth_chili == 4",
        "nl_query": "The first chili is less spicy than or equal to the second chili. ",
        "sym_query": "first_chili <= second_chili",
        "label": "False",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\nfirst_chili = Function('first_chili', IntSort())\nsecond_chili = Function('second_chili', IntSort())\nthird_chili = Function('third_chili', IntSort())\nfourth_chili = Function('fourth_chili', IntSort())\n\nobjects = [first_chili(), second_chili(), third_chili(), fourth_chili()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 4)\n\nfor i, j in combinations(range(4), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(first_chili() > second_chili())\nconstraints.append(third_chili() < fourth_chili())\nconstraints.append(second_chili() == 1)\nconstraints.append(fourth_chili() == 4)\nconclusion = first_chili() <= second_chili()\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)"
    },
    {
        "id": "654bab27-3cfc-488a-aebe-ff95f221fd34",
        "type": "Arrangement",
        "context": "In a famous international sculpture exhibition, seven sculptures are displayed, each unique in its size and artistic expression. The sizes of these sculptures have been ranked from smallest to largest to help visitors understand the magnitude and intricacy of each work. ",
        "nl_premises": "The first sculpture is smaller than the second one, making it a subtler piece compared to its successor. The third sculpture is larger than the fourth, signaling a shift in scale and possibly the artist's intent. The fifth sculpture ranks as the fifth largest, standing right in the middle of the size continuum. The sixth sculpture is smaller than the seventh, the latter likely being a grand finale piece. The second sculpture is larger than the fifth, showing a significant size jump early in the exhibition. The fourth sculpture is smaller than the first, hinting at an artist's preference for smaller, more intricate works. Lastly, the third sculpture is larger than the seventh, making it the most massive piece, and a potential showstopper in the exhibition.",
        "sym_premises": "first_sculpture < second_sculpture \nthird_sculpture > fourth_sculpture \nfifth_sculpture == 5 \nsixth_sculpture < seventh_sculpture \nsecond_sculpture > fifth_sculpture \nfourth_sculpture < first_sculpture \nthird_sculpture > seventh_sculpture",
        "nl_query": "The fourth sculpture is smaller than the first sculpture. ",
        "sym_query": "fourth_sculpture < first_sculpture",
        "label": "True",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\nfirst_sculpture = Function('first_sculpture', IntSort())\nsecond_sculpture = Function('second_sculpture', IntSort())\nthird_sculpture = Function('third_sculpture', IntSort())\nfourth_sculpture = Function('fourth_sculpture', IntSort())\nfifth_sculpture = Function('fifth_sculpture', IntSort())\nsixth_sculpture = Function('sixth_sculpture', IntSort())\nseventh_sculpture = Function('seventh_sculpture', IntSort())\n\nobjects = [first_sculpture(), second_sculpture(), third_sculpture(), fourth_sculpture(), fifth_sculpture(), sixth_sculpture(), seventh_sculpture()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 7)\n\nfor i, j in combinations(range(7), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(first_sculpture() < second_sculpture())\nconstraints.append(third_sculpture() > fourth_sculpture())\nconstraints.append(fifth_sculpture() == 5)\nconstraints.append(sixth_sculpture() < seventh_sculpture())\nconstraints.append(second_sculpture() > fifth_sculpture())\nconstraints.append(fourth_sculpture() < first_sculpture())\nconstraints.append(third_sculpture() > seventh_sculpture())\nconclusion = fourth_sculpture() < first_sculpture()\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)"
    },
    {
        "id": "9d34abb9-3776-40b1-88c0-64f3118d5f16",
        "type": "Arrangement",
        "context": "At a local high school, four basketball players are selected to form a new team. Their height is a crucial factor, determining their roles and positions in the team. Each player's height is compared, establishing a clear hierarchy from shortest to tallest. ",
        "nl_premises": "The constraints indicate the relative heights: The first player is taller than the third player, suggesting the latter may play a guard position, while the first could be a forward. The second player is shorter than the fourth player but taller than the first, implying they might play a shooting guard or small forward role. The third player is the shortest, likely making them quick on their feet and suitable for point guard position. Finally, the fourth player is the tallest, making them the center and potentially the key to a strong defense.",
        "sym_premises": "first_player > third_player \nsecond_player < fourth_player \nsecond_player > first_player \nthird_player == 1 \nfourth_player == 4",
        "nl_query": "The second player is shorter than the first player. ",
        "sym_query": "second_player < first_player",
        "label": "False",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\nfirst_player = Function('first_player', IntSort())\nsecond_player = Function('second_player', IntSort())\nthird_player = Function('third_player', IntSort())\nfourth_player = Function('fourth_player', IntSort())\n\nobjects = [first_player(), second_player(), third_player(), fourth_player()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 4)\n\nfor i, j in combinations(range(4), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(first_player() > third_player())\nconstraints.append(second_player() < fourth_player())\nconstraints.append(second_player() > first_player())\nconstraints.append(third_player() == 1)\nconstraints.append(fourth_player() == 4)\nconclusion = second_player() < first_player()\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)"
    },
    {
        "id": "a8e85c3b-dbea-4a79-be9c-ac923e33bd11",
        "type": "Arrangement",
        "context": "In a prestigious international art auction, five unique sculptures are being ranked based on their size from smallest to largest. These sculptures, each crafted by renowned artists, vary in size and complexity, adding to the intrigue and suspense of the auction. ",
        "nl_premises": "The constraints reveal the relative sizes of the sculptures: The first sculpture is smaller than the second, suggesting it may be a delicate piece of miniature art. The second sculpture is smaller than the third - perhaps a medium-sized work of art that is still manageable to transport. The third sculpture is smaller than the fourth, signaling a shift towards larger, more imposing pieces. Finally, the fourth sculpture is smaller than the fifth, which is presumably the grandest and most commanding piece in the collection. These sizes not only affect the spectacle of the auction but also the potential value of these exquisite works of art.",
        "sym_premises": "first_sculpture < second_sculpture \nsecond_sculpture < third_sculpture \nthird_sculpture < fourth_sculpture \nfourth_sculpture < fifth_sculpture",
        "nl_query": "The first sculpture is larger than the second sculpture. ",
        "sym_query": "first_sculpture > second_sculpture",
        "label": "False",
        "z3_program": "from z3 import *\nfrom itertools import combinations\n\nconstraints = []\n\nfirst_sculpture = Function('first_sculpture', IntSort())\nsecond_sculpture = Function('second_sculpture', IntSort())\nthird_sculpture = Function('third_sculpture', IntSort())\nfourth_sculpture = Function('fourth_sculpture', IntSort())\nfifth_sculpture = Function('fifth_sculpture', IntSort())\n\nobjects = [first_sculpture(), second_sculpture(), third_sculpture(), fourth_sculpture(), fifth_sculpture()]\n\nfor obj in objects:\n\tconstraints.append(obj >= 1)\n\tconstraints.append(obj <= 5)\n\nfor i, j in combinations(range(5), 2):\n\tconstraints.append(objects[i] != objects[j])\n\nconstraints.append(first_sculpture() < second_sculpture())\nconstraints.append(second_sculpture() < third_sculpture())\nconstraints.append(third_sculpture() < fourth_sculpture())\nconstraints.append(fourth_sculpture() < fifth_sculpture())\nconclusion = first_sculpture() > second_sculpture()\n\ndef is_valid(constraints, conclusion):\n\tsolver = Solver()\n\tfor c in constraints: solver.add(constraints)\n\tsolver.add(Not(conclusion))\n\treturn solver.check() == unsat\n\nans = is_valid(constraints, conclusion)"
    }
]